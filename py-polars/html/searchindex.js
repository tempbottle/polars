Search.setIndex({"docnames": ["index", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_global_string_cache", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_column_separator", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.unset_global_string_cache", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.nan_max", "reference/api/polars.Expr.nan_min", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.nan_max", "reference/api/polars.Series.nan_min", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.coalesce", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cumfold", "reference/api/polars.cumsum", "reference/api/polars.cut", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.column", "reference/api/polars.testing.columns", "reference/api/polars.testing.dataframes", "reference/api/polars.testing.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_global_string_cache.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_column_separator.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.unset_global_string_cache.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.nan_max.rst", "reference/api/polars.Expr.nan_min.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.nan_max.rst", "reference/api/polars.Series.nan_min.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.coalesce.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cumfold.rst", "reference/api/polars.cumsum.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.column.rst", "reference/api/polars.testing.columns.rst", "reference/api/polars.testing.dataframes.rst", "reference/api/polars.testing.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_global_string_cache", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_change_column_data_type_position_format", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_column_separator", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.unset_global_string_cache", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumsum", "polars.cut", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.microsecond", "polars.internals.series.datetime.DateTimeNameSpace.microseconds", "polars.internals.series.datetime.DateTimeNameSpace.millisecond", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.column", "polars.testing.columns", "polars.testing.dataframes", "polars.testing.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "SQL", "Testing", "Utils"], "terms": {"api": [0, 17, 117, 547, 549, 657, 768, 790], "refer": [0, 101, 208, 415, 650, 738, 757, 758], "input": [0, 189, 398, 476, 535, 625, 631, 719, 748, 749, 752, 757, 758, 795], "output": [0, 17, 38, 39, 60, 62, 97, 105, 107, 108, 113, 117, 191, 192, 253, 274, 275, 283, 313, 323, 469, 476, 518, 624, 657, 748, 758, 774, 781, 795], "function": [0, 17, 26, 33, 56, 61, 62, 93, 96, 114, 117, 145, 152, 153, 154, 191, 192, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 248, 283, 287, 289, 323, 352, 361, 362, 363, 364, 421, 435, 436, 441, 446, 474, 476, 478, 489, 491, 535, 536, 549, 559, 622, 657, 689, 748, 757, 758, 767, 782, 795], "seri": [0, 12, 16, 17, 23, 31, 33, 35, 36, 40, 43, 44, 46, 48, 53, 54, 57, 67, 68, 74, 82, 86, 91, 92, 101, 102, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 133, 137, 138, 157, 158, 163, 164, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 190, 191, 204, 208, 209, 210, 211, 212, 214, 227, 232, 233, 244, 245, 246, 247, 252, 270, 296, 309, 310, 473, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 518, 535, 536, 538, 539, 542, 546, 548, 571, 572, 573, 575, 578, 581, 583, 585, 588, 593, 596, 599, 601, 602, 603, 605, 609, 610, 617, 618, 621, 622, 628, 644, 650, 654, 747, 748, 749, 750, 751, 752, 753, 766, 772, 775, 776, 777, 778, 780, 781, 783, 787, 795], "datafram": [0, 6, 11, 12, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 322, 353, 460, 461, 469, 473, 474, 477, 478, 481, 482, 483, 484, 485, 486, 490, 491, 520, 521, 534, 537, 538, 539, 540, 541, 542, 543, 544, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 699, 722, 724, 734, 735, 745, 756, 757, 758, 759, 761, 762, 763, 765, 767, 769, 770, 771, 772, 776, 777, 779, 781, 782, 788, 793, 795], "lazyfram": [0, 16, 51, 161, 314, 316, 483, 484, 767, 768, 769, 770, 771, 779, 783, 795, 799], "express": [0, 17, 29, 31, 37, 62, 70, 80, 102, 110, 113, 114, 116, 117, 134, 135, 136, 139, 145, 147, 155, 161, 168, 170, 174, 177, 182, 185, 190, 191, 192, 204, 205, 206, 211, 225, 226, 227, 229, 235, 241, 244, 250, 252, 255, 259, 267, 270, 290, 298, 299, 301, 309, 310, 311, 342, 343, 344, 352, 433, 440, 477, 478, 481, 482, 483, 488, 489, 490, 521, 534, 535, 536, 537, 547, 549, 589, 606, 624, 625, 636, 650, 656, 657, 682, 699, 724, 747, 748, 754, 766, 772, 774, 776, 777, 781, 783, 784, 788, 795], "data": [0, 5, 8, 16, 18, 19, 28, 49, 51, 61, 65, 71, 72, 78, 85, 89, 90, 131, 169, 208, 224, 225, 234, 248, 250, 257, 258, 267, 289, 317, 322, 337, 341, 345, 357, 359, 415, 431, 432, 441, 446, 462, 463, 465, 467, 471, 473, 481, 484, 495, 525, 526, 531, 532, 538, 539, 540, 541, 542, 543, 572, 592, 599, 656, 661, 692, 757, 758, 759, 760, 764, 765, 767, 774, 779, 780, 782, 783, 784, 795], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 27, 33, 38, 39, 40, 54, 73, 85, 89, 90, 92, 94, 95, 117, 131, 134, 135, 136, 155, 166, 170, 172, 174, 175, 191, 211, 248, 259, 265, 267, 274, 275, 283, 290, 295, 299, 306, 307, 317, 323, 337, 342, 343, 344, 359, 374, 376, 441, 462, 463, 465, 472, 476, 482, 483, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 525, 534, 535, 538, 540, 543, 571, 573, 575, 578, 581, 583, 585, 588, 593, 610, 622, 645, 646, 647, 650, 657, 660, 662, 664, 667, 673, 675, 678, 681, 686, 703, 733, 734, 735, 738, 747, 748, 757, 758, 760, 764, 767, 773, 779, 780, 781, 782, 783, 784, 786, 795], "config": [0, 102, 310, 795], "except": [0, 50, 280, 463, 471, 795], "test": [0, 276, 282, 758, 795], "util": [0, 267, 795], "sql": [0, 49, 314, 765, 795], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 272, 292], "cfg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 797, 799], "us": [1, 2, 6, 12, 13, 14, 16, 17, 29, 30, 33, 38, 39, 50, 54, 56, 58, 62, 70, 72, 80, 82, 93, 94, 97, 105, 109, 110, 112, 117, 145, 148, 149, 151, 152, 153, 154, 155, 160, 161, 169, 183, 191, 195, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 230, 234, 236, 237, 259, 268, 269, 273, 274, 275, 276, 280, 282, 287, 301, 306, 309, 317, 323, 352, 360, 362, 363, 364, 368, 369, 373, 394, 415, 417, 419, 432, 435, 436, 437, 446, 450, 454, 462, 463, 470, 471, 473, 476, 477, 479, 482, 484, 486, 490, 516, 518, 539, 541, 543, 547, 549, 559, 571, 599, 606, 622, 631, 632, 633, 638, 642, 644, 646, 648, 650, 657, 660, 692, 699, 719, 720, 726, 730, 732, 734, 738, 747, 749, 752, 757, 758, 759, 763, 765, 766, 767, 768, 769, 770, 771, 777, 781, 782, 783, 784, 793], "ascii": [1, 638, 642, 653, 726, 730, 741], "charact": [1, 2, 13, 14, 105, 163, 290, 589, 638, 642, 643, 645, 646, 649, 653, 682, 726, 727, 730, 731, 733, 734, 737, 741, 757, 767], "print": [1, 2, 6, 12, 14, 25, 37, 51, 168, 277, 385, 421, 773], "tabl": [1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 62, 85, 90, 96, 316, 538, 559, 757, 767], "n": [2, 6, 12, 17, 28, 38, 41, 52, 60, 72, 83, 84, 90, 145, 146, 158, 167, 186, 203, 211, 225, 234, 243, 245, 249, 259, 276, 282, 304, 305, 317, 322, 352, 354, 367, 375, 396, 410, 432, 446, 450, 453, 455, 458, 466, 470, 497, 498, 518, 546, 552, 562, 572, 576, 595, 599, 605, 609, 621, 646, 647, 658, 659, 661, 665, 688, 692, 698, 702, 714, 734, 735, 757, 766, 767, 778], "int": [2, 6, 12, 13, 17, 26, 29, 30, 32, 40, 41, 42, 44, 50, 52, 53, 54, 57, 58, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 84, 91, 96, 98, 100, 103, 105, 109, 130, 134, 135, 136, 145, 146, 152, 153, 154, 158, 159, 160, 165, 166, 167, 170, 186, 203, 204, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 235, 239, 243, 244, 245, 249, 254, 267, 268, 269, 276, 280, 282, 290, 297, 298, 300, 302, 304, 305, 308, 312, 330, 331, 337, 340, 342, 343, 344, 352, 354, 361, 362, 363, 364, 367, 368, 369, 374, 375, 395, 396, 399, 400, 402, 404, 405, 407, 408, 409, 410, 413, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 442, 447, 450, 452, 453, 454, 455, 466, 470, 477, 481, 487, 490, 517, 519, 520, 540, 543, 546, 552, 562, 604, 605, 608, 609, 617, 618, 621, 622, 634, 638, 642, 644, 646, 647, 653, 654, 655, 658, 659, 697, 698, 701, 702, 710, 711, 714, 722, 726, 730, 732, 734, 735, 741, 749, 751, 752, 753, 754, 756, 757, 758, 759, 763, 765, 766, 767, 769, 770, 771, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 787], "set": [2, 4, 6, 7, 12, 13, 16, 20, 40, 50, 56, 72, 79, 93, 105, 107, 108, 117, 166, 174, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 230, 234, 235, 259, 260, 267, 279, 280, 283, 287, 300, 313, 317, 322, 323, 371, 374, 385, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 436, 446, 447, 463, 494, 518, 540, 543, 599, 618, 644, 692, 711, 732, 757, 758, 759, 763, 767, 769, 770, 771, 779, 780, 782, 783, 784], "number": [2, 6, 12, 13, 26, 27, 29, 30, 41, 51, 52, 58, 72, 76, 77, 83, 96, 105, 109, 130, 139, 145, 146, 152, 153, 154, 158, 160, 165, 167, 185, 186, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 243, 249, 266, 267, 268, 269, 276, 282, 290, 297, 298, 304, 352, 354, 361, 362, 363, 364, 367, 369, 375, 384, 396, 404, 405, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 439, 440, 442, 450, 453, 466, 470, 487, 530, 546, 550, 552, 562, 577, 579, 584, 586, 592, 597, 598, 600, 605, 609, 617, 621, 622, 646, 647, 658, 659, 666, 668, 677, 679, 685, 690, 691, 693, 698, 702, 710, 714, 734, 735, 757, 758, 767, 770, 774, 778, 782, 783], "string": [2, 3, 15, 33, 38, 39, 50, 80, 96, 97, 105, 107, 108, 110, 215, 216, 217, 218, 219, 221, 222, 223, 240, 259, 261, 262, 267, 272, 274, 275, 280, 313, 317, 451, 473, 482, 486, 494, 497, 515, 518, 537, 571, 589, 596, 610, 660, 682, 689, 703, 757, 767, 781, 782, 784, 786, 795], "valu": [2, 17, 24, 28, 29, 30, 34, 38, 39, 40, 45, 53, 54, 55, 56, 57, 60, 62, 63, 64, 66, 72, 76, 77, 80, 81, 82, 86, 96, 97, 98, 105, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 236, 237, 238, 242, 244, 245, 246, 247, 250, 251, 252, 253, 264, 268, 269, 274, 275, 277, 278, 284, 285, 286, 287, 288, 291, 293, 297, 298, 301, 302, 303, 308, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 339, 342, 343, 344, 346, 347, 352, 353, 354, 356, 357, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 377, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 399, 400, 402, 403, 405, 407, 408, 409, 410, 413, 414, 415, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 444, 445, 446, 452, 454, 455, 456, 457, 465, 468, 469, 471, 472, 481, 484, 486, 487, 489, 490, 491, 505, 506, 514, 535, 536, 540, 542, 550, 551, 553, 554, 555, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 571, 574, 586, 590, 597, 601, 602, 605, 607, 608, 609, 611, 613, 614, 615, 617, 620, 621, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 644, 646, 647, 648, 653, 656, 660, 663, 679, 683, 690, 694, 695, 698, 700, 701, 702, 704, 706, 707, 708, 710, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 732, 734, 735, 736, 741, 747, 749, 750, 751, 752, 753, 757, 765, 766, 767, 777, 779, 780, 781, 782, 783, 784, 786, 788], "paramet": [2, 6, 12, 13, 16, 17, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 49, 50, 52, 54, 56, 58, 60, 61, 62, 64, 66, 67, 68, 70, 72, 74, 76, 77, 79, 80, 81, 82, 83, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 116, 117, 126, 128, 130, 131, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 158, 160, 161, 165, 166, 167, 170, 174, 183, 186, 188, 191, 192, 202, 203, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 239, 243, 244, 249, 250, 253, 254, 255, 259, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 282, 283, 287, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 304, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 319, 322, 323, 332, 335, 337, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 360, 361, 362, 363, 364, 367, 368, 369, 370, 374, 375, 394, 396, 410, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 446, 447, 448, 450, 453, 454, 461, 462, 463, 466, 467, 469, 470, 471, 472, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 497, 498, 505, 508, 517, 518, 519, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 552, 559, 560, 562, 571, 572, 573, 576, 589, 595, 596, 599, 603, 604, 605, 606, 608, 609, 610, 617, 618, 621, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 682, 688, 689, 692, 696, 697, 698, 699, 701, 702, 703, 710, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 744, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784], "turn": [3, 15, 163, 253, 259, 267, 283, 290, 483, 757, 767, 786], "global": [3, 15, 259, 267, 473, 783, 786], "cach": [3, 15, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 290, 299, 473, 483, 759, 767, 769, 771, 786], "format": [4, 5, 7, 27, 56, 105, 107, 266, 272, 287, 313, 594, 650, 687, 738, 756, 757, 761, 767, 768], "liter": [4, 7, 53, 54, 57, 58, 60, 82, 86, 114, 115, 209, 320, 321, 435, 436, 477, 478, 517, 519, 629, 640, 641, 717, 728, 729, 747, 758, 766, 776, 784, 788], "left": [4, 38, 39, 49, 50, 152, 153, 154, 169, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 279, 280, 362, 363, 364, 465, 481, 489, 518, 536, 638, 653, 726, 741, 779, 780], "center": [4, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430], "right": [4, 38, 39, 49, 50, 152, 153, 154, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 279, 280, 362, 363, 364, 446, 481, 518, 642, 730, 757, 779, 780], "cell": 4, "align": [4, 653, 741], "rais": [4, 7, 70, 204, 463, 471, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 624, 650, 738, 747, 779, 780], "keyerror": [4, 7], "wrong": [4, 7], "kei": [4, 7, 38, 50, 60, 62, 66, 69, 280, 293, 559], "chang": [5, 96, 97, 145, 182, 203, 215, 216, 217, 218, 219, 221, 222, 223, 352, 410, 441, 491, 662, 689, 757, 768], "posit": [5, 317], "directli": [5, 152, 153, 154, 362, 363, 364, 783, 784], "below": [5, 24, 37, 169, 264, 788], "column": [5, 6, 8, 9, 10, 16, 17, 22, 23, 24, 25, 26, 27, 32, 35, 37, 38, 39, 43, 44, 49, 50, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 73, 74, 80, 81, 82, 86, 88, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 114, 115, 117, 126, 128, 155, 161, 182, 202, 205, 209, 211, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 241, 255, 263, 264, 265, 266, 273, 274, 275, 279, 280, 283, 284, 285, 286, 287, 288, 291, 293, 295, 296, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 317, 320, 321, 461, 473, 474, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 517, 519, 524, 528, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 559, 574, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 597, 598, 600, 603, 624, 626, 646, 647, 650, 663, 666, 668, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 693, 696, 734, 735, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 763, 764, 765, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 783, 787, 788, 795], "name": [5, 9, 10, 16, 17, 20, 23, 24, 32, 35, 49, 50, 56, 62, 66, 73, 86, 92, 93, 95, 101, 102, 103, 113, 155, 182, 192, 205, 241, 260, 263, 279, 280, 287, 293, 295, 301, 307, 310, 312, 316, 317, 319, 341, 371, 418, 461, 474, 475, 482, 488, 490, 491, 518, 524, 534, 540, 541, 542, 543, 546, 596, 622, 624, 626, 654, 655, 656, 689, 742, 743, 744, 746, 754, 755, 756, 757, 758, 759, 760, 763, 764, 766, 767, 769, 770, 771, 774, 777, 778, 779, 780, 781, 782, 783, 784, 795], "If": [6, 12, 16, 17, 28, 38, 39, 50, 56, 60, 72, 79, 89, 90, 93, 105, 107, 108, 109, 117, 134, 135, 136, 161, 183, 191, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 234, 235, 236, 237, 249, 274, 275, 279, 280, 283, 287, 300, 313, 317, 322, 323, 342, 343, 344, 373, 394, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 437, 446, 447, 459, 463, 466, 471, 473, 474, 477, 479, 487, 491, 518, 539, 541, 542, 543, 559, 618, 644, 645, 646, 647, 650, 657, 711, 732, 733, 734, 735, 738, 747, 757, 758, 759, 763, 765, 767, 769, 770, 771, 774], "0": [6, 12, 16, 17, 18, 19, 21, 22, 25, 29, 30, 33, 34, 36, 38, 40, 44, 49, 53, 54, 55, 57, 58, 59, 63, 64, 68, 72, 73, 77, 79, 80, 81, 82, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 109, 111, 112, 118, 119, 120, 121, 122, 123, 126, 127, 128, 131, 133, 137, 138, 140, 145, 148, 149, 152, 153, 154, 156, 159, 160, 164, 166, 169, 172, 175, 176, 178, 179, 180, 183, 188, 189, 191, 193, 194, 195, 196, 201, 203, 204, 207, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 238, 239, 242, 246, 247, 248, 254, 257, 265, 279, 286, 290, 291, 295, 298, 299, 302, 308, 309, 310, 312, 317, 324, 325, 326, 327, 328, 329, 330, 332, 334, 337, 339, 341, 346, 347, 352, 353, 355, 360, 362, 363, 364, 368, 372, 374, 382, 384, 386, 387, 388, 389, 390, 394, 400, 401, 410, 414, 415, 421, 423, 424, 426, 427, 428, 430, 432, 443, 444, 445, 449, 450, 456, 457, 460, 464, 465, 470, 471, 477, 478, 481, 485, 489, 490, 491, 521, 536, 549, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 574, 577, 581, 583, 584, 588, 590, 592, 593, 598, 601, 602, 606, 608, 614, 634, 653, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 685, 686, 691, 699, 701, 716, 722, 724, 741, 755, 757, 758, 759, 763, 765, 767, 768, 769, 770, 771, 773, 777, 781, 782, 783, 784, 788], "all": [6, 12, 16, 24, 30, 46, 48, 51, 54, 56, 58, 65, 79, 88, 97, 110, 115, 116, 129, 130, 132, 139, 145, 150, 155, 165, 166, 169, 172, 175, 176, 178, 179, 180, 185, 187, 191, 192, 197, 201, 205, 208, 213, 235, 240, 241, 253, 264, 269, 283, 287, 300, 317, 336, 338, 352, 358, 380, 392, 415, 447, 451, 482, 483, 484, 495, 518, 534, 538, 540, 542, 543, 544, 606, 610, 620, 630, 635, 636, 640, 641, 699, 703, 713, 718, 723, 724, 728, 729, 757, 758, 759, 767, 769, 770, 776, 781, 782, 784, 793, 795], "exampl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 490, 491, 518, 520, 521, 534, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 702, 703, 705, 710, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 738, 747, 758, 765, 767, 768, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 788], "pl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 414, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 487, 490, 491, 517, 518, 519, 520, 521, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 702, 703, 705, 710, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 738, 746, 747, 755, 757, 758, 765, 767, 768, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 788, 793], "5": [6, 16, 17, 18, 19, 21, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 50, 52, 56, 58, 62, 63, 64, 67, 71, 75, 83, 84, 85, 86, 87, 92, 94, 96, 97, 100, 101, 102, 103, 105, 112, 131, 133, 134, 145, 147, 154, 155, 157, 158, 164, 167, 170, 173, 176, 178, 179, 180, 187, 202, 203, 205, 207, 208, 212, 213, 214, 215, 216, 218, 222, 224, 231, 241, 243, 245, 249, 257, 266, 273, 275, 276, 278, 282, 285, 286, 287, 297, 298, 300, 302, 303, 304, 305, 309, 310, 312, 322, 325, 329, 332, 340, 342, 348, 352, 353, 355, 364, 367, 377, 404, 410, 411, 412, 414, 415, 421, 422, 423, 425, 426, 429, 432, 434, 443, 449, 466, 472, 478, 485, 490, 491, 520, 521, 534, 538, 540, 541, 542, 543, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 575, 592, 593, 597, 606, 609, 614, 620, 621, 630, 636, 637, 653, 658, 659, 660, 662, 663, 664, 685, 686, 690, 691, 699, 702, 705, 714, 718, 724, 725, 773, 777, 783, 784], "df": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 257, 260, 264, 266, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 307, 308, 309, 312, 461, 474, 477, 478, 481, 482, 485, 486, 490, 520, 521, 534, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 699, 722, 724, 729, 734, 735, 765, 767, 772, 776, 777, 782, 783, 784, 788, 793], "str": [6, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 39, 41, 43, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 117, 147, 155, 158, 159, 161, 163, 168, 174, 177, 182, 192, 202, 205, 211, 213, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 241, 244, 255, 260, 261, 262, 263, 264, 266, 268, 270, 272, 273, 274, 275, 277, 279, 280, 283, 287, 292, 293, 295, 296, 298, 299, 300, 301, 306, 307, 310, 312, 313, 314, 315, 316, 317, 319, 337, 353, 367, 368, 369, 371, 399, 402, 406, 407, 408, 418, 435, 436, 461, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 497, 517, 518, 519, 520, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 573, 589, 594, 596, 603, 604, 610, 622, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 662, 682, 687, 689, 697, 703, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 781, 782, 783, 784, 787, 793, 798], "i": [6, 16, 17, 24, 26, 34, 37, 38, 39, 40, 44, 45, 47, 50, 51, 54, 56, 60, 62, 70, 72, 79, 82, 85, 87, 93, 94, 96, 97, 102, 105, 107, 108, 109, 114, 115, 116, 117, 145, 152, 153, 154, 157, 163, 166, 168, 170, 183, 191, 202, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 230, 234, 235, 236, 237, 253, 259, 264, 267, 273, 274, 275, 278, 280, 283, 287, 290, 299, 300, 306, 310, 313, 317, 321, 322, 323, 352, 361, 362, 363, 364, 366, 373, 374, 377, 378, 379, 381, 391, 393, 394, 415, 417, 419, 432, 433, 434, 435, 436, 437, 446, 447, 450, 459, 463, 469, 470, 471, 473, 477, 479, 483, 484, 485, 487, 489, 490, 491, 516, 518, 524, 525, 527, 528, 536, 538, 541, 542, 543, 547, 549, 559, 589, 606, 608, 618, 625, 630, 634, 635, 636, 638, 642, 644, 647, 650, 653, 657, 682, 689, 699, 701, 711, 718, 722, 723, 724, 726, 730, 732, 735, 741, 747, 757, 759, 763, 765, 767, 768, 769, 770, 771, 772, 777, 781, 782, 783, 784, 790], "rang": [6, 26, 38, 169, 361, 410, 477, 485, 491, 517, 518, 519, 574, 586, 590, 591, 596, 597, 663, 679, 683, 684, 689, 690, 765], "100": [6, 422, 423, 425, 477, 653, 757, 767, 770], "shape": [6, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 337, 339, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 380, 382, 385, 386, 387, 388, 389, 390, 392, 396, 403, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 439, 442, 443, 444, 445, 447, 448, 449, 453, 454, 455, 456, 457, 460, 461, 465, 467, 468, 469, 472, 473, 474, 478, 481, 482, 484, 485, 486, 490, 491, 518, 520, 521, 532, 534, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 702, 703, 705, 710, 711, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 732, 734, 735, 736, 738, 767, 768, 772, 776, 777, 783, 784, 788], "1": [6, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 414, 415, 418, 419, 420, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 490, 491, 517, 518, 519, 520, 521, 534, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 701, 702, 705, 710, 711, 714, 716, 722, 724, 734, 735, 738, 747, 754, 755, 757, 767, 768, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 784, 787, 788], "2": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 115, 116, 117, 124, 126, 127, 128, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 325, 329, 330, 331, 332, 333, 334, 339, 340, 345, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 478, 481, 482, 484, 485, 486, 490, 491, 520, 521, 534, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 575, 577, 578, 581, 583, 584, 585, 586, 588, 589, 591, 592, 593, 596, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 630, 633, 635, 636, 637, 640, 641, 644, 646, 647, 648, 651, 652, 654, 655, 657, 658, 659, 660, 666, 670, 671, 677, 679, 684, 685, 689, 691, 693, 698, 699, 702, 703, 705, 710, 711, 714, 716, 718, 723, 724, 728, 729, 734, 735, 747, 765, 767, 768, 772, 773, 776, 777, 779, 780, 783, 788], "98": [6, 44, 236, 237, 244], "99": [6, 29, 30, 44, 47, 112, 158, 160, 236, 237, 244, 360, 367, 481], "i64": [6, 8, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 30, 31, 35, 36, 37, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 82, 83, 84, 86, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 113, 116, 117, 130, 134, 141, 142, 143, 144, 146, 147, 155, 157, 158, 160, 161, 162, 165, 167, 168, 169, 170, 173, 176, 178, 179, 180, 182, 184, 187, 190, 191, 192, 193, 196, 197, 202, 203, 205, 206, 209, 210, 212, 213, 225, 227, 228, 230, 231, 235, 236, 241, 242, 243, 244, 245, 250, 252, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 287, 288, 289, 296, 297, 298, 300, 303, 305, 307, 309, 310, 312, 317, 322, 323, 342, 345, 348, 349, 350, 351, 353, 366, 367, 369, 370, 375, 377, 385, 396, 403, 418, 422, 425, 429, 432, 435, 436, 439, 442, 443, 447, 448, 453, 454, 455, 461, 467, 469, 472, 474, 482, 484, 486, 490, 521, 534, 538, 539, 540, 541, 542, 543, 547, 548, 549, 551, 552, 553, 554, 557, 559, 561, 562, 571, 575, 576, 578, 581, 583, 585, 588, 593, 595, 606, 607, 608, 611, 613, 615, 616, 619, 620, 623, 640, 641, 655, 657, 658, 659, 660, 662, 664, 665, 667, 673, 675, 678, 681, 686, 688, 699, 767, 772, 776, 777, 784, 788], "10": [6, 19, 28, 36, 38, 39, 41, 43, 44, 45, 58, 61, 63, 67, 68, 83, 94, 102, 105, 109, 116, 124, 125, 126, 127, 128, 134, 139, 144, 146, 148, 149, 163, 166, 167, 169, 174, 185, 186, 189, 203, 216, 235, 243, 274, 275, 278, 289, 303, 310, 323, 342, 360, 366, 375, 385, 396, 398, 410, 435, 436, 453, 491, 518, 521, 546, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 599, 605, 609, 617, 618, 621, 653, 692, 698, 702, 710, 711, 714, 765, 767, 773, 778, 783, 784], "3": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 112, 113, 114, 117, 126, 127, 128, 130, 131, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 192, 197, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 236, 237, 238, 241, 243, 244, 245, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 337, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 410, 411, 412, 414, 415, 418, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 478, 481, 482, 484, 485, 486, 490, 491, 518, 521, 534, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 572, 574, 575, 576, 577, 584, 586, 590, 591, 592, 595, 596, 597, 598, 599, 604, 605, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 629, 631, 632, 633, 634, 637, 639, 643, 644, 645, 646, 647, 648, 649, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 675, 676, 677, 679, 681, 683, 685, 688, 689, 691, 692, 698, 699, 702, 705, 710, 711, 714, 719, 720, 721, 722, 725, 732, 736, 747, 758, 767, 768, 772, 773, 776, 777, 779, 780, 788], "4": [6, 16, 17, 18, 19, 21, 24, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58, 60, 61, 62, 63, 67, 71, 75, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 111, 112, 116, 117, 127, 130, 131, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 156, 157, 159, 160, 164, 165, 167, 168, 169, 170, 176, 178, 179, 180, 185, 187, 189, 192, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 228, 229, 231, 235, 236, 237, 238, 241, 243, 244, 245, 248, 257, 264, 266, 273, 274, 275, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 322, 325, 332, 339, 340, 342, 352, 353, 355, 366, 368, 369, 377, 380, 385, 387, 388, 389, 390, 392, 404, 410, 411, 412, 415, 424, 426, 427, 428, 429, 430, 432, 434, 443, 447, 448, 454, 455, 465, 472, 473, 478, 481, 484, 486, 490, 518, 521, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 574, 578, 584, 585, 586, 590, 591, 592, 593, 596, 597, 598, 600, 605, 606, 609, 617, 618, 621, 629, 638, 642, 644, 646, 647, 650, 657, 658, 659, 666, 667, 672, 674, 677, 678, 679, 680, 684, 685, 686, 687, 689, 690, 691, 698, 699, 702, 710, 711, 714, 717, 725, 726, 730, 732, 734, 735, 738, 767, 773, 776, 777, 779, 780, 784, 788], "95": [6, 112], "96": [6, 112], "97": [6, 44, 112], "ascii_ful": 7, "ascii_no_bord": 7, "ascii_borders_onli": 7, "ascii_borders_only_condens": 7, "ascii_horizontal_onli": 7, "ascii_markdown": 7, "utf8_ful": 7, "utf8_no_bord": 7, "utf8_borders_onli": 7, "utf8_horizontal_onli": 7, "noth": [7, 630, 634, 635, 636, 718, 722, 723, 724], "style": [7, 62], "hide": [8, 9, 10, 11], "f64": [8, 18, 19, 21, 22, 24, 25, 29, 30, 33, 36, 44, 49, 50, 54, 55, 63, 64, 79, 80, 81, 94, 98, 101, 102, 111, 118, 119, 120, 121, 122, 123, 131, 133, 137, 138, 145, 148, 149, 151, 152, 153, 154, 155, 156, 164, 169, 176, 178, 179, 180, 183, 188, 189, 194, 195, 203, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 232, 233, 234, 238, 239, 246, 247, 254, 257, 264, 279, 285, 286, 291, 302, 308, 309, 310, 324, 325, 326, 327, 328, 329, 339, 346, 347, 352, 353, 363, 364, 368, 372, 410, 421, 423, 424, 426, 427, 428, 430, 431, 444, 445, 449, 456, 457, 481, 485, 491, 534, 551, 553, 554, 555, 556, 557, 560, 561, 592, 614, 685, 768, 783], "etc": [8, 435, 436, 477, 541, 543, 757, 759, 763, 769, 771], "separ": [10, 93, 105, 163, 486, 489, 610, 703], "from": [10, 16, 21, 22, 26, 28, 38, 39, 50, 51, 56, 66, 70, 72, 74, 93, 94, 96, 97, 105, 140, 155, 169, 183, 199, 200, 203, 225, 236, 237, 251, 253, 263, 264, 267, 272, 274, 275, 287, 292, 293, 296, 306, 311, 322, 357, 361, 379, 394, 407, 408, 410, 432, 469, 472, 481, 517, 518, 519, 520, 534, 538, 539, 540, 541, 542, 543, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 634, 650, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 722, 747, 756, 757, 758, 759, 761, 762, 763, 765, 767, 769, 770, 771, 774, 781, 782, 783, 784], "row": [10, 12, 16, 17, 24, 28, 31, 33, 38, 40, 41, 46, 48, 50, 51, 52, 56, 79, 83, 84, 87, 94, 96, 103, 105, 107, 109, 117, 157, 163, 167, 186, 203, 212, 235, 243, 259, 264, 267, 270, 271, 274, 276, 280, 281, 282, 283, 287, 300, 304, 305, 306, 312, 322, 366, 375, 396, 410, 419, 447, 453, 489, 527, 530, 533, 536, 540, 541, 543, 546, 549, 552, 562, 658, 659, 757, 758, 759, 763, 767, 769, 770, 771, 778, 782, 783], "inform": [11, 134, 135, 136, 183, 234, 290, 342, 343, 344, 394, 446], "when": [11, 16, 17, 25, 26, 28, 30, 33, 38, 70, 109, 134, 135, 136, 152, 153, 154, 160, 191, 269, 317, 322, 342, 343, 344, 361, 362, 363, 364, 369, 435, 436, 473, 489, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 625, 650, 757, 759, 763, 767, 769, 770, 783, 784, 786], "displai": 11, "element": [12, 118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 145, 156, 166, 174, 189, 203, 208, 211, 226, 231, 232, 233, 238, 246, 247, 249, 323, 324, 325, 326, 327, 328, 329, 346, 347, 348, 349, 350, 351, 352, 365, 370, 385, 398, 410, 415, 433, 443, 444, 445, 449, 450, 456, 457, 466, 467, 470, 606, 646, 647, 699, 734, 735, 784], "width": [13, 16, 638, 642, 653, 726, 730, 741, 757], "draw": 13, "char": [13, 473], "utf8": [14, 25, 26, 33, 73, 89, 157, 163, 265, 295, 366, 393, 463, 473, 486, 610, 628, 632, 634, 635, 636, 644, 645, 646, 647, 650, 687, 703, 716, 720, 722, 723, 724, 732, 733, 734, 735, 738, 757, 767, 781], "off": [15, 253, 259, 267, 283, 290, 483, 757, 767, 786], "class": [16, 25, 73, 89, 90, 110, 265, 295, 317, 359, 462, 463, 473, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 538, 542, 781, 782, 795, 797, 799], "dict": [16, 60, 66, 73, 86, 87, 109, 283, 293, 295, 371, 539, 540, 657, 757, 758, 759, 760, 763, 764, 767, 769, 771, 783], "sequenc": [16, 22, 24, 27, 28, 37, 38, 39, 49, 50, 56, 60, 62, 74, 80, 88, 93, 94, 95, 96, 97, 102, 155, 170, 174, 191, 266, 273, 274, 275, 279, 280, 296, 301, 310, 317, 322, 385, 436, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 489, 490, 508, 534, 536, 539, 540, 541, 543, 547, 656, 748, 749, 752, 772, 776, 777, 782, 783, 784], "ani": [16, 17, 24, 28, 30, 31, 33, 60, 61, 70, 71, 86, 87, 89, 90, 96, 105, 117, 131, 160, 174, 191, 212, 214, 229, 236, 244, 264, 269, 289, 317, 322, 323, 369, 385, 419, 421, 436, 454, 462, 463, 476, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 535, 539, 540, 541, 543, 592, 603, 606, 627, 650, 685, 696, 699, 738, 747, 757, 767, 774, 781, 783, 784], "np": [16, 31, 38, 89, 172, 175, 244, 317, 382, 386, 387, 388, 421, 436, 454, 463, 541], "ndarrai": [16, 31, 89, 244, 317, 436, 454, 463, 541], "pa": [16, 85, 459, 538, 768], "pd": [16, 90, 248, 464, 465, 542, 758, 765], "pli": [16, 31, 38, 39, 49, 62, 244, 274, 275, 279, 454, 489, 518, 536, 560, 571, 572, 576, 595, 599, 605, 622, 631, 632, 660, 661, 665, 688, 692, 698, 719, 720, 755], "none": [16, 17, 18, 21, 24, 29, 30, 38, 39, 40, 45, 49, 50, 56, 59, 70, 72, 77, 79, 86, 88, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 108, 109, 113, 116, 117, 127, 130, 134, 139, 148, 149, 152, 153, 154, 155, 158, 159, 160, 165, 166, 169, 176, 177, 178, 179, 180, 182, 185, 191, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 229, 230, 231, 235, 248, 257, 264, 268, 269, 274, 275, 278, 279, 280, 283, 287, 298, 299, 300, 306, 307, 310, 313, 316, 317, 323, 330, 331, 341, 342, 353, 355, 360, 362, 363, 364, 367, 368, 369, 373, 374, 376, 377, 389, 390, 394, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 436, 440, 442, 443, 446, 447, 450, 458, 461, 465, 470, 471, 474, 476, 481, 486, 487, 491, 497, 506, 518, 519, 520, 534, 535, 539, 540, 541, 542, 543, 544, 596, 608, 618, 622, 628, 629, 631, 632, 633, 636, 637, 638, 639, 642, 643, 644, 646, 647, 648, 649, 650, 653, 654, 655, 657, 689, 701, 711, 716, 717, 719, 720, 721, 724, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 738, 747, 748, 756, 757, 758, 759, 761, 763, 765, 766, 767, 769, 770, 771, 773, 775, 776, 779, 780, 781, 782, 783, 784, 786, 787], "columnstyp": 16, "orient": [16, 107, 541, 543], "two": [16, 33, 56, 62, 92, 112, 147, 236, 237, 244, 287, 355, 474, 488, 539, 541, 543, 547, 548, 549, 559, 754, 765, 774, 776], "dimension": [16, 317, 539, 541, 543], "structur": [16, 28, 322, 526, 531, 532], "repres": [16, 105, 317, 436, 450, 470, 482, 506, 514, 518, 538, 539, 541, 542, 543, 747], "panda": [16, 90, 248, 464, 465, 542, 758, 765, 773], "variou": [16, 110, 317, 795], "form": [16, 96, 203, 317, 410], "must": [16, 38, 39, 50, 70, 155, 191, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 283, 317, 491, 539, 541, 543, 779], "contain": [16, 62, 174, 290, 317, 371, 404, 459, 539, 542, 630, 633, 634, 635, 636, 647, 648, 718, 721, 722, 723, 724, 735, 736], "mai": [16, 17, 26, 28, 50, 76, 77, 96, 109, 145, 155, 158, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 283, 297, 298, 312, 322, 352, 361, 367, 439, 440, 484, 489, 491, 536, 538, 572, 579, 617, 657, 661, 668, 689, 710, 757, 759, 768, 769], "other": [16, 24, 28, 34, 49, 50, 56, 70, 116, 134, 135, 136, 147, 174, 237, 248, 264, 279, 280, 287, 311, 317, 322, 342, 343, 344, 355, 385, 434, 465, 472, 518, 603, 696, 757, 758, 767, 779, 780, 795], "datatyp": [16, 17, 25, 33, 73, 105, 117, 131, 155, 191, 248, 265, 283, 295, 317, 323, 337, 353, 359, 376, 379, 391, 393, 465, 476, 482, 534, 650, 657, 738, 747, 748, 757, 758, 760, 764, 781, 782, 783, 784, 795], "pair": [16, 66, 293], "default": [16, 26, 37, 39, 40, 50, 56, 62, 72, 103, 104, 105, 106, 107, 108, 109, 151, 166, 170, 188, 199, 200, 203, 208, 225, 230, 273, 275, 280, 287, 313, 317, 360, 361, 374, 407, 408, 410, 415, 432, 450, 470, 479, 538, 539, 541, 542, 543, 571, 618, 622, 634, 644, 650, 660, 711, 722, 732, 747, 757, 767, 774, 781, 782, 783, 784], "label": [16, 214, 215, 216, 217, 218, 219, 221, 222, 223, 290, 421, 422, 423, 424, 425, 426, 428, 429, 430, 491, 539, 541, 543], "result": [16, 28, 38, 77, 105, 107, 108, 152, 153, 154, 183, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 227, 229, 256, 283, 290, 298, 313, 322, 362, 363, 364, 394, 419, 421, 422, 423, 424, 425, 426, 428, 429, 430, 437, 440, 463, 489, 490, 539, 541, 543, 547, 645, 646, 733, 734, 748, 765, 767, 769, 771, 777, 784], "specifi": [16, 26, 30, 105, 152, 153, 154, 160, 211, 269, 317, 361, 362, 363, 364, 369, 518, 528, 539, 541, 543, 638, 642, 726, 730, 783], "overrid": [16, 539, 781, 782, 784], "alreadi": [16, 145, 352, 539, 606, 699], "present": [16, 174, 471, 539, 783], "match": [16, 30, 50, 70, 269, 280, 484, 530, 539, 541, 543, 629, 630, 633, 635, 636, 639, 640, 641, 643, 648, 649, 650, 717, 718, 721, 723, 724, 727, 728, 729, 731, 736, 737, 738, 779, 780], "dimens": [16, 212, 419, 539, 541, 543], "col": [16, 17, 31, 37, 38, 39, 47, 61, 70, 80, 95, 101, 102, 105, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 177, 181, 182, 183, 184, 188, 189, 190, 193, 194, 195, 196, 198, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 270, 273, 275, 277, 289, 307, 309, 310, 419, 435, 436, 477, 478, 485, 486, 490, 520, 535, 537, 541, 543, 545, 547, 571, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 682, 699, 722, 724, 738, 755, 767, 776, 777, 782, 783, 788, 793], "whether": [16, 38, 39, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 478, 518, 541, 543, 784], "interpret": [16, 541, 543, 757, 767], "infer": [16, 17, 105, 212, 317, 419, 541, 543, 650, 757, 758, 767, 770, 781], "thi": [16, 17, 24, 26, 28, 33, 37, 38, 39, 40, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 72, 74, 77, 79, 81, 82, 85, 87, 89, 90, 93, 94, 96, 97, 98, 99, 103, 105, 107, 109, 114, 116, 117, 126, 128, 139, 145, 155, 157, 158, 163, 168, 169, 170, 174, 185, 190, 191, 199, 200, 202, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 229, 230, 235, 236, 237, 249, 250, 251, 252, 253, 256, 259, 264, 267, 273, 274, 275, 277, 280, 283, 287, 290, 296, 298, 299, 300, 306, 311, 312, 313, 316, 317, 322, 323, 332, 335, 352, 357, 359, 361, 366, 367, 373, 378, 379, 384, 385, 391, 393, 395, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 428, 429, 430, 432, 435, 436, 437, 438, 440, 441, 442, 447, 448, 450, 452, 459, 461, 462, 463, 464, 466, 467, 470, 471, 473, 474, 477, 478, 483, 484, 485, 487, 489, 490, 491, 516, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 549, 571, 572, 573, 579, 589, 599, 606, 610, 624, 625, 638, 642, 653, 654, 657, 660, 661, 662, 668, 682, 689, 692, 699, 703, 726, 730, 741, 742, 745, 757, 758, 759, 763, 767, 768, 769, 770, 771, 772, 777, 779, 780, 781, 782, 783, 784, 786, 790, 795, 797], "doe": [16, 28, 251, 267, 273, 283, 322, 373, 441, 471, 530, 535, 541, 543, 599, 655, 692, 757, 758, 767, 779, 780], "yield": [16, 26, 28, 93, 322, 361, 541, 543, 757, 767], "conclus": [16, 541, 543], "note": [16, 17, 29, 37, 38, 39, 49, 50, 54, 70, 87, 89, 93, 94, 97, 143, 144, 148, 149, 215, 216, 217, 218, 219, 221, 222, 223, 234, 242, 259, 267, 268, 274, 275, 276, 282, 299, 306, 350, 351, 435, 436, 441, 446, 452, 463, 518, 541, 543, 559, 589, 606, 650, 682, 699, 757, 765, 782, 783, 784, 790], "some": [16, 24, 264, 385, 757, 767], "method": [16, 24, 45, 64, 104, 106, 109, 110, 114, 129, 132, 150, 207, 208, 215, 216, 217, 218, 219, 221, 222, 223, 240, 251, 264, 278, 291, 317, 323, 336, 338, 358, 377, 414, 415, 426, 451, 465, 473, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 560, 755, 757, 758, 781, 793, 795, 798], "intern": [16, 29, 36, 37, 43, 74, 86, 101, 102, 147, 159, 170, 202, 204, 211, 226, 229, 235, 237, 268, 270, 277, 290, 296, 298, 301, 309, 310, 368, 370, 440, 476, 477, 478, 479, 481, 483, 485, 486, 488, 490, 517, 519, 537, 749, 752, 754, 758, 766, 772, 774, 776, 777, 779, 781, 783, 788], "convert": [16, 71, 86, 87, 88, 89, 90, 92, 462, 463, 464, 471, 542, 544, 622, 745, 758, 765], "befor": [16, 28, 50, 95, 143, 144, 145, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 242, 277, 280, 307, 322, 350, 351, 352, 410, 421, 422, 423, 424, 425, 426, 428, 429, 430, 452, 653, 741, 767], "collect": [16, 51, 85, 117, 202, 264, 266, 267, 270, 273, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 308, 309, 310, 312, 477, 483, 485, 657, 766, 768, 776], "back": [16, 28, 322], "can": [16, 17, 25, 33, 37, 38, 62, 80, 93, 96, 110, 117, 145, 155, 169, 182, 197, 210, 215, 216, 217, 218, 219, 221, 222, 223, 227, 234, 253, 259, 274, 301, 312, 317, 323, 352, 403, 417, 435, 436, 437, 446, 474, 477, 482, 490, 518, 526, 534, 547, 549, 589, 606, 622, 636, 657, 682, 699, 724, 749, 757, 758, 759, 767, 768, 769, 777, 782, 783, 784, 793], "lead": [16, 227, 244, 253, 283, 437, 639, 643, 649, 653, 657, 727, 737, 741, 749, 752, 774], "unexpect": [16, 529], "behavior": [16, 117, 476, 749, 752], "subclass": 16, "For": [16, 28, 39, 49, 50, 80, 131, 210, 234, 275, 280, 322, 417, 446, 463, 489, 536, 537, 549, 625, 758], "mydatafram": 16, "pass": [16, 109, 168, 277, 283, 299, 323, 518, 539, 576, 665, 758, 782, 783, 784], "isinst": [16, 783, 784], "lazi": [16, 50, 117, 202, 257, 260, 264, 265, 266, 270, 273, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 477, 484, 547, 657, 767, 783, 795, 797], "fals": [16, 18, 19, 21, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 72, 78, 80, 86, 90, 93, 94, 97, 99, 102, 107, 109, 114, 115, 126, 128, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 234, 236, 237, 249, 250, 253, 257, 259, 261, 267, 273, 274, 279, 280, 283, 290, 299, 301, 310, 317, 322, 332, 335, 337, 340, 341, 348, 349, 350, 351, 352, 360, 362, 363, 364, 370, 378, 380, 382, 385, 386, 387, 388, 389, 390, 392, 394, 404, 411, 412, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 437, 441, 446, 448, 462, 463, 466, 467, 469, 471, 472, 477, 478, 479, 483, 489, 550, 551, 553, 554, 555, 557, 561, 592, 604, 606, 619, 629, 631, 633, 640, 641, 645, 646, 648, 650, 685, 699, 712, 717, 719, 721, 728, 729, 733, 734, 736, 738, 747, 757, 758, 759, 763, 766, 767, 770, 771, 774, 776, 779, 780, 781, 782, 783, 784, 788], "construct": [16, 272, 292, 317, 538, 539, 540, 541, 542, 543], "dictionari": [16, 60, 86, 87, 353, 371, 539, 540, 543, 757, 760, 764, 767], "b": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 113, 116, 117, 127, 130, 131, 132, 139, 147, 148, 149, 155, 157, 159, 160, 161, 165, 166, 169, 172, 175, 176, 177, 178, 179, 180, 182, 185, 187, 192, 197, 201, 205, 213, 235, 240, 241, 251, 253, 255, 257, 260, 264, 265, 266, 270, 273, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 322, 353, 355, 360, 361, 369, 385, 393, 418, 434, 468, 473, 474, 481, 484, 486, 488, 490, 521, 534, 537, 538, 539, 540, 541, 542, 543, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 571, 603, 606, 610, 612, 640, 654, 655, 657, 658, 659, 660, 699, 728, 754, 758, 774, 776, 777], "notic": [16, 317], "dtype": [16, 38, 39, 50, 90, 117, 118, 119, 120, 121, 122, 123, 126, 128, 131, 134, 135, 136, 137, 138, 143, 144, 155, 157, 163, 190, 191, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 232, 233, 242, 244, 246, 247, 248, 252, 253, 274, 275, 280, 317, 337, 341, 342, 343, 344, 350, 351, 361, 366, 376, 381, 420, 434, 452, 463, 464, 465, 476, 485, 487, 534, 575, 578, 581, 583, 585, 588, 593, 599, 601, 602, 603, 610, 628, 644, 664, 667, 673, 675, 678, 681, 686, 692, 694, 695, 696, 703, 716, 732, 738, 747, 748, 757, 767, 776, 781, 782, 783, 784], "automat": [16, 317, 757, 765, 767, 783, 784], "int64": [16, 25, 33, 38, 39, 61, 73, 85, 143, 144, 155, 210, 242, 248, 265, 274, 275, 289, 295, 317, 350, 351, 359, 417, 434, 452, 463, 464, 465, 534, 575, 578, 581, 583, 585, 588, 593, 664, 667, 673, 675, 678, 681, 686], "In": [16, 17, 26, 28, 38, 39, 117, 236, 237, 274, 275, 317, 322, 361, 416, 624, 771, 783, 784], "order": [16, 37, 38, 39, 60, 62, 72, 94, 97, 126, 128, 132, 208, 225, 226, 227, 236, 237, 250, 251, 273, 274, 275, 301, 306, 332, 335, 415, 420, 432, 433, 437, 467, 468, 479, 571, 655, 660, 744, 779], "your": [16, 259, 276, 282, 283, 757, 779, 780], "initi": [16, 489, 536], "list": [16, 20, 25, 26, 27, 31, 36, 38, 43, 58, 60, 71, 80, 86, 87, 93, 94, 95, 96, 102, 110, 112, 129, 155, 157, 163, 182, 191, 202, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 244, 260, 263, 264, 265, 266, 270, 287, 306, 307, 310, 311, 317, 336, 340, 361, 366, 370, 376, 385, 419, 421, 422, 423, 424, 425, 426, 428, 429, 430, 454, 462, 483, 485, 490, 491, 497, 521, 544, 548, 559, 625, 626, 635, 645, 654, 655, 723, 733, 743, 744, 749, 752, 756, 757, 759, 763, 765, 767, 776, 777, 782, 783, 784, 795], "col1": [16, 96], "float32": [16, 33, 105, 317, 381], "col2": [16, 96], "df2": [16, 28, 34, 99, 473, 484, 779], "f32": [16, 208, 317, 415, 521, 606, 699], "Or": [16, 38, 39, 50, 97, 202, 274, 275, 280, 788], "compat": [16, 109], "valid": [16, 26, 145, 236, 352, 361, 373, 629, 630, 634, 635, 636, 717, 718, 722, 723, 724, 728, 729, 759, 763, 784], "df3": 16, "numpi": [16, 89, 199, 200, 317, 382, 386, 387, 388, 407, 408, 421, 463, 471, 541, 773], "import": [16, 21, 38, 50, 90, 96, 97, 105, 283, 346, 379, 382, 386, 387, 388, 421, 444, 456, 497, 518, 520, 538, 541, 542, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 747, 765, 767, 768, 781, 782, 783, 784], "arrai": [16, 26, 85, 89, 134, 135, 136, 140, 141, 142, 143, 144, 189, 215, 216, 218, 221, 222, 223, 227, 317, 342, 343, 344, 348, 349, 350, 351, 361, 398, 422, 423, 425, 428, 429, 430, 437, 441, 459, 463, 471, 485, 505, 521, 538, 541, 603, 612, 613, 614, 615, 616, 619, 620, 630, 632, 634, 635, 636, 696, 705, 706, 707, 708, 709, 712, 713, 718, 720, 722, 723, 724, 757], "df4": 16, "6": [16, 17, 20, 22, 23, 24, 25, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 102, 103, 105, 117, 130, 131, 143, 144, 147, 151, 157, 159, 160, 165, 167, 169, 187, 202, 206, 208, 209, 212, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 243, 245, 260, 264, 265, 266, 270, 273, 275, 278, 279, 287, 295, 296, 297, 298, 300, 305, 307, 309, 310, 312, 322, 340, 346, 350, 351, 353, 355, 366, 404, 415, 424, 426, 427, 428, 430, 434, 452, 474, 490, 521, 538, 540, 541, 542, 543, 547, 552, 559, 561, 562, 574, 589, 590, 591, 592, 598, 630, 658, 659, 682, 691, 718, 776, 777], "c": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 36, 37, 38, 41, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 93, 94, 96, 98, 99, 102, 105, 109, 117, 251, 253, 257, 260, 264, 265, 266, 270, 273, 279, 287, 295, 296, 300, 310, 353, 393, 468, 473, 474, 481, 486, 490, 537, 542, 550, 551, 552, 553, 554, 555, 557, 559, 561, 562, 603, 610, 612, 646, 650, 657, 658, 659, 734, 738, 758, 767, 776, 777, 782], "attribut": [16, 110, 317, 497, 498, 505, 781, 795], "get": [16, 20, 25, 35, 36, 38, 39, 41, 42, 46, 48, 52, 58, 70, 73, 75, 79, 83, 88, 100, 112, 124, 125, 126, 127, 128, 140, 141, 142, 143, 144, 162, 167, 171, 173, 181, 184, 186, 193, 194, 195, 196, 199, 200, 207, 235, 239, 242, 243, 250, 254, 260, 265, 271, 274, 275, 276, 281, 282, 295, 300, 304, 317, 330, 331, 332, 333, 334, 335, 340, 348, 349, 350, 351, 359, 371, 375, 376, 380, 383, 392, 396, 399, 401, 402, 404, 406, 407, 408, 411, 412, 414, 447, 450, 453, 458, 459, 460, 467, 470, 471, 516, 535, 546, 552, 562, 564, 565, 566, 567, 568, 569, 570, 576, 607, 611, 612, 623, 624, 626, 637, 658, 659, 665, 700, 704, 705, 715, 725, 743, 749, 750, 751, 752, 760, 764, 775, 778, 785, 787], "height": [16, 24], "schema": [16, 17, 18, 19, 25, 257, 258, 265, 283, 345, 484, 531, 624, 657, 757, 760, 764, 767, 770, 783], "__init__": [16, 110, 317, 473, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 781], "f": [17, 21, 24, 52, 85, 93, 96, 117, 191, 192, 264, 283, 310, 476, 485, 489, 536, 549, 622, 650, 657, 738, 748], "callabl": [17, 33, 61, 117, 191, 192, 214, 283, 289, 323, 421, 476, 489, 536, 549, 622, 657, 748, 767], "tupl": [17, 70, 71, 75, 212, 290, 299, 419, 438, 765], "return_dtyp": [17, 117, 191, 323, 476, 748], "option": [17, 24, 40, 50, 56, 70, 72, 79, 86, 88, 93, 97, 102, 117, 130, 152, 153, 154, 165, 166, 183, 191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 230, 234, 235, 264, 279, 280, 287, 299, 300, 310, 323, 394, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 442, 446, 461, 462, 474, 476, 491, 519, 520, 539, 544, 596, 618, 639, 643, 644, 649, 650, 657, 727, 731, 732, 737, 747, 748, 757, 758, 759, 763, 765, 769, 770, 771, 773, 781, 782, 783, 784], "union": [17, 22, 24, 25, 27, 37, 53, 54, 56, 57, 60, 66, 73, 74, 80, 82, 93, 95, 97, 102, 117, 131, 155, 170, 174, 191, 235, 259, 264, 266, 267, 273, 283, 287, 290, 295, 296, 299, 301, 310, 385, 474, 475, 476, 479, 482, 483, 484, 485, 486, 490, 505, 516, 519, 520, 534, 539, 547, 596, 650, 656, 657, 738, 748, 749, 752, 772, 776, 777, 781, 782, 783, 784], "inference_s": 17, "256": [17, 410], "custom": [17, 117, 191, 214, 283, 323, 421, 476, 549, 622, 657, 748], "user": [17, 117, 227, 323, 437, 476, 549, 657], "defin": [17, 38, 39, 105, 117, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 323, 476, 497, 518, 549, 657, 747, 781, 782, 783], "udf": [17, 117, 323, 476, 549, 657], "over": [17, 28, 37, 93, 117, 145, 160, 169, 191, 192, 214, 215, 216, 217, 218, 219, 221, 222, 223, 322, 323, 352, 421, 422, 423, 425, 429, 476, 489, 536, 549, 559, 657, 748, 757, 767, 783], "The": [17, 38, 39, 40, 45, 50, 70, 95, 97, 109, 117, 130, 158, 163, 165, 166, 191, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 237, 257, 259, 267, 273, 274, 275, 276, 278, 280, 282, 283, 290, 307, 341, 367, 374, 377, 415, 421, 422, 423, 424, 425, 426, 428, 429, 430, 446, 479, 505, 508, 549, 559, 574, 586, 589, 590, 596, 597, 628, 631, 632, 638, 642, 653, 657, 663, 679, 682, 683, 689, 690, 716, 719, 720, 726, 730, 741, 757, 763, 765, 767, 793, 798], "receiv": 17, "each": [17, 50, 117, 163, 208, 280, 290, 340, 415, 476, 549, 550, 552, 562, 609, 621, 635, 646, 647, 657, 658, 659, 702, 714, 723, 734, 735, 770, 779, 780, 782], "implement": [17, 109, 117, 435, 436, 549, 657], "logic": [17, 117, 248, 272, 279, 292, 313, 465, 549, 657], "python": [17, 71, 117, 191, 323, 462, 476, 507, 518, 549, 657, 669, 670, 671, 676, 757, 773], "almost": [17, 117, 549, 657], "alwai": [17, 117, 283, 549, 624, 657, 757], "_significantly_": [17, 117, 549, 657], "slower": [17, 60, 97, 107, 117, 541, 543, 549, 657], "more": [17, 37, 51, 56, 70, 72, 94, 107, 109, 117, 134, 135, 136, 183, 191, 225, 234, 250, 273, 287, 306, 323, 342, 343, 344, 394, 432, 446, 467, 533, 549, 657, 763, 777, 783, 784], "memori": [17, 28, 78, 109, 117, 209, 322, 416, 441, 484, 538, 541, 542, 543, 549, 559, 657, 757, 759, 763, 767, 769, 770, 771], "intens": [17, 117, 549, 657], "than": [17, 37, 50, 70, 72, 96, 117, 225, 234, 236, 273, 280, 432, 446, 518, 533, 541, 543, 549, 638, 642, 647, 653, 657, 726, 730, 735, 741, 757, 774, 777, 783, 784], "same": [17, 94, 111, 116, 117, 157, 163, 214, 215, 216, 217, 218, 219, 221, 222, 223, 306, 318, 322, 323, 366, 421, 422, 423, 424, 425, 426, 428, 429, 430, 472, 473, 483, 549, 657, 779, 782], "nativ": [17, 117, 549, 657, 757, 759, 763], "becaus": [17, 26, 38, 51, 96, 117, 274, 323, 361, 549, 606, 657, 699], "engin": [17, 117, 549, 657, 765], "run": [17, 51, 117, 145, 259, 267, 290, 299, 352, 483, 497, 549, 606, 657, 699, 766, 772, 799], "rust": [17, 105, 109, 117, 529, 549, 657, 759, 763], "forc": [17, 50, 117, 279, 280, 549, 657], "materi": [17, 117, 290, 549, 657], "parallelis": [17, 117, 549, 657], "cannot": [17, 72, 117, 225, 299, 432, 549, 646, 657, 734, 757], "optimis": [17, 117, 435, 436, 549, 657], "wherev": [17, 117, 549, 657], "possibl": [17, 117, 190, 252, 317, 549, 624, 647, 657, 735, 757], "you": [17, 24, 28, 50, 89, 93, 109, 117, 134, 135, 136, 155, 161, 191, 210, 215, 216, 217, 218, 219, 221, 222, 223, 259, 264, 276, 280, 282, 299, 317, 322, 342, 343, 344, 417, 463, 471, 477, 539, 549, 559, 606, 657, 699, 757, 758, 767], "should": [17, 38, 50, 104, 105, 106, 107, 108, 109, 112, 117, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 234, 263, 279, 280, 283, 299, 313, 323, 352, 421, 422, 423, 424, 425, 426, 428, 429, 430, 433, 446, 549, 571, 599, 606, 643, 649, 657, 660, 692, 699, 727, 731, 737, 747, 781, 782, 784], "strongli": [17, 117, 549, 657], "prefer": [17, 28, 117, 214, 322, 421, 549, 657], "achiev": [17, 117, 549, 657], "best": [17, 117, 549, 657], "perform": [17, 38, 39, 50, 65, 109, 117, 274, 275, 280, 312, 526, 549, 657, 757, 759, 763, 767, 769, 770, 771], "lambda": [17, 24, 33, 117, 152, 153, 154, 191, 192, 214, 264, 283, 323, 362, 363, 364, 490, 549, 622, 657, 767, 777], "oper": [17, 28, 33, 37, 44, 51, 60, 65, 85, 89, 90, 93, 96, 112, 140, 141, 142, 143, 144, 145, 208, 210, 267, 273, 276, 279, 282, 322, 348, 349, 350, 351, 352, 415, 417, 459, 462, 463, 471, 473, 474, 475, 484, 521, 525, 526, 538, 539, 540, 541, 542, 543, 547, 559, 627], "given": [17, 26, 70, 76, 77, 151, 158, 188, 208, 211, 212, 215, 216, 218, 221, 222, 223, 228, 229, 249, 297, 298, 314, 316, 323, 360, 361, 367, 397, 415, 419, 422, 423, 425, 428, 429, 430, 439, 440, 466, 472, 474, 491, 595, 604, 617, 635, 650, 657, 688, 697, 710, 723, 757, 767, 781, 782, 783, 784], "tri": 17, "onli": [17, 24, 37, 50, 54, 80, 82, 112, 133, 134, 135, 136, 164, 210, 251, 259, 264, 276, 280, 282, 301, 339, 342, 343, 344, 372, 417, 459, 473, 484, 589, 682, 757, 758, 759, 763, 766, 767, 769, 770, 771, 776, 783, 784], "case": [17, 28, 38, 39, 191, 274, 275, 317, 322, 624, 625, 771, 788], "return": [17, 18, 22, 24, 25, 26, 27, 29, 30, 33, 41, 43, 49, 51, 52, 58, 60, 61, 62, 70, 72, 83, 84, 90, 93, 94, 101, 105, 107, 108, 114, 115, 118, 119, 120, 121, 122, 123, 126, 128, 137, 138, 157, 163, 167, 170, 172, 173, 174, 175, 176, 178, 179, 180, 186, 190, 197, 211, 212, 225, 232, 233, 243, 244, 245, 246, 247, 249, 251, 252, 253, 259, 265, 267, 276, 282, 283, 289, 290, 299, 305, 306, 313, 319, 320, 321, 323, 330, 331, 333, 334, 353, 361, 366, 371, 373, 375, 376, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 396, 403, 419, 420, 432, 434, 436, 453, 455, 466, 468, 472, 476, 477, 478, 482, 483, 491, 517, 518, 519, 520, 527, 530, 533, 538, 539, 540, 541, 542, 543, 546, 547, 549, 552, 556, 562, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 604, 608, 609, 610, 621, 625, 628, 630, 632, 634, 635, 636, 638, 642, 644, 645, 646, 647, 653, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 701, 702, 703, 714, 716, 717, 718, 720, 722, 723, 724, 725, 726, 730, 732, 733, 734, 735, 738, 741, 747, 748, 756, 757, 758, 759, 760, 763, 764, 767, 772, 778, 788], "first": [17, 41, 50, 52, 58, 62, 93, 94, 97, 126, 127, 128, 145, 167, 173, 186, 259, 276, 280, 282, 306, 317, 332, 335, 352, 353, 375, 383, 396, 479, 481, 546, 552, 559, 589, 606, 608, 609, 634, 636, 640, 641, 658, 682, 699, 701, 702, 722, 724, 728, 729, 757, 758, 765, 767, 770], "determin": [17, 33, 38, 39, 93, 97, 211, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 446, 479, 484, 514, 540, 543, 571, 622, 624, 660, 757, 758, 763, 771], "frame": [17, 43, 90, 96, 105, 277, 290, 483, 758, 779, 783], "level": [17, 33, 109, 161, 276, 282, 767, 769, 770, 771, 783], "track": 17, "black": [17, 473], "box": 17, "arbitrarili": 17, "drop": [17, 23, 24, 94, 146, 148, 149, 264, 306, 354, 356, 605, 698], "rearrang": 17, "transform": [17, 191, 314, 651, 652], "add": [17, 28, 38, 102, 103, 205, 241, 274, 279, 309, 310, 311, 312, 316, 322, 520, 788], "new": [17, 22, 24, 43, 44, 59, 66, 67, 84, 96, 101, 113, 157, 163, 169, 192, 245, 293, 305, 319, 323, 357, 366, 418, 455, 461, 472, 640, 641, 646, 647, 654, 655, 657, 728, 729, 734, 735, 742, 744], "want": [17, 28, 134, 135, 136, 161, 191, 215, 216, 217, 218, 219, 221, 222, 223, 259, 276, 282, 322, 342, 343, 344, 463], "ar": [17, 24, 26, 29, 33, 38, 39, 50, 51, 56, 70, 86, 90, 97, 109, 114, 143, 144, 148, 149, 151, 172, 174, 175, 176, 178, 179, 180, 183, 208, 211, 212, 214, 220, 234, 236, 237, 242, 264, 268, 274, 275, 276, 280, 282, 283, 287, 290, 311, 317, 320, 322, 350, 351, 360, 361, 371, 373, 382, 385, 386, 387, 388, 389, 390, 394, 415, 419, 421, 427, 446, 452, 463, 471, 473, 477, 479, 484, 486, 518, 527, 533, 538, 540, 542, 543, 596, 622, 689, 757, 758, 765, 767, 769, 770, 774, 779, 780, 782, 783, 786, 793, 795, 798], "preserv": 17, "syntax": [17, 80, 299, 317], "instead": [17, 38, 54, 60, 105, 107, 108, 126, 128, 268, 273, 274, 313, 332, 335, 435, 436, 477, 763, 777, 783], "foo": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 105, 113, 134, 163, 167, 168, 204, 212, 228, 229, 243, 245, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 310, 342, 474, 477, 482, 545, 547, 559, 589, 604, 607, 608, 611, 612, 628, 630, 631, 632, 635, 639, 643, 645, 647, 649, 651, 652, 657, 682, 703, 718, 719, 720, 723, 725, 735, 747, 755, 772, 788], "bar": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 95, 98, 99, 105, 113, 168, 234, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 446, 474, 547, 559, 612, 631, 632, 645, 647, 657, 703, 719, 720, 735, 772, 788], "8": [17, 20, 21, 22, 23, 24, 25, 27, 31, 32, 34, 41, 43, 49, 53, 54, 55, 57, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 98, 99, 102, 105, 116, 127, 139, 145, 148, 149, 169, 185, 202, 204, 205, 212, 213, 216, 217, 219, 221, 223, 235, 241, 245, 260, 264, 265, 266, 270, 279, 290, 295, 296, 305, 310, 352, 410, 421, 424, 426, 427, 428, 430, 490, 504, 513, 515, 521, 605, 606, 638, 642, 650, 668, 698, 699, 726, 730, 738, 773, 776, 777, 782, 783], "map": [17, 25, 66, 86, 192, 253, 265, 293, 476, 539, 540, 757, 759, 760, 763, 764, 767, 769], "t": [17, 96, 145, 151, 152, 153, 154, 352, 360, 362, 363, 364, 434, 471, 476, 484, 606, 650, 699, 738, 758, 767, 788], "column_0": [17, 93, 541, 543], "column_1": [17, 93, 541, 543], "15": [17, 38, 39, 44, 145, 275, 352], "24": [17, 26, 39, 143, 145, 275, 352, 578, 667], "It": [17, 117, 283, 317, 435, 436, 518, 549, 624, 657], "better": [17, 117, 253, 435, 436, 549, 657], "an": [17, 18, 19, 26, 29, 33, 38, 39, 50, 60, 62, 68, 70, 85, 89, 96, 110, 113, 114, 117, 129, 131, 132, 134, 135, 136, 140, 141, 142, 143, 144, 145, 150, 161, 191, 192, 206, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 244, 257, 258, 259, 267, 274, 275, 280, 283, 290, 299, 301, 311, 317, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 358, 361, 421, 422, 423, 424, 425, 426, 428, 429, 430, 435, 436, 451, 463, 471, 477, 482, 483, 521, 522, 525, 526, 529, 538, 549, 559, 599, 606, 608, 625, 631, 635, 643, 649, 650, 657, 692, 699, 701, 719, 723, 727, 731, 737, 738, 747, 757, 758, 765, 767, 769, 772, 782, 783, 784, 795], "select": [17, 50, 54, 70, 79, 91, 95, 97, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 177, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 250, 251, 252, 253, 254, 260, 277, 280, 300, 307, 435, 436, 447, 454, 474, 476, 477, 478, 482, 485, 490, 520, 534, 537, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 645, 646, 647, 649, 651, 652, 654, 655, 699, 722, 724, 756, 757, 759, 763, 765, 767, 768, 776, 777, 795], "scalar": [17, 226, 433], "9": [17, 33, 39, 41, 45, 83, 88, 96, 99, 101, 102, 105, 116, 127, 139, 144, 148, 149, 169, 174, 185, 202, 212, 214, 216, 222, 231, 235, 245, 275, 278, 309, 310, 366, 385, 421, 429, 431, 443, 481, 485, 547, 561, 574, 590, 597, 598, 616, 619, 663, 672, 674, 680, 685, 690, 776], "14": [17, 94, 169, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 773], "follow": [17, 38, 39, 50, 97, 117, 163, 208, 215, 216, 217, 218, 219, 221, 222, 223, 273, 274, 275, 280, 415, 435, 436, 476, 589, 596, 682, 689, 757, 765, 767, 793, 798, 800], "creat": [18, 19, 38, 39, 59, 62, 97, 110, 129, 132, 150, 209, 240, 253, 257, 258, 261, 262, 274, 275, 317, 336, 338, 341, 345, 357, 358, 416, 451, 463, 477, 485, 491, 517, 518, 519, 520, 538, 541, 543, 596, 644, 689, 732, 782, 783, 784], "empti": [18, 19, 47, 56, 105, 257, 258, 287, 317, 341, 345, 381, 526, 758, 772], "copi": [18, 19, 85, 257, 258, 319, 341, 345, 357, 459, 463, 538, 653, 741], "current": [18, 19, 102, 203, 257, 258, 310, 341, 345, 410], "ident": [18, 19, 257, 258, 341, 345], "clone": [18, 89, 90, 257, 341, 462, 463, 471, 539, 540, 541, 542, 543], "cheap": [18, 19, 257, 258, 322, 341, 345], "deepcopi": [18, 19, 257, 258, 341, 345], "13": [18, 19, 29, 30, 36, 39, 44, 58, 94, 102, 214, 216, 257, 275, 310, 323, 485, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 690], "true": [18, 19, 21, 24, 30, 33, 34, 36, 38, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 80, 86, 93, 94, 95, 96, 97, 102, 105, 112, 114, 115, 116, 117, 131, 140, 141, 142, 143, 144, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 210, 220, 225, 234, 236, 237, 244, 249, 250, 253, 257, 259, 261, 264, 267, 269, 273, 274, 279, 280, 283, 290, 299, 306, 307, 310, 317, 320, 321, 322, 323, 333, 337, 340, 341, 360, 362, 363, 364, 370, 373, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 404, 411, 412, 417, 427, 434, 446, 448, 463, 466, 471, 472, 477, 478, 483, 484, 538, 542, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 592, 596, 604, 629, 631, 633, 636, 645, 646, 648, 650, 654, 655, 657, 685, 689, 717, 719, 721, 724, 733, 734, 736, 738, 757, 758, 759, 763, 766, 767, 768, 769, 770, 771, 774, 776, 779, 780, 781, 782, 783, 784, 788], "bool": [18, 19, 30, 31, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 60, 62, 72, 78, 80, 86, 90, 93, 94, 95, 97, 99, 102, 105, 107, 109, 114, 115, 116, 126, 128, 131, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 158, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 234, 236, 237, 249, 250, 253, 257, 259, 261, 267, 269, 270, 273, 274, 279, 280, 283, 290, 299, 301, 306, 307, 310, 313, 317, 320, 321, 322, 323, 332, 335, 337, 341, 348, 349, 350, 351, 352, 360, 362, 363, 364, 367, 368, 370, 371, 373, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 436, 437, 441, 446, 448, 462, 463, 466, 467, 469, 471, 477, 478, 479, 481, 483, 484, 489, 538, 542, 551, 553, 555, 592, 604, 606, 619, 629, 631, 633, 640, 641, 645, 646, 648, 650, 654, 655, 685, 697, 699, 712, 717, 719, 721, 728, 729, 733, 734, 736, 738, 747, 757, 759, 761, 763, 766, 767, 768, 769, 770, 771, 774, 776, 779, 780, 781, 782, 783, 784, 786, 788], "clear": [19, 258, 345], "properti": [20, 25, 42, 73, 75, 100, 129, 132, 150, 240, 260, 265, 295, 336, 338, 358, 359, 371, 376, 406, 438, 451, 458, 743, 795], "7": [20, 21, 22, 23, 25, 27, 31, 32, 34, 38, 39, 41, 43, 45, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 97, 98, 99, 105, 144, 156, 167, 169, 202, 212, 216, 222, 243, 245, 260, 265, 266, 270, 275, 278, 279, 291, 295, 296, 305, 329, 429, 518, 574, 590, 598, 600, 663, 668, 691, 776], "ham": [20, 22, 23, 24, 25, 31, 32, 34, 40, 41, 43, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 98, 99, 105, 260, 264, 265, 270, 279, 295, 296, 482], "appl": [20, 43, 49, 66, 68, 86, 205, 213, 241, 279, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 633, 648, 721, 736], "banana": [20, 86, 205, 213, 241, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561], "orang": [20, 473, 550, 551, 553, 554, 555, 557, 560, 561], "summari": [21, 353], "statist": [21, 109, 153, 154, 183, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 353, 363, 364, 394, 427, 446, 757], "datetim": [21, 38, 39, 50, 97, 105, 110, 150, 170, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 317, 358, 379, 399, 402, 407, 408, 436, 458, 465, 481, 518, 520, 604, 650, 697, 738, 747, 752], "date": [21, 38, 39, 50, 90, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 379, 399, 402, 407, 408, 436, 465, 481, 497, 518, 572, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 650, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 738, 752, 757, 767, 768, 795], "d": [21, 40, 41, 44, 49, 52, 83, 85, 96, 99, 102, 105, 163, 279, 310, 473, 481, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 576, 630, 635, 646, 650, 665, 687, 718, 723, 734, 738, 768], "e": [21, 41, 52, 83, 85, 96, 102, 105, 151, 155, 163, 188, 227, 234, 310, 360, 434, 437, 446, 463, 473, 534, 757, 758, 759, 763, 769, 771], "usd": 21, "eur": [21, 781], "2020": [21, 39, 275, 575, 578, 581, 583, 585, 588, 593, 662, 664, 667, 673, 675, 678, 681, 686], "2021": [21, 38, 97, 379, 650, 668, 738, 747], "2022": [21, 518, 520, 650, 668, 738, 773], "count": [21, 38, 39, 50, 59, 62, 93, 97, 103, 140, 185, 198, 201, 215, 216, 217, 218, 219, 221, 222, 223, 251, 253, 274, 275, 280, 312, 353, 405, 409, 468, 469, 549, 558, 589, 630, 682, 718, 753, 757, 759, 763, 767, 769, 770, 771], "null_count": [21, 24, 145, 352, 353], "mean": [21, 30, 62, 88, 109, 157, 160, 163, 216, 234, 269, 353, 366, 369, 373, 423, 446, 480, 544, 634, 722, 757, 767], "266667": 21, "null": [21, 24, 30, 33, 34, 45, 49, 54, 55, 59, 64, 76, 77, 80, 81, 82, 86, 95, 98, 105, 113, 116, 126, 128, 130, 134, 139, 146, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 176, 177, 178, 179, 180, 182, 185, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 231, 236, 248, 255, 264, 269, 278, 279, 297, 298, 301, 307, 323, 332, 335, 342, 354, 357, 362, 363, 364, 367, 369, 373, 389, 390, 409, 410, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 439, 440, 443, 463, 465, 471, 474, 481, 484, 485, 486, 534, 555, 575, 578, 581, 583, 585, 588, 593, 605, 607, 608, 611, 617, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 644, 646, 647, 648, 653, 664, 667, 673, 675, 678, 681, 686, 698, 710, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 732, 734, 735, 736, 747, 757, 767, 776], "std": [21, 214, 353, 428], "101514": 21, "707107": [21, 153, 363], "min": [21, 30, 38, 39, 62, 109, 134, 136, 142, 160, 208, 218, 269, 275, 342, 344, 349, 353, 369, 415, 425, 772, 783, 784], "01": [21, 38, 39, 97, 275, 518, 520, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 650, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 738], "max": [21, 30, 38, 39, 62, 109, 134, 135, 141, 160, 202, 208, 215, 227, 269, 275, 342, 343, 348, 353, 369, 415, 422, 437, 647, 656, 735, 783, 784], "median": [21, 62, 217, 424], "remov": [22, 155, 263, 534, 639, 643, 649, 727, 731, 737], "": [22, 24, 26, 37, 38, 44, 49, 50, 67, 68, 84, 105, 155, 158, 183, 197, 199, 200, 202, 203, 210, 214, 237, 264, 273, 274, 280, 305, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 355, 359, 361, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 442, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 490, 491, 520, 534, 537, 547, 576, 596, 605, 609, 610, 617, 618, 621, 625, 637, 638, 642, 644, 645, 647, 650, 653, 655, 656, 662, 665, 689, 698, 702, 703, 705, 710, 711, 714, 717, 718, 719, 720, 721, 723, 725, 726, 728, 730, 732, 735, 736, 738, 741, 744, 749, 752, 754, 757, 777, 784], "place": [23, 43, 44, 67, 76, 77, 80, 99, 105, 126, 128, 228, 229, 297, 298, 301, 332, 335, 416, 418, 439, 440, 448, 610, 617, 703, 710], "subset": [24, 88, 94, 264, 306, 544], "where": [24, 28, 56, 101, 151, 226, 234, 287, 322, 333, 360, 433, 446, 450, 470, 472, 478, 598, 691, 765, 774, 788], "which": [24, 28, 80, 94, 104, 105, 106, 107, 108, 109, 114, 172, 175, 176, 178, 179, 180, 264, 306, 313, 322, 382, 386, 387, 388, 389, 390, 435, 625, 757, 758, 765, 767], "appli": [24, 33, 61, 105, 153, 154, 191, 202, 214, 215, 216, 218, 222, 264, 276, 282, 283, 289, 363, 364, 421, 422, 423, 425, 429, 474, 478, 484, 489, 536, 547, 574, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 597, 598, 600, 663, 666, 668, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 693, 748, 767, 781, 783, 784, 795], "wise": [24, 33, 118, 119, 120, 121, 122, 123, 137, 138, 156, 189, 231, 232, 233, 246, 247, 264, 324, 325, 326, 327, 328, 329, 346, 347, 365, 398, 443, 444, 445, 456, 457, 489, 536], "singl": [24, 28, 35, 80, 161, 191, 209, 212, 255, 264, 301, 317, 322, 416, 419, 459, 482, 484, 547, 589, 628, 643, 649, 656, 682, 716, 727, 731, 737, 748, 757, 765, 766, 767, 782], "snippet": [24, 264], "show": [24, 51, 59, 264, 290, 299], "how": [24, 49, 96, 146, 169, 211, 264, 279, 317, 354, 473, 484, 540, 543, 571, 605, 631, 660, 698, 719, 765], "could": [24, 38, 131, 264, 274, 337, 489, 514, 523, 536], "base": [24, 31, 38, 39, 151, 188, 189, 264, 270, 274, 275, 360, 397, 398, 472, 495, 559, 749, 752, 795], "condit": [24, 31, 70, 264, 270, 478, 633, 648], "filter": [24, 47, 255, 264, 267, 277, 435, 477, 549, 633, 648, 767, 768], "fold": [24, 264, 481, 489, 625, 777], "acc": [24, 264, 489, 536], "is_nul": [24, 264], "expr": [24, 27, 29, 31, 37, 38, 39, 49, 62, 70, 74, 80, 101, 102, 264, 266, 268, 270, 273, 274, 275, 279, 296, 298, 301, 309, 310, 352, 368, 440, 454, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 517, 519, 520, 521, 534, 535, 536, 537, 545, 546, 547, 656, 699, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 766, 772, 774, 775, 776, 777, 778, 787, 788, 793], "also": [25, 37, 38, 39, 80, 155, 169, 208, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 311, 415, 489, 518, 536, 573, 662, 783, 784, 793], "found": [25, 105, 528, 636, 650, 655, 724], "header": [25, 62, 93, 105, 109, 757, 758, 767], "colnam": [25, 192, 265, 783], "float64": [25, 26, 33, 73, 105, 118, 119, 120, 121, 122, 123, 131, 137, 138, 155, 232, 233, 246, 247, 265, 295, 481, 534, 592, 685, 783], "unit": [26, 190, 252, 290, 317, 361, 458, 497, 498, 518, 572, 576, 595, 599, 625, 661, 665, 688, 692, 783, 784], "sizeunit": [26, 361], "float": [26, 29, 50, 64, 72, 77, 133, 134, 135, 136, 148, 149, 151, 152, 153, 154, 158, 159, 164, 169, 176, 178, 179, 180, 188, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 268, 280, 291, 298, 299, 337, 339, 342, 343, 344, 355, 360, 361, 362, 363, 364, 367, 368, 372, 384, 394, 397, 399, 400, 401, 402, 407, 408, 413, 414, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 446, 450, 452, 470, 480, 481, 490, 491, 499, 500, 560, 592, 604, 685, 697, 749, 750, 751, 752, 755, 766, 768, 775, 777, 779, 780, 781, 783, 784, 787], "estim": [26, 153, 154, 183, 361, 363, 364, 394, 757], "total": [26, 361], "heap": [26, 361], "alloc": [26, 65, 361, 757], "size": [26, 38, 96, 109, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 361, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 477, 757, 782, 783, 784, 785], "byte": [26, 105, 361, 757, 758, 759, 760, 763, 764, 767], "sum": [26, 33, 37, 39, 62, 117, 143, 144, 151, 161, 202, 215, 216, 218, 221, 222, 223, 255, 273, 275, 350, 351, 360, 361, 422, 423, 425, 428, 429, 430, 474, 489, 490, 536, 547, 657, 752], "its": [26, 95, 307, 361], "buffer": [26, 361, 757], "includ": [26, 38, 93, 96, 105, 170, 361, 471, 489, 592, 645, 646, 685, 733, 734, 783], "nest": [26, 361, 473, 505, 795], "multipl": [26, 28, 31, 38, 43, 60, 62, 80, 102, 155, 197, 212, 215, 216, 217, 218, 219, 221, 222, 223, 237, 263, 270, 274, 301, 310, 311, 322, 361, 403, 419, 479, 483, 484, 489, 534, 536, 547, 625, 656, 748, 757, 767, 769, 771, 782, 784, 788], "share": [26, 361, 473], "bitmap": [26, 361], "therefor": [26, 361], "comput": [26, 50, 94, 109, 111, 118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 147, 151, 156, 183, 188, 189, 197, 203, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 232, 233, 234, 238, 246, 247, 277, 279, 280, 306, 311, 318, 324, 325, 326, 327, 328, 329, 346, 347, 348, 349, 350, 351, 355, 360, 361, 365, 394, 397, 398, 403, 410, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 443, 444, 445, 446, 449, 456, 457, 483, 484, 488, 521, 523, 560, 613, 614, 615, 706, 707, 708, 754, 774, 795, 797], "particular": [26, 361, 757, 759, 763, 769, 771], "structarrai": [26, 361], "upper": [26, 38, 170, 252, 274, 361, 477, 518, 757], "bound": [26, 38, 170, 190, 252, 274, 361, 477, 518, 608, 701, 757], "slice": [26, 214, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 283, 290, 299, 361, 421, 422, 423, 424, 425, 426, 428, 429, 430, 483, 609, 621, 702, 714], "remain": [26, 37, 117, 273, 283, 361, 646, 647, 734, 735, 757, 767], "constant": [26, 39, 275, 361], "unchang": [26, 117, 248, 283, 361, 465, 657], "howev": [26, 361], "smaller": [26, 109, 267, 361], "visibl": [26, 361], "capac": [26, 78, 361, 441], "ffi": [26, 361], "kb": [26, 361], "mb": [26, 361], "gb": [26, 361], "tb": [26, 361], "scale": [26, 361], "x": [26, 43, 46, 48, 49, 56, 117, 166, 191, 211, 234, 248, 279, 287, 300, 319, 323, 369, 393, 446, 465, 490, 603, 610, 646, 657, 734, 757, 767, 777, 782, 783], "revers": [26, 80, 126, 128, 140, 141, 142, 143, 144, 192, 205, 208, 227, 236, 237, 241, 249, 301, 332, 335, 348, 349, 350, 351, 415, 437, 448, 466, 479, 619, 712], "1_000_000": [26, 361], "y": [26, 46, 48, 49, 56, 211, 279, 287, 300, 319, 490, 603, 610, 650, 687, 738, 777, 782, 783], "v": [26, 109, 226, 433, 491], "1000": [26, 581, 653, 673, 758], "z": [26, 46, 48, 49, 56, 166, 211, 279, 287, 300, 369, 571, 603, 660, 782, 783], "uint32": [26, 126, 128, 211, 244, 248, 333, 337, 361, 434, 465, 516, 574, 577, 580, 582, 584, 586, 587, 590, 591, 592, 597, 598, 601, 602, 612, 630, 637, 663, 666, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 694, 695, 705, 718, 773], "25888898": 26, "689577102661133": 26, "long": [27, 56, 96, 266, 287], "largelist": 27, "letter": [27, 155, 240, 266, 534, 552, 562, 658, 659], "differ": [28, 38, 39, 93, 146, 199, 200, 251, 274, 275, 322, 354, 407, 408, 434, 535, 573, 574, 589, 590, 597, 605, 650, 662, 663, 682, 683, 690, 698, 738, 749, 752, 757], "vstack": [28, 484], "chunk": [28, 58, 109, 116, 209, 322, 340, 404, 416, 459, 757, 767, 769, 770, 771, 783, 784], "append": [28, 49, 50, 209, 279, 280, 783], "underli": [28, 85, 210, 224, 317, 322, 417, 431, 441, 458, 459, 463, 522, 529, 572, 573, 574, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 597, 598, 599, 600, 661, 662, 663, 666, 668, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 692, 693, 763, 783, 784], "locat": [28, 68, 91, 95, 307, 322, 436, 454], "thu": [28, 322, 767, 774], "caus": [28, 322, 529, 757, 767], "realloc": [28, 322, 767, 769, 770], "have": [28, 65, 145, 152, 153, 154, 208, 299, 312, 322, 352, 362, 363, 364, 373, 415, 559, 625, 662, 757, 758, 779, 783, 784, 786], "extra": [28, 60, 109, 322, 757, 758, 759, 763, 769, 771], "faster": [28, 96, 214, 251, 322, 323, 421], "queri": [28, 51, 259, 261, 262, 267, 276, 282, 290, 299, 312, 314, 322, 483, 636, 657, 724, 759, 765, 767, 769, 770, 771, 797, 799], "do": [28, 50, 85, 93, 96, 145, 259, 280, 283, 290, 299, 322, 352, 463, 471, 474, 483, 559, 606, 699, 767], "after": [28, 95, 208, 307, 322, 415, 653, 662, 741, 756, 757, 759, 763, 767, 769, 770, 771], "instanc": [28, 33, 131, 215, 216, 217, 218, 219, 221, 222, 223, 283, 312, 322, 337, 489, 536, 625, 757, 767, 783, 784], "dure": [28, 322, 757, 767], "onlin": [28, 322], "rerun": [28, 322], "mani": [28, 322, 540, 543, 765], "time": [28, 38, 39, 50, 97, 248, 249, 259, 274, 275, 280, 290, 317, 322, 458, 465, 466, 483, 485, 486, 497, 498, 517, 518, 519, 520, 572, 573, 576, 589, 595, 599, 603, 604, 650, 661, 662, 665, 682, 688, 692, 696, 738, 766, 767, 795], "read": [28, 191, 267, 272, 292, 322, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771], "file": [28, 104, 105, 106, 107, 108, 109, 267, 292, 313, 322, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771], "store": [28, 322], "them": [28, 38, 39, 50, 97, 199, 200, 274, 275, 280, 322, 407, 408, 485, 610, 703], "latter": [28, 322], "finish": [28, 322, 473, 523], "rechunk": [28, 322, 340, 404, 484, 538, 542, 757, 759, 767, 769, 770, 771], "vertic": [28, 96, 99, 484, 628, 716, 749], "df1": [28, 34, 99, 473, 484, 779], "20": [28, 43, 44, 61, 63, 67, 68, 124, 125, 126, 128, 146, 166, 169, 289, 596, 689, 747], "30": [28, 38, 43, 61, 67, 68, 86, 102, 124, 125, 126, 128, 146, 166, 289, 310, 491, 575, 591, 596, 600, 662, 664, 689], "40": [28, 61, 166, 289, 668], "50": [28, 134, 342, 540, 543], "60": [28, 592, 593, 650, 683, 685, 686, 738], "fill_valu": [29, 77, 96, 159, 229, 268, 298, 368, 440], "fill": [29, 30, 77, 96, 130, 158, 159, 160, 165, 169, 215, 216, 218, 221, 222, 223, 229, 268, 269, 298, 367, 368, 369, 422, 423, 425, 428, 429, 430, 440, 484, 537, 638, 642, 653, 726, 730, 741], "point": [29, 51, 72, 133, 148, 149, 159, 164, 224, 225, 268, 283, 339, 368, 372, 384, 431, 432, 499, 500, 592, 685, 783, 784], "nan": [29, 148, 149, 159, 169, 176, 178, 179, 180, 199, 200, 268, 317, 325, 329, 356, 368, 387, 388, 407, 408, 421, 542, 774, 779, 780, 783], "evalu": [29, 31, 50, 54, 102, 145, 168, 170, 174, 270, 277, 279, 280, 309, 310, 333, 352, 472, 475, 477, 478, 521, 776], "replac": [29, 30, 68, 93, 101, 268, 309, 435, 436, 631, 641, 719, 729, 757, 767], "Not": [29, 268], "miss": [29, 130, 165, 169, 268, 471, 484, 774], "To": [29, 148, 149, 160, 268, 777], "fill_nul": [29, 268, 650, 738], "strategi": [30, 49, 50, 58, 160, 269, 279, 280, 369, 622, 757, 781, 782, 783, 784], "fillnullstrategi": [30, 160, 269, 369], "limit": [30, 130, 134, 135, 136, 160, 165, 269, 276, 342, 343, 344, 369, 767], "matches_supertyp": [30, 269], "forward": [30, 50, 160, 165, 269, 280, 369], "backward": [30, 50, 109, 130, 160, 269, 280, 369], "zero": [30, 70, 85, 159, 160, 234, 269, 369, 446, 459, 463, 538, 653, 741, 756, 757, 759, 763], "one": [30, 31, 38, 39, 56, 62, 70, 88, 92, 112, 160, 214, 236, 237, 244, 263, 269, 270, 274, 275, 287, 311, 322, 369, 421, 474, 527, 547, 548, 559, 654, 742, 776, 777, 784], "consecut": [30, 130, 160, 165, 269, 369, 628, 716], "supertyp": [30, 116, 269], "fill_nan": 30, "predic": [31, 70, 161, 255, 259, 267, 270, 283, 290, 299, 312, 370, 435, 436, 483, 767, 769, 770, 771, 788], "boolean": [31, 33, 54, 102, 114, 115, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 255, 270, 310, 320, 321, 333, 370, 378, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 411, 412, 435, 472, 478, 604, 697, 717, 795], "find": [32, 226, 433, 479, 484], "index": [32, 38, 39, 44, 50, 62, 68, 70, 79, 91, 97, 103, 112, 124, 125, 126, 127, 128, 215, 216, 217, 218, 219, 221, 222, 223, 235, 244, 274, 275, 280, 300, 312, 330, 331, 332, 333, 334, 335, 436, 447, 454, 479, 516, 589, 601, 602, 608, 618, 634, 644, 682, 694, 695, 701, 711, 722, 732, 773], "horizont": [33, 43, 96, 484, 486, 489, 490, 521, 536, 749, 752, 777], "reduct": 33, "effect": [33, 109, 312], "aggreg": [33, 37, 38, 53, 54, 55, 57, 62, 63, 64, 81, 82, 96, 98, 112, 161, 182, 187, 191, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 253, 283, 284, 285, 286, 288, 291, 302, 303, 308, 421, 422, 423, 425, 428, 429, 430, 484, 489, 490, 536, 547, 548, 551, 553, 559, 656, 746, 749, 752, 757, 777, 795], "supercast": 33, "cast": [33, 38, 39, 54, 61, 90, 116, 132, 143, 144, 210, 242, 248, 274, 275, 289, 350, 351, 417, 452, 461, 465, 486, 538, 571, 572, 573, 636, 653, 660, 661, 662, 724, 786], "similar": [33, 50, 202, 280], "parent": 33, "rule": [33, 594, 687], "arithmet": 33, "int8": [33, 143, 144, 242, 350, 351, 420, 452], "take": [33, 84, 245, 305, 455, 472, 521, 535, 589, 682, 783], "A": [33, 38, 50, 60, 62, 86, 88, 96, 97, 105, 111, 172, 175, 182, 191, 192, 205, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 241, 274, 280, 301, 314, 317, 421, 422, 423, 425, 428, 429, 430, 482, 483, 485, 494, 518, 521, 537, 544, 559, 575, 578, 581, 583, 585, 588, 593, 622, 625, 629, 630, 634, 635, 636, 653, 664, 667, 673, 675, 678, 681, 686, 717, 718, 722, 723, 724, 728, 729, 738, 741, 757, 767, 793], "s1": [33, 472, 780], "s2": [33, 317, 322, 340, 355, 385, 404, 434, 472, 780], "minimum": [33, 57, 134, 136, 152, 153, 154, 196, 200, 208, 288, 342, 344, 362, 363, 364, 408, 412, 415, 676, 752, 782, 783, 784], "zip_with": 33, "concaten": [33, 340, 404, 484], "foo11": 33, "bar22": 33, "null_equ": [34, 434], "check": [34, 47, 114, 115, 170, 174, 283, 320, 321, 378, 379, 381, 384, 385, 391, 393, 434, 604, 629, 633, 648, 697, 717, 721, 736, 757, 767, 779, 780], "equal": [34, 38, 50, 214, 215, 216, 217, 218, 219, 221, 222, 223, 274, 280, 421, 422, 423, 424, 425, 426, 428, 429, 430, 434, 477, 638, 642, 653, 726, 730, 741, 757, 767, 779, 780, 786], "compar": [34, 94, 306, 434, 779, 780], "consid": [34, 56, 96, 102, 134, 135, 136, 145, 215, 216, 217, 218, 219, 221, 222, 223, 236, 276, 282, 287, 310, 317, 342, 343, 344, 352, 434, 435, 436, 491, 547, 559, 689, 768], "retriev": [35, 601, 602, 654, 694, 695, 742], "maintain_ord": [37, 60, 62, 94, 97, 112, 117, 244, 250, 273, 306, 467, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 657], "start": [37, 38, 51, 79, 97, 103, 155, 170, 235, 273, 300, 312, 447, 482, 489, 534, 536, 574, 576, 577, 584, 586, 590, 591, 592, 595, 596, 597, 598, 600, 618, 629, 633, 644, 648, 661, 662, 663, 665, 666, 672, 674, 677, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 711, 721, 732, 736, 756, 757, 759, 763, 767, 769, 770, 771, 788], "group": [37, 38, 39, 60, 62, 96, 97, 109, 112, 117, 202, 236, 237, 244, 273, 274, 275, 476, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 606, 634, 656, 657, 658, 659, 699, 722], "make": [37, 38, 39, 65, 97, 153, 154, 211, 273, 274, 275, 363, 364, 484, 508, 538, 542, 646, 653, 734, 741, 757, 759, 763, 765, 769, 771], "sure": [37, 65, 273, 477, 484, 538, 542, 757, 759, 765], "consist": [37, 273], "expens": [37, 93, 273, 322, 757, 763, 767, 770, 771], "work": [37, 39, 67, 94, 133, 134, 135, 136, 164, 250, 273, 275, 306, 339, 342, 343, 344, 372, 467, 606, 655, 699, 758], "we": [37, 50, 80, 182, 280, 283, 323, 606, 699, 747, 757, 758, 767, 788], "agg": [37, 38, 39, 112, 117, 161, 182, 236, 244, 255, 273, 275, 657], "sort": [37, 38, 39, 50, 60, 62, 97, 126, 128, 161, 182, 227, 237, 253, 255, 274, 275, 280, 332, 335, 437, 467, 469, 479, 547, 552, 562, 571, 658, 659, 660], "11": [37, 39, 109, 148, 149, 169, 203, 222, 235, 273, 275, 323, 421, 482, 589, 653, 682, 777], "loop": 37, "sub_df": 37, "index_column": [38, 39, 274, 275], "everi": [38, 84, 87, 97, 140, 141, 142, 143, 144, 145, 157, 163, 245, 267, 274, 305, 348, 349, 350, 351, 352, 366, 455, 489, 596, 601, 602, 605, 608, 609, 618, 621, 689, 694, 695, 698, 701, 702, 711, 714, 757, 767], "period": [38, 39, 76, 77, 97, 152, 153, 154, 203, 228, 229, 274, 275, 297, 298, 362, 363, 364, 410, 439, 440, 518, 596, 617, 689, 710], "offset": [38, 39, 79, 97, 103, 235, 274, 275, 300, 312, 447, 589, 596, 618, 644, 682, 689, 711, 732, 757, 759, 763, 767, 769, 770, 771], "truncat": [38, 274, 290], "include_boundari": [38, 274], "close": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 446, 518], "closedwindow": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 518], "dynamicgroupbi": 38, "int32": [38, 39, 131, 248, 274, 275, 465, 579, 600, 668, 693, 783, 784], "window": [38, 39, 145, 152, 153, 154, 202, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 352, 362, 363, 364, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 485, 518, 596, 689, 795], "calcul": [38, 146, 152, 153, 154, 183, 190, 220, 234, 252, 274, 354, 362, 363, 364, 394, 427, 446, 450, 470, 605, 698], "assign": [38, 208, 274, 415, 491, 646, 647, 734, 735, 782], "normal": [38, 151, 183, 234, 274, 360, 394, 446], "groupbi": [38, 39, 112, 117, 145, 161, 182, 202, 236, 237, 244, 255, 274, 275, 352, 476, 606, 699, 795], "member": [38, 274, 385], "seen": [38, 130, 165, 274], "roll": [38, 39, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 485], "slot": [38, 145, 146, 274, 352, 354, 605, 698], "interv": [38, 39, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 518, 592, 596, 663, 665, 666, 672, 674, 677, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 693], "length": [38, 39, 79, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 235, 274, 275, 290, 300, 340, 352, 395, 421, 422, 423, 424, 425, 426, 428, 429, 430, 447, 484, 491, 596, 618, 625, 638, 642, 644, 653, 689, 711, 726, 730, 732, 741, 770, 782], "argument": [38, 39, 54, 61, 62, 82, 90, 97, 107, 109, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 274, 275, 289, 313, 317, 483, 596, 689, 757, 761, 763], "languag": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 682, 689, 767], "1n": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 682, 689], "nanosecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 520, 589, 592, 596, 682, 685, 689], "1u": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 682, 689], "microsecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 290, 519, 520, 589, 592, 596, 682, 689], "1m": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 581, 583, 588, 589, 593, 596, 673, 675, 681, 682, 686, 689], "millisecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 520, 589, 596, 682, 689], "second": [38, 39, 50, 97, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 479, 518, 519, 520, 589, 596, 650, 682, 689], "minut": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 518, 519, 520, 589, 596, 682, 689], "1h": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 666, 682, 689], "hour": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 518, 519, 520, 589, 596, 682, 689], "1d": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 518, 572, 578, 585, 589, 596, 599, 661, 665, 667, 669, 670, 671, 676, 678, 682, 687, 688, 689, 691, 692], "dai": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 509, 517, 518, 519, 520, 576, 586, 589, 590, 591, 595, 596, 597, 598, 600, 682, 683, 689, 691], "1w": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 682, 689], "week": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 520, 589, 596, 598, 682, 689, 691], "1mo": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 518, 575, 589, 596, 662, 664, 679, 682, 683, 684, 689, 690], "calendar": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 496, 497, 579, 589, 596, 600, 668, 682, 689, 693], "month": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 517, 519, 574, 589, 596, 663, 682, 689], "1y": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 596, 682, 689, 693], "year": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 517, 519, 579, 589, 590, 596, 597, 668, 682, 683, 689, 690], "1i": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 589, 682], "combin": [38, 39, 40, 50, 97, 274, 275, 280, 299, 531, 532, 547], "3d12h4m25": [38, 39, 50, 97, 274, 275, 280, 518, 596, 689], "12": [38, 39, 50, 97, 143, 203, 274, 275, 280, 299, 323, 431, 491, 517, 518, 519, 577, 586, 591, 596, 600, 679, 689], "25": [38, 39, 50, 97, 101, 102, 274, 275, 280, 285, 308, 309, 310, 360, 410, 518, 596, 600, 689], "integ": [38, 39, 133, 164, 210, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 330, 331, 339, 372, 417, 436, 501, 502, 503, 504, 510, 511, 512, 513, 592, 685, 747, 782, 783], "10i": [38, 39, 274, 275], "often": [38, 39, 182, 211, 274, 275], "ascend": [38, 39, 274, 275, 479], "sens": [38, 39, 97, 274, 275, 757, 759, 763, 769, 771], "dynam": [38, 215, 216, 217, 218, 219, 221, 222, 223, 274], "indic": [38, 39, 172, 175, 176, 178, 179, 180, 215, 216, 217, 218, 219, 221, 222, 223, 226, 231, 244, 274, 275, 317, 382, 386, 387, 388, 389, 390, 433, 443, 454, 478, 544, 756, 757, 759, 763, 767, 781, 782, 784], "need": [38, 39, 78, 89, 274, 275, 463, 656, 757, 758, 779, 780], "temporarili": [38, 39, 274, 275, 473], "so": [38, 39, 62, 274, 275, 473, 479, 608, 701, 767], "matter": [38, 39, 274, 275], "neg": [38, 76, 77, 79, 228, 229, 235, 274, 297, 298, 300, 312, 439, 440, 447, 617, 618, 644, 710, 711, 732], "lower": [38, 64, 170, 190, 207, 210, 219, 267, 274, 291, 414, 417, 426, 477, 518, 560, 755, 767], "_lower_bound": [38, 274], "_upper_bound": [38, 274], "impact": [38, 274], "harder": [38, 274], "parallel": [38, 50, 51, 145, 274, 279, 280, 352, 483, 484, 606, 699, 763, 765, 771, 795], "both": [38, 39, 49, 50, 70, 105, 116, 170, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 279, 280, 473, 518, 639, 643, 649], "tempor": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 518], "date_rang": [38, 97, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693], "low": [38, 477, 518, 592], "16": [38, 39, 101, 102, 169, 216, 275, 299, 309, 310, 410, 444, 456, 501, 510, 520, 521, 773], "high": [38, 477, 518, 592], "30m": 38, "\u03bc": [38, 39, 50, 97, 275, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693], "00": [38, 50, 97, 518, 520, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 650, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 738], "02": [38, 39, 97, 224, 275, 518, 520, 572, 576, 577, 578, 584, 585, 586, 592, 593, 595, 596, 597, 599, 661, 662, 665, 666, 667, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "03": [38, 39, 97, 275, 518, 572, 575, 576, 578, 585, 586, 592, 593, 595, 596, 597, 599, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "alia": [38, 39, 52, 95, 101, 102, 117, 128, 134, 140, 141, 142, 143, 144, 161, 163, 168, 173, 174, 185, 186, 202, 203, 210, 248, 255, 275, 277, 282, 307, 309, 310, 335, 396, 480, 481, 485, 486, 490, 520, 521, 537, 572, 574, 575, 576, 578, 581, 583, 585, 588, 589, 590, 592, 593, 595, 598, 599, 606, 627, 629, 630, 633, 635, 637, 644, 646, 647, 648, 656, 661, 662, 665, 682, 688, 692, 699, 734, 735, 766, 776, 777], "time_min": 38, "time_max": 38, "boundari": [38, 134, 135, 136, 342, 343, 344], "ad": [38, 93, 101, 116, 309, 489], "time_count": 38, "_lower_boundari": 38, "_upper_boundari": 38, "u32": [38, 59, 103, 112, 124, 125, 126, 127, 128, 139, 140, 185, 198, 201, 208, 248, 251, 312, 332, 333, 334, 337, 415, 465, 468, 469, 478, 550, 554, 557, 558, 561, 574, 577, 584, 586, 590, 591, 592, 597, 598, 601, 602, 612, 630, 637, 663, 666, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 705, 718, 725], "23": [38, 39, 275, 519, 577, 596, 666, 689, 773], "end": [38, 155, 170, 276, 282, 482, 534, 618, 629, 633, 644, 648, 711, 721, 732, 736, 757, 767], "lower_bound": 38, "upper_bound": 38, "time_agg_list": 38, "belong": 38, "04": [38, 97, 518, 520, 574, 575, 578, 584, 585, 586, 590, 592, 593, 596, 597, 598, 599, 650, 662, 664, 667, 672, 674, 677, 678, 679, 680, 684, 685, 686, 687, 689, 690, 691, 692, 738, 768], "idx": [38, 436, 622], "arang": [38, 96, 549], "2i": 38, "3i": 38, "a_agg_list": 38, "rollinggroupbi": 39, "dynamic_groupbi": [39, 275], "now": [39, 275], "individu": [39, 117, 129, 132, 240, 275, 340, 635, 723, 783], "groupby_dynam": [39, 275], "45": [39, 275, 630, 635, 718, 723], "48": [39, 275], "42": [39, 40, 275, 374], "09": [39, 275, 663], "18": [39, 169, 275, 290, 596, 599, 689, 692], "19": [39, 50, 275, 596, 662, 689], "32": [39, 275, 355, 410, 426, 499, 502, 511, 683, 773], "08": [39, 275, 518, 520, 650, 738, 779, 780], "43": [39, 275], "dt": [39, 110, 275, 317, 572, 574, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 793, 798], "with_column": [39, 61, 117, 131, 134, 166, 169, 170, 173, 176, 178, 179, 180, 202, 203, 248, 275, 289, 477, 481, 485, 486, 490, 521, 571, 606, 633, 640, 641, 644, 646, 647, 648, 650, 653, 655, 660, 699, 738, 776, 777, 788], "strptime": [39, 275, 594, 687], "out": [39, 172, 175, 275, 608, 701, 768, 773], "2d": [39, 89, 275, 663], "sum_a": [39, 275], "min_a": [39, 275], "max_a": [39, 275], "assert": [39, 275, 373, 779, 780, 782, 783, 784, 795], "to_list": [39, 275, 622], "seed": [40, 72, 166, 225, 230, 374, 432, 442], "seed_1": [40, 166, 374], "seed_2": [40, 166, 374], "seed_3": [40, 166, 374], "hash": 40, "uint64": [40, 166, 210, 374, 417, 516, 601, 602, 694, 695], "random": [40, 72, 166, 208, 225, 230, 374, 415, 432, 442, 782, 783, 784], "u64": [40, 166, 210, 374], "1381515935931787907": 40, "14326417405130769253": 40, "12561864296213327929": 40, "11391467306893437193": 40, "in_plac": [43, 78, 99, 416, 418, 441, 448], "grown": 43, "stack": [43, 99, 484], "modifi": [43, 99, 418, 573, 599, 662, 692, 739, 740, 757, 767], "insert": [44, 67, 93, 95, 226, 307, 433, 628, 653, 716, 741, 757, 759, 763, 767, 769, 770, 771], "certain": [44, 97, 155, 259, 290, 317, 525, 534], "baz": [44, 45, 62, 95, 278, 307, 559, 645, 647, 735], "intermedi": [45, 278, 377], "linear": [45, 64, 169, 195, 207, 219, 278, 291, 377, 414, 426, 485, 486, 560, 603, 696, 755], "mask": [46, 48, 171, 173, 181, 370, 380, 383, 392, 411, 412, 435, 472, 604, 697, 717], "duplic": [46, 49, 50, 94, 171, 279, 280, 306, 380, 479, 524], "uniqu": [48, 127, 173, 181, 198, 251, 253, 334, 353, 383, 392, 405, 468, 469, 558, 753, 781, 782, 784], "left_on": [49, 50, 279, 280], "right_on": [49, 50, 279, 280], "joinstrategi": [49, 279], "inner": [49, 147, 279, 317, 355, 376, 473, 505, 610, 703], "suffix": [49, 50, 176, 178, 179, 180, 213, 279, 280, 547, 633, 721], "_right": [49, 50, 279, 280], "like": [49, 208, 267, 292, 415, 518, 559, 606, 627, 699, 756, 757, 758, 759, 760, 761, 762, 763, 764], "fashion": [49, 259, 267, 290, 299, 483], "outer": [49, 279], "semi": [49, 279], "anti": [49, 279, 317, 435, 436], "cross": [49, 279], "join_asof": [49, 279], "categor": [49, 110, 132, 248, 317, 338, 465, 473, 544, 786], "see": [49, 129, 132, 134, 135, 136, 160, 169, 183, 191, 234, 240, 342, 343, 344, 394, 446, 594, 687, 758, 765, 779, 780, 783, 784, 800], "stringcach": [49, 795], "other_df": [49, 279], "by_left": [50, 280], "by_right": [50, 280], "asofjoinstrategi": [50, 280], "toler": [50, 280, 779, 780], "allow_parallel": [50, 279, 280], "force_parallel": [50, 279, 280], "asof": [50, 280], "join": [50, 169, 202, 259, 267, 280, 290, 299, 473, 483], "nearest": [50, 64, 133, 164, 207, 219, 280, 291, 339, 372, 414, 426, 560, 755], "rather": [50, 280, 653, 741], "asof_join": 50, "search": [50, 280], "last": [50, 62, 80, 83, 94, 126, 128, 145, 243, 280, 301, 304, 306, 332, 335, 352, 453, 562, 574, 590, 597, 608, 621, 647, 659, 663, 683, 690, 701, 714, 735, 778], "whose": [50, 62, 155, 280, 534], "less": [50, 280, 638, 642, 647, 653, 726, 730, 735, 741, 767], "greater": [50, 234, 280, 446, 647, 735], "numer": [50, 54, 134, 135, 136, 211, 280, 317, 342, 343, 344, 391, 434, 795], "By": [50, 80, 280, 450, 463, 470, 747, 757, 758], "done": [50, 116, 131, 280, 301, 337, 638, 642, 656, 726, 730, 757, 767], "within": [50, 280, 505, 779, 780], "distanc": [50, 280], "durat": [50, 97, 248, 280, 465, 518, 575, 578, 581, 583, 585, 588, 593, 599, 664, 667, 673, 675, 678, 681, 686, 692], "allow": [50, 51, 72, 210, 225, 279, 280, 283, 311, 417, 432, 434, 473, 525, 589, 650, 682, 738, 767, 769, 770, 771, 783, 784], "physic": [50, 132, 248, 256, 279, 280, 465, 571, 660, 757], "plan": [50, 51, 256, 261, 262, 272, 279, 280, 292, 299, 313], "up": [50, 133, 279, 280, 283, 339, 508, 653, 741], "gdp": 50, "2016": 50, "2017": 50, "2018": 50, "2019": 50, "record": 50, "jan": 50, "1st": 50, "4164": 50, "4411": 50, "4566": 50, "4696": 50, "popul": 50, "12th": 50, "82": 50, "66": [50, 426], "83": 50, "52": [50, 102, 224, 310], "05": [50, 97, 518, 575, 592, 596, 662, 663, 664, 689, 691, 768, 779, 780], "object": [51, 90, 109, 110, 129, 132, 150, 240, 273, 277, 292, 317, 336, 338, 358, 451, 459, 518, 539, 747, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 771, 782, 783, 784, 795], "execut": [51, 256, 290, 484, 606, 699], "until": [51, 473], "request": 51, "either": [51, 54, 70, 82, 783], "call": [51, 323, 783, 784, 790, 797], "fetch": [51, 257, 259, 276, 282, 307, 767], "small": [51, 236, 237, 267], "describe_plan": 51, "unoptim": [51, 262], "describe_optimized_plan": 51, "optim": [51, 65, 259, 261, 267, 283, 290, 299, 312, 483, 763, 767, 769, 770, 771], "show_graph": 51, "un": 51, "graphviz": [51, 299], "graph": [51, 277, 311, 483, 797], "advis": 51, "thei": [51, 155, 214, 421], "head": [52, 116, 186, 282, 396], "axi": [53, 54, 56, 57, 82, 287], "maximum": [53, 105, 134, 135, 193, 199, 208, 284, 342, 343, 399, 407, 411, 415, 601, 669, 694, 749, 757, 767, 782, 783, 784], "null_strategi": [54, 82], "nullstrategi": [54, 82], "ignor": [54, 82, 107, 146, 199, 200, 259, 267, 313, 354, 407, 408, 483, 605, 698, 783, 784], "propag": [54, 82, 199, 200, 407, 408], "uint8": [54, 143, 144, 242, 350, 351, 452, 473, 781], "666667": [54, 152, 308], "id_var": [56, 287], "value_var": [56, 287], "variable_nam": [56, 287], "value_nam": [56, 287], "unpivot": [56, 287], "wide": [56, 96, 287], "leav": [56, 287], "identifi": [56, 287], "massag": [56, 287], "variabl": [56, 88, 287, 460, 544], "while": [56, 93, 287, 758, 783, 784], "measur": [56, 287], "just": [56, 287, 767], "non": [56, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 287, 410, 421, 422, 423, 424, 425, 426, 428, 429, 430, 463, 481, 486, 630, 635, 718, 723], "give": [56, 183, 211, 287, 394, 576, 665, 759, 763, 769, 770, 771, 795], "chunkedarrai": [58, 538], "per": [59, 105, 556, 558, 560, 563, 564, 565, 566, 567, 568, 569, 570, 606, 608, 699, 701, 782, 783], "as_dict": 60, "split": [60, 163, 547, 646, 647, 734, 735], "partit": [60, 763, 765, 768], "keep": [60, 94, 97, 182, 306, 481, 757, 767], "predict": [60, 62, 65, 97], "requir": [60, 90, 94, 102, 109, 152, 153, 154, 250, 306, 310, 362, 363, 364, 463, 467, 542, 650, 738, 779, 780], "distinct": [60, 208, 415, 517, 519, 520, 623, 715, 784], "k": [60, 183, 249, 394, 466, 571, 660], "l": [60, 163], "m": [60, 317, 458, 497, 498, 518, 520, 572, 576, 595, 599, 650, 661, 665, 687, 688, 692, 738], "func": [61, 289, 323], "arg": [61, 90, 110, 289, 323, 463, 473, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 537], "kwarg": [61, 90, 102, 110, 289, 310, 463, 473, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "self": [61, 202, 259, 267, 289, 290, 299, 322, 435, 436, 472, 483], "keyword": [61, 70, 289, 317, 763], "def": [61, 93, 289, 782, 783, 784], "cast_str_to_int": [61, 289], "col_nam": [61, 289], "aggregate_fn": 62, "pivotagg": 62, "sort_column": 62, "spreadsheet": [62, 758], "well": 62, "One": [62, 311, 317], "predefin": 62, "transpos": [62, 559], "discoveri": 62, "interpol": [64, 160, 195, 207, 219, 291, 414, 426, 560, 755], "interpolationmethod": [64, 207, 219, 291, 414, 426, 560, 755], "between": [64, 107, 131, 147, 170, 203, 207, 219, 291, 337, 355, 410, 414, 426, 484, 488, 560, 610, 628, 703, 716, 754, 755, 761, 774, 781, 782, 783, 784], "higher": [64, 109, 207, 219, 291, 414, 426, 560, 755], "midpoint": [64, 207, 219, 291, 414, 426, 560, 755], "contigu": [65, 484, 538, 542, 757, 759, 767, 769, 770, 771], "subsequ": 65, "old": [66, 293], "new_col": 67, "val": [69, 248, 571, 660], "by_pred": 70, "accord": [70, 668], "param": [70, 783, 784], "mutual": 70, "exclus": 70, "addition": 70, "ensur": [70, 253, 283, 463, 469, 783, 784, 786], "clariti": 70, "suppli": 70, "error": [70, 131, 317, 337, 522, 610, 631, 636, 650, 657, 703, 719, 724, 738, 757, 767], "anyth": 70, "toomanyrowsreturn": [70, 795], "norowsreturn": [70, 795], "inherit": 70, "rowsexcept": [70, 795], "columnar": [71, 541, 543], "frac": [72, 152, 153, 154, 225, 234, 249, 362, 363, 364, 432, 446, 466], "with_replac": [72, 225, 432], "shuffl": [72, 225, 432, 549], "item": [72, 157, 163, 225, 366, 432, 484, 604, 608, 610, 647, 697, 701, 703, 735], "fraction": [72, 105, 203, 225, 410, 432, 592, 650, 685, 779, 780], "onc": [72, 225, 256, 432, 757, 758], "gener": [72, 93, 225, 230, 432, 442, 622, 765, 781, 782, 783, 784], "shift_and_fil": 76, "shift": [77, 146, 203, 229, 298, 354, 410, 440, 485, 605, 698], "shrink": [78, 441], "usag": [78, 441, 757, 767, 783, 784], "fit": [78, 96, 441], "exact": [78, 650, 738, 782, 783, 784], "hold": [78, 482], "support": [79, 102, 109, 235, 300, 310, 317, 447, 538, 618, 644, 711, 732, 758, 765, 781, 784], "nulls_last": [80, 126, 128, 236, 301, 332, 335], "accept": [80, 756, 757, 759, 763], "descend": [80, 126, 128, 227, 301, 332, 335, 437], "ddof": [81, 98, 239, 254, 302, 308, 450, 470, 754, 774, 775, 787], "standard": [81, 153, 221, 234, 239, 302, 363, 446, 450, 579, 636, 668, 724, 773, 775], "deviat": [81, 153, 221, 239, 302, 363, 450, 775], "degre": [81, 98, 239, 254, 450, 470, 754, 774], "freedom": [81, 98, 239, 254, 450, 470, 754, 774], "21": [82, 596, 689], "nth": [84, 245, 305, 455, 647, 735], "arrow": [85, 106, 459, 463, 522, 538, 559, 759, 769], "mostli": [85, 161], "categoricaltyp": 85, "pyarrow": [85, 89, 90, 109, 317, 459, 462, 463, 538, 542, 757, 759, 763, 768, 773, 796], "large_str": 85, "as_seri": 86, "fruit": [86, 205, 213, 241, 633, 648, 721, 736], "car": [86, 205, 213, 241], "beetl": [86, 205, 213, 241], "audi": [86, 205, 213, 241], "28": [86, 599, 692], "300": [86, 422, 423, 425], "slow": [87, 145, 352, 540, 543, 757, 767], "hot": 88, "encod": [88, 494, 515, 631, 719, 757, 767], "dummi": [88, 460, 544], "foo_1": 88, "foo_2": 88, "foo_3": 88, "bar_6": 88, "bar_7": 88, "bar_8": 88, "ham_a": 88, "ham_b": 88, "ham_c": 88, "u8": [88, 460, 473], "re": [89, 746], "attempt": [89, 463], "ll": [89, 463], "instal": [89, 90, 299, 463, 542, 757, 759, 763, 765, 773], "numpy_arrai": 89, "date_as_object": 90, "sent": [90, 463], "datetime64": 90, "pandas_df": 90, "core": 90, "struct": [92, 95, 110, 253, 307, 317, 489, 490, 622, 646, 647, 734, 735, 795], "three": [92, 776], "four": [92, 776], "five": 92, "num": [92, 170, 173, 653], "include_head": 93, "header_nam": 93, "column_nam": 93, "iter": [93, 145, 352], "diagon": [93, 484], "Will": [93, 259, 267, 290, 299, 317, 483, 749, 752], "veri": [93, 258, 345], "perhap": 93, "column_2": 93, "auto": [93, 763, 771], "name_gener": [93, 622], "base_nam": 93, "my_column_": 93, "my_column_0": 93, "my_column_1": 93, "my_column_2": 93, "uniquekeepstrategi": [94, 306], "origin": [94, 182, 210, 306, 630, 634, 635, 636, 638, 642, 653, 718, 722, 723, 724, 726, 730, 741, 757], "conjunct": 94, "fail": [94, 306, 323, 650, 738], "decompos": [95, 307], "field": [95, 105, 307, 489, 508, 622, 646, 647, 655, 734, 735, 744], "t_a": [95, 307], "t_b": [95, 307], "t_c": [95, 307], "t_d": [95, 307], "womp": [95, 307], "t_": [95, 307], "t_struct": [95, 307], "step": [96, 477], "unstackdirect": 96, "without": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 357, 491, 689, 760, 764, 768, 772], "much": [96, 145, 352], "pivot": [96, 795], "skip": [96, 323, 757, 758, 767], "phase": 96, "direct": [96, 763, 765, 771], "don": [96, 145, 352, 434, 471, 476, 484, 606, 699], "experiment": [96, 102, 145, 215, 216, 217, 218, 219, 221, 222, 223, 310, 352, 491, 689, 768], "subject": 96, "being": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 491, 689, 757, 767, 768, 788], "break": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 491, 689, 768], "ascii_uppercas": 96, "eager": [96, 477, 478, 747, 766, 776, 793, 795], "g": [96, 155, 227, 434, 437, 463, 534, 757, 758, 759, 763, 769, 771], "h": [96, 163], "col1_0": 96, "col1_1": 96, "col1_2": 96, "col2_0": 96, "col2_1": 96, "col2_2": 96, "time_column": 97, "regular": [97, 155, 482, 516, 534], "frequenc": 97, "ha": [97, 109, 117, 145, 249, 257, 341, 352, 373, 384, 466, 476, 625, 657], "forward_fil": 97, "06": [97, 591, 600, 691], "varianc": [98, 154, 183, 223, 254, 308, 364, 394, 430, 470, 787], "grow": 99, "b_squar": [101, 309], "36": [101, 309], "named_expr": [102, 310], "overwrit": [102, 267, 309, 310, 757, 767], "provid": [102, 310, 631, 632, 634, 636, 657, 719, 720, 722, 724, 757, 765, 767, 783, 784, 800], "is_not": [102, 310], "opt": [102, 310], "via": [102, 310, 757, 758, 767, 769, 771], "flag": [102, 227, 283, 310, 317, 437, 781], "with_columns_kwarg": [102, 310], "row_nr": [103, 312, 436], "binaryio": [104, 106, 756, 757, 758, 759, 760, 763, 764], "bytesio": [104, 105, 106, 109, 756, 757, 758, 759, 763], "path": [104, 105, 106, 107, 108, 109, 227, 292, 313, 437, 636, 724, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 770, 771], "compress": [104, 106, 109], "avrocompress": 104, "uncompress": [104, 106, 109, 759, 769], "write": [104, 105, 106, 107, 109, 134, 135, 136, 299, 313, 342, 343, 344], "apach": [104, 109, 756], "avro": [104, 756, 795], "written": [104, 105, 106, 107, 108, 109, 313], "snappi": [104, 109], "deflat": 104, "has_head": [105, 757, 758, 767], "sep": [105, 486, 757, 767], "quot": [105, 757, 767], "batch_siz": [105, 757, 770], "1024": [105, 757, 770], "datetime_format": 105, "date_format": 105, "time_format": 105, "float_precis": 105, "null_valu": [105, 757, 767], "textio": [105, 757], "_io": [105, 756, 758, 759], "pathlib": [105, 107, 108, 292, 313, 756, 758, 759, 760, 761, 762, 764, 767, 769, 770], "comma": 105, "csv": [105, 656, 757, 758, 767, 795], "symbol": 105, "process": 105, "thread": [105, 606, 699, 757, 765, 785], "chrono": [105, 594, 650, 687, 738], "crate": 105, "precis": [105, 572, 650, 661], "timeunit": [105, 458, 497, 498, 518, 572, 595, 599, 661, 688, 692], "decim": [105, 224, 431], "dirpath": [105, 767], "new_fil": 105, "ipccompress": 106, "ipc": [106, 759, 760, 768, 769, 795], "binari": 106, "stream": [106, 259, 267, 290, 299, 483], "feather": [106, 759, 769, 795], "lz4": [106, 109], "zstd": [106, 109], "pretti": 107, "row_ori": 107, "json_lin": [107, 761], "to_str": [107, 313], "io": [107, 108, 292, 313, 761, 762, 800], "iobas": [107, 108, 292, 313, 761, 762], "serial": [107, 108], "json": [107, 108, 272, 292, 313, 636, 724, 761, 762, 770, 795], "represent": [107, 108, 248, 261, 262, 465, 571, 574, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 597, 598, 600, 660, 663, 666, 668, 672, 674, 677, 679, 680, 683, 684, 685, 690, 691, 693, 797], "common": 107, "deprec": [107, 259, 267, 313, 483, 761, 790], "toggl": [107, 761, 786], "ndjson": [107, 761], "write_ndjson": 107, "newlin": [108, 762, 770], "delimit": [108, 628, 716, 757, 762, 767, 770], "parquetcompress": 109, "compression_level": 109, "row_group_s": 109, "use_pyarrow": [109, 462, 757, 759, 763], "pyarrow_opt": [109, 763], "parquet": [109, 763, 764, 771, 795], "gzip": 109, "lzo": 109, "brotli": 109, "choos": 109, "good": 109, "fast": [109, 227, 437], "decompress": 109, "guarante": [109, 267, 757], "deal": [109, 208, 317, 415, 650, 738], "older": 109, "reader": [109, 759, 763], "disk": [109, 299], "22": [109, 482, 596, 599, 650, 689, 692, 738], "reduc": [109, 400, 413, 452, 554, 555, 557, 561, 757, 763, 767, 769, 770, 771], "pressur": [109, 763, 770, 771], "improv": [109, 759, 769], "speed": 109, "At": 109, "moment": [109, 183, 234, 394, 446], "featur": [109, 473], "write_t": 109, "context": [110, 112, 117, 161, 236, 237, 253, 311, 473, 476, 487, 535, 606, 624, 699, 772, 793], "arr": [110, 317, 463, 521, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 698, 699, 702, 703, 705, 710, 711, 714, 793, 798], "namespac": [110, 129, 132, 150, 240, 317, 336, 338, 358, 451, 790, 795, 797], "relat": [110, 129, 132, 150, 240, 317, 336, 338, 358, 451], "cat": [110, 248, 317, 473, 486, 491, 571, 629, 651, 652, 660, 717, 793, 798], "meta": [110, 795], "absolut": [111, 318, 779, 780], "94": 112, "renam": [113, 192, 461, 627, 655, 744, 757, 793], "confus": 114, "tt": 114, "tf": [114, 115], "ff": [114, 115], "upcast": 116, "tail": [116, 234, 446, 547], "project": [117, 236, 237, 259, 267, 283, 290, 299, 483, 767, 769, 770, 771], "depend": [117, 208, 415, 476, 535, 601, 602, 624, 694, 695, 773], "expect": [117, 283, 476, 527, 530, 533], "assum": [117, 283, 657], "a_times_2": 117, "invers": [118, 119, 120, 121, 122, 123, 324, 325, 326, 327, 328, 329], "cosin": [118, 119, 137, 138, 191, 324, 325, 346, 347], "570796": [118, 120, 324, 326], "hyperbol": [119, 121, 123, 138, 233, 247, 325, 327, 329, 347, 445, 457], "sine": [120, 121, 191, 232, 233, 326, 327, 444, 445], "881374": [121, 327], "tangent": [122, 123, 246, 247, 328, 329, 456, 457], "785398": [122, 328], "inf": [123, 172, 175, 329, 382, 386, 410, 491, 783, 784], "maxim": [124, 330, 554, 566], "minim": [125, 331, 402, 557, 569, 602, 695], "would": [126, 128, 208, 332, 335, 415, 463, 479, 608, 624, 701], "arg_sort": [128, 335], "exprlistnamespac": 129, "page": [129, 132, 240, 759, 769, 795], "full": [129, 132, 240, 497, 757, 767], "detail": [129, 132, 240, 765, 779, 780, 800], "next": [130, 208, 415], "strict": [131, 317, 337, 434, 631, 650, 719, 738], "throw": [131, 317, 337, 636, 724], "due": [131, 337], "overflow": [131, 143, 144, 242, 317, 337, 350, 351, 452], "i32": [131, 600, 668, 693, 783, 788], "exprcatnamespac": 132, "set_ord": 132, "round": [133, 164, 246, 339, 372], "min_val": [134, 136, 342, 344], "max_val": [134, 135, 342, 343], "otherwis": [134, 135, 136, 152, 153, 154, 210, 323, 342, 343, 344, 362, 363, 364, 417, 435, 436, 788], "foo_clip": 134, "clip": [135, 136, 343, 344], "543081": [138, 347], "cumul": [140, 141, 142, 143, 144, 348, 349, 350, 351, 489, 490], "len": [140, 212, 419, 491, 637, 638, 642, 653, 726, 730, 741, 782, 783], "a_revers": [140, 141, 142, 143, 144, 192, 213, 241], "product": [143, 147, 350, 355], "int16": [143, 144, 242, 350, 351, 452], "uint16": [143, 144, 242, 350, 351, 452], "prevent": [143, 144, 242, 350, 351, 452], "issu": [143, 144, 242, 350, 351, 452, 757, 758, 767], "min_period": [145, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 352, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430], "slide": [145, 352], "increas": [145, 352, 763], "anoth": [145, 237, 323, 352, 434, 572, 661], "realli": [145, 352], "o": [145, 163, 249, 352, 466, 759, 769], "complex": [145, 249, 352, 466], "visit": [145, 352], "null_behavior": [146, 354, 605, 698], "nullbehavior": [146, 354, 605, 698], "th": [146, 234, 354, 446, 605, 698], "discret": [146, 151, 354, 360, 491, 605, 698], "handl": [146, 354, 605, 631, 653, 698, 719, 741, 757, 767], "44": 147, "drop_nul": 148, "drop_nan": 149, "exprdatetimenamespac": 150, "718281828459045": [151, 188, 360, 397], "formula": [151, 360], "pk": [151, 360], "log": [151, 249, 360, 466], "probabl": [151, 360], "doesn": [151, 360, 471, 767], "459148": 151, "754888": 151, "com": [152, 153, 154, 362, 363, 364, 634, 722], "span": [152, 153, 154, 362, 363, 364], "half_lif": [152, 153, 154, 362, 363, 364], "alpha": [152, 153, 154, 259, 267, 290, 299, 362, 363, 364, 483], "adjust": [152, 153, 154, 234, 362, 363, 364, 446], "exponenti": [152, 153, 154, 156, 362, 363, 364, 365], "weight": [152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430, 446], "move": [152, 153, 154, 215, 216, 218, 222, 362, 363, 364, 422, 423, 425, 429], "averag": [152, 208, 362, 415], "decai": [152, 153, 154, 362, 363, 364], "term": [152, 153, 154, 362, 363, 364], "mass": [152, 153, 154, 362, 363, 364], "gamma": [152, 153, 154, 362, 363, 364], "foral": [152, 153, 154, 362, 363, 364], "geq": [152, 153, 154, 362, 363, 364], "theta": [152, 153, 154, 362, 363, 364], "half": [152, 153, 154, 362, 363, 364], "life": [152, 153, 154, 362, 363, 364], "exp": [152, 153, 154, 362, 363, 364], "ln": [152, 153, 154, 362, 363, 364], "smooth": [152, 153, 154, 362, 363, 364], "factor": [152, 153, 154, 248, 362, 363, 364, 465], "leq": [152, 153, 154, 362, 363, 364], "divid": [152, 153, 154, 183, 362, 363, 364, 394, 596, 689], "begin": [152, 153, 154, 362, 363, 364, 634, 722], "account": [152, 153, 154, 362, 363, 364, 589, 682], "imbal": [152, 153, 154, 362, 363, 364], "rel": [152, 153, 154, 362, 363, 364, 559, 589, 682, 779, 780], "ew": [152, 153, 154, 362, 363, 364], "w_i": [152, 153, 154, 362, 363, 364], "recurs": [152, 153, 154, 362, 363, 364], "y_0": [152, 153, 154, 362, 363, 364], "x_0": [152, 153, 154, 362, 363, 364], "y_t": [152, 153, 154, 362, 363, 364], "y_": [152, 153, 154, 362, 363, 364], "x_t": [152, 153, 154, 362, 363, 364], "observ": [152, 153, 154, 362, 363, 364], "428571": 152, "bia": [153, 154, 183, 220, 234, 363, 364, 394, 427, 446], "correct": [153, 154, 183, 220, 234, 283, 363, 364, 394, 427, 446, 758], "unbias": [153, 154, 363, 364], "963624": [153, 363], "928571": [154, 364], "wildcard": [155, 474, 482, 489, 534, 536, 793], "regex": [155, 482, 534, 629, 630, 633, 634, 635, 640, 641, 648, 717, 718, 721, 722, 723, 728, 729, 736], "aa": [155, 534], "ba": [155, 534], "cc": [155, 534], "718282": 156, "389056": 156, "54": 156, "59815": 156, "expand": [157, 163, 211, 366], "extend": [158, 322, 367], "group_col": [161, 255], "g1": [161, 202, 255], "g2": [161, 202, 255], "lt": [161, 255], "gte": [161, 255], "explod": 163, "hello": [163, 474, 703, 725], "world": [163, 703, 725], "r": [163, 630, 634, 635, 640, 718, 722, 723, 728], "word": 163, "down": [164, 372, 767, 769, 770, 771], "latest": [165, 625], "2461716855791224000": 166, "16174362112783765148": 166, "13569566217648818014": 166, "11638928888656214026": 166, "6351727772611549480": 166, "fmt": [168, 277, 537, 594, 650, 687, 738], "cumsum": [168, 277], "regrid": 169, "grid": 169, "df_original_grid": 169, "grid_point": 169, "df_new_grid": 169, "include_bound": 170, "primit": [170, 174, 463], "exclud": [170, 482, 774, 783, 784], "finit": [172, 382, 774], "optional_memb": [174, 385], "infinit": [175, 386], "_isnan": 176, "a_isnan": 176, "b_isnan": 176, "negat": 177, "_is_not_nan": 178, "a_is_not_nan": 178, "b_is_not_nan": 178, "_not_nul": 179, "a_not_nul": 179, "b_not_nul": 179, "_isnul": 180, "a_isnul": 180, "b_isnul": 180, "root": [182, 192, 205, 238, 241, 449, 626], "With": [182, 758], "fisher": [183, 234, 394, 446], "pearson": [183, 234, 394, 446, 754], "dataset": [183, 394, 757, 767, 768, 795], "fourth": [183, 394], "central": [183, 234, 394, 446], "squar": [183, 238, 394, 449, 549], "definit": [183, 394], "subtract": [183, 394], "distribut": [183, 234, 394, 446], "elimin": [183, 394], "come": [183, 394, 790, 797], "bias": [183, 234, 394, 446], "scipi": [183, 234, 394, 446], "stat": [183, 234, 394, 446, 795], "153061": 183, "logarithm": [188, 189, 397, 398], "584963": 188, "30103": 189, "60206": 189, "lowest": 190, "9223372036854775808": 190, "agg_list": 191, "elementwis": [191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 421, 422, 423, 424, 425, 426, 428, 429, 430, 474, 475], "third": 191, "parti": 191, "librari": [191, 522, 529, 800], "book": 191, "to_numpi": 191, "argmax": 191, "_revers": [192, 213, 241], "b_revers": [192, 213, 241], "most": [197, 203, 253, 403, 410, 469, 538, 625, 647, 735], "occur": [197, 208, 259, 267, 290, 299, 403, 415, 483], "poison": [199, 200, 407, 408], "encount": [199, 200, 407, 408, 522, 636, 724, 774], "nanmax": [199, 200, 407, 408], "wherea": [199, 200, 276, 282, 407, 408], "subgroup": 202, "postgr": [202, 765], "max_by_group": 202, "percentag": [203, 410, 781, 783, 784], "recent": [203, 410], "least": [203, 253, 410, 469, 527, 783], "previou": [203, 410], "percent": [203, 410], "090909": 203, "expon": 204, "power": 204, "27": [204, 561, 591, 600], "64": [204, 410, 500, 503, 512], "reverse_": 205, "reverse_a": 205, "reverse_fruit": 205, "reverse_b": 205, "reverse_car": 205, "rankmethod": [208, 415], "ti": [208, 415], "appropri": [208, 415], "dens": [208, 415], "ordin": [208, 415, 590, 683], "avail": [208, 267, 415, 782, 790, 793, 797, 798], "been": [208, 415], "competit": [208, 415], "highest": [208, 252, 415, 774], "immedi": [208, 415, 776], "those": [208, 415], "correspond": [208, 415, 579, 668], "repeat": [209, 211, 759, 769], "sign": [210, 417, 501, 502, 503, 504, 589, 653, 682, 741], "bit": [210, 417, 499, 500, 501, 502, 503, 504, 510, 511, 512, 513, 629, 717], "unsign": [210, 417, 510, 511, 512, 513], "64bit": [210, 417], "safe": [210, 417, 463], "coerc": 211, "coercion": [211, 259, 267, 290, 299, 483], "op": [211, 784], "dim": [212, 419], "flat": [212, 419], "fruits_revers": [213, 241], "cars_revers": [213, 241], "window_s": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430], "specif": [214, 317, 421, 650, 738, 765, 776, 783], "rolling_min": [214, 421], "rolling_max": [214, 421], "rolling_mean": [214, 421], "rolling_sum": [214, 421], "multipli": [214, 215, 216, 217, 218, 219, 221, 222, 223, 421, 422, 423, 424, 425, 426, 428, 429, 430], "358899": 214, "041452": 214, "567764": 214, "travers": [215, 216, 218, 221, 222, 223, 422, 423, 425, 428, 429, 430], "vector": [215, 216, 218, 221, 222, 223, 422, 423, 425, 428, 429, 430], "fix": [215, 216, 217, 218, 219, 221, 222, 223, 599, 692, 758, 782, 783], "5h": [215, 216, 217, 218, 219, 221, 222, 223], "groupby_rol": [215, 216, 217, 218, 219, 221, 222, 223, 274], "quantil": [219, 426], "33": [219, 224, 426, 482], "skew": [220, 427], "527525": [221, 428], "333333": [223, 410, 430], "digit": [224, 431, 653, 718, 741], "17": [224, 346], "maintain": [226, 250, 433, 467], "enabl": [227, 437], "downstream": [227, 437], "code": [227, 437], "incorrect": [227, 437, 599, 657, 692], "care": [227, 437], "content": [230, 253, 442], "modul": 230, "175201": [233, 445], "sampl": [234, 446, 549, 757], "about": [234, 446], "unimod": [234, 446], "continu": [234, 446], "skewtest": [234, 446], "enough": [234, 446, 606, 699], "speak": [234, 446], "coeffici": [234, 446], "g_1": [234, 446], "m_3": [234, 446], "m_2": [234, 446], "m_i": [234, 446], "sum_": [234, 446], "texttt": [234, 446], "k_3": [234, 446], "k_2": [234, 446], "sqrt": [234, 446], "343622": 234, "whole": [236, 237, 634, 722, 758], "larg": [236, 237, 559], "larger": [236, 774], "414214": [238, 449], "exprstringnamespac": 240, "to_uppercas": 240, "taken": [244, 618, 644, 711, 732], "56": [246, 773], "761594": [247, 457], "replic": [248, 465], "vals_phys": 248, "largest": [249, 466], "smallest": [249, 466], "appear": [251, 468], "value_count": 251, "might": [251, 624, 757, 767], "id": [251, 253, 468, 549, 640, 641], "9223372036854775807": 252, "multithread": 253, "ldf": [256, 258, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 656, 657, 658, 659], "hit": 256, "node": [256, 277, 283, 290], "type_coercion": [259, 261, 267, 290, 299, 483], "predicate_pushdown": [259, 261, 267, 283, 290, 299, 483], "projection_pushdown": [259, 261, 267, 283, 290, 299, 483], "simplify_express": [259, 261, 267, 290, 299, 483], "string_cach": [259, 267, 483], "no_optim": [259, 267, 283, 290, 483], "slice_pushdown": [259, 261, 267, 283, 290, 299, 483], "common_subplan_elimin": [259, 261, 267, 290, 299, 483], "allow_stream": [259, 261, 267, 290, 299, 483], "huge": 259, "saver": 259, "debug": [259, 267, 283], "pushdown": [259, 267, 283, 290, 299, 312, 435, 436, 483], "simplifi": [259, 267, 290, 299, 483], "pleas": [259, 267], "try": [259, 267, 290, 299, 483, 531, 532, 757, 758, 759, 763, 767, 769, 771], "branch": [259, 267, 290, 299, 483], "subplan": [259, 267, 290, 299, 483], "part": [259, 267, 290, 299, 311, 483, 538, 646, 647, 663, 666, 672, 674, 677, 679, 680, 685, 693, 734, 735], "state": [259, 267, 290, 299, 483, 489, 529], "lf": [265, 270, 295, 316], "n_row": [267, 756, 757, 759, 763, 767, 769, 770, 771], "500": [267, 422, 423, 425, 672, 674, 680, 685], "purpos": 267, "scan": [267, 276, 282, 540, 543, 757, 763, 767, 768, 769, 770, 771], "help": [267, 793], "final": [267, 771], "influenc": [267, 283], "read_json": [272, 313], "lazygroupbi": [273, 274, 275], "NOT": [273, 655], "typeerror": 273, "subscript": 273, "load": [276, 282, 765], "validate_output_schema": 283, "past": 283, "paramount": 283, "hard": 283, "bug": [283, 657], "caller": [283, 657], "invari": 283, "upheld": 283, "prune": 283, "show_plot": 290, "truncate_nod": 290, "figsiz": [290, 299], "gantt": 290, "chart": 290, "matplotlib": [290, 299], "plot": [290, 299], "from_json": 292, "write_json": 292, "output_path": 299, "raw_output": 299, "figur": 299, "dot": 299, "290994": 302, "extern": 311, "access": 311, "block": [312, 435, 436], "pars": [314, 650, 738, 757, 758, 767, 769, 770], "under": [316, 793, 798], "arraylik": 317, "nan_to_nul": 317, "dtype_if_empti": 317, "position": 317, "pattern": [317, 435, 436, 629, 630, 634, 635, 640, 641, 717, 718, 722, 723, 728, 729, 757, 767, 769, 771], "scenario": 317, "through": [317, 765], "s3": [317, 768], "inner_dtyp": 317, "time_unit": [317, 497, 498, 518, 599, 692], "u": [317, 458, 497, 498, 518, 572, 576, 595, 599, 650, 661, 665, 688, 692, 766], "sr": 319, "new_aliased_sr": 319, "append_chunk": 322, "super": 322, "skip_nul": 323, "special": [323, 757, 767], "141593": 324, "292432": 325, "549306": 329, "listnamespac": 336, "catnamespac": 338, "12345": [339, 372, 431], "56789": [339, 372, 431], "901234": [339, 372, 431], "concat": [340, 404, 485, 486], "math": [346, 444, 456], "pi": [346, 444, 456], "1232e": 346, "quick": 353, "mix": 353, "series_num": 353, "581139": 353, "series_str": 353, "datetimenamespac": 358, "005": 360, "06293300616044681": 360, "65": 360, "8568409950394724": 360, "4000000": 361, "814697265625": 361, "lit": [369, 489, 490, 536, 777, 788], "bitmask": 373, "swiftli": 373, "89438004737668041": 374, "14107061265552512458": 374, "15437026767517145468": 374, "datelik": 379, "sublist": [385, 601, 602, 604, 605, 607, 608, 609, 610, 611, 618, 621, 694, 695, 697, 698, 700, 701, 702, 703, 704, 711, 714], "timedelta": [399, 402, 407, 408, 481, 518, 574, 576, 577, 584, 586, 589, 590, 591, 592, 595, 596, 597, 598, 600, 669, 671, 676, 682, 689], "166667": 410, "142857": 410, "125": 410, "128": 410, "512": 410, "local": [411, 412], "peak": [411, 412], "i8": 420, "nanstd": 421, "858612": 421, "200": [422, 423, 425], "400": [422, 423, 425], "150": 423, "250": 423, "350": 423, "450": 423, "381802": 427, "dev": 428, "57": 431, "frequent": [435, 436], "to_fram": [435, 436, 650, 654, 655, 734, 735, 738], "mutat": 436, "with_row_count": 436, "exactli": [441, 646, 647, 734, 735, 779, 780, 783, 784], "actual": [441, 758, 783, 784], "2246e": [444, 456], "syntact": [449, 490, 534, 535, 545, 755, 772, 777], "sugar": [449, 490, 534, 535, 545, 755, 772, 777], "delta": [450, 470, 498, 754, 774], "divisor": [450, 470], "stringnamespac": 451, "6331e16": 456, "lib": 459, "int64arrai": 459, "a_1": [460, 646, 734], "a_2": 460, "a_3": 460, "123": [461, 630, 635, 641, 718, 723, 729], "456": 461, "xyz": [461, 630, 635, 718, 723], "convers": [462, 463, 650, 738, 795], "zero_copy_onli": 463, "writabl": 463, "complet": [463, 547], "view": 463, "know": [463, 471], "what": [463, 471], "presenc": 463, "immut": 463, "made": 463, "ignore_nul": 471, "seriesview": 471, "unless": [471, 539], "manag": 473, "categori": [473, 491, 571, 660, 786, 795], "invalid": [473, 631, 636, 719, 724, 757, 767], "outermost": 473, "exit": 473, "color": [473, 549], "red": [473, 549], "green": [473, 549], "blue": 473, "yellow": 473, "succe": [473, 757, 767], "df_join": 473, "thing": [474, 535, 767], "columnwis": [474, 475], "AND": 474, "bitwis": [474, 475], "OR": 475, "Be": 477, "eagerli": [478, 766], "oppos": 478, "lazili": [478, 757, 767, 769, 770, 771], "to_seri": [478, 622], "argsort": 479, "hamburg": 482, "lazy_fram": 483, "threadpool": 483, "concatmethod": 484, "relev": 484, "lag": 485, "mimic": 485, "a_lag_": 485, "a_rol": 485, "dog": [486, 629, 651, 652, 717], "plai": 486, "swim": 486, "walk": 486, "full_sent": 486, "covari": 488, "intoexpr": [489, 536], "include_init": 489, "accumul": [489, 536], "fn": [489, 536], "new_valu": [489, 536], "across": [490, 777], "cumfold": 490, "bin": 491, "break_point_label": 491, "break_point": 491, "category_label": 491, "breakpoint": 491, "string_repr": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "tu": [497, 498, 572, 576, 595, 599, 661, 662, 665, 688, 692], "tz": [497, 573, 662], "time_zon": 497, "timezon": 497, "zoneinfo": 497, "available_timezon": 497, "wrap": 507, "arbitrari": [507, 783], "composit": 508, "static": [514, 657], "utf": 515, "polars_u64_idx": 516, "compon": [517, 519, 520, 592, 650, 685], "31": [517, 519, 574, 575, 586, 597, 650, 662, 663, 664, 738, 773], "granular": 518, "finer": 518, "permut": 518, "drang": 518, "1985": 518, "07": [518, 574, 590, 598, 650, 663, 691, 738], "59": [519, 584, 592, 677, 685], "999999": 519, "add_week": 520, "add_dai": 520, "add_second": 520, "add_millisecond": 520, "add_hour": 520, "add_millisec": 520, "ond": 520, "001": [520, 581, 583, 588, 673, 675, 681], "002": [520, 581, 583, 588, 673, 675, 681], "eval": 521, "rank": [521, 606, 699, 774], "concat_list": [521, 606, 699], "mathemat": 521, "a_b_doubl": 521, "panic": 529, "mismatch": 531, "incompat": 532, "fstring": 537, "placehold": 537, "hello_": 537, "_world": 537, "foo_": 537, "_bar_": 537, "foo_a_bar_1": 537, "foo_b_bar_2": 537, "foo_c_bar_3": 537, "closest": 538, "infer_schema_length": [540, 543, 757, 758, 767, 770], "nan_to_non": 542, "datetimeindex": 542, "pd_df": 542, "pd_seri": 542, "agg_group": 545, "idiomat": 547, "_sum": 547, "_tail_sum": 547, "bar_sum": 547, "bar_tail_sum": 547, "sub": [549, 633, 648, 721, 736], "triangl": 549, "group_df": 549, "nr": [552, 562, 658, 659], "833333": 555, "pivot_column": 559, "values_column": 559, "pivotop": 559, "ideal": 559, "categoricalord": [571, 660], "lexic": [571, 660], "lose": [572, 661], "2001": [572, 574, 576, 577, 584, 586, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 650, 661, 663, 665, 666, 669, 670, 671, 672, 674, 676, 677, 679, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 738], "tu_m": [572, 661], "tu_n": [572, 661], "zone": [573, 662], "with_time_zon": [573, 662], "timestamp": [573, 662], "extract": [574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 597, 598, 600, 635, 636, 663, 664, 666, 667, 668, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 690, 691, 693, 723, 724], "stop": [574, 576, 577, 584, 586, 590, 591, 592, 595, 596, 597, 598, 600, 661, 662, 663, 665, 666, 672, 674, 677, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 756, 757, 759, 763, 767, 769, 770, 771], "weekdai": [574, 590], "day_of_month": [574, 590, 598], "ordinal_dai": [574, 598], "day_of_year": [574, 590, 598], "diff": [575, 578, 581, 583, 585, 588, 593, 664, 667, 673, 675, 678, 681, 686], "days_diff": 575, "epochtimeunit": [576, 665], "sinc": [576, 665], "unix": [576, 665], "epoch_n": [576, 665], "epoch_": [576, 665], "978307200000000": [576, 595, 665, 688], "978307200": [576, 665], "978393600000000": [576, 595, 665, 688], "978393600": [576, 665], "978480000000000": [576, 595, 665, 688], "978480000": [576, 665], "hours_diff": 578, "iso": [579, 597, 668, 690], "microseconds_diff": 581, "1001": [581, 583, 588], "003": [581, 583, 588], "997": [581, 583, 588], "998": [581, 583, 588], "999": [581, 583, 588], "milliseconds_diff": 583, "minutes_diff": 585, "1440": [585, 678], "nanoseconds_diff": 588, "1000000": [588, 653, 681], "leap": [589, 682], "minu": [589, 682], "dictat": [589, 682], "2000": [589, 682], "2005": [589, 682], "date_plus_1i": [589, 682], "1y2mo": [589, 682], "date_min": 589, "1998": [589, 682], "2002": [589, 591, 600, 682, 693], "1999": [589, 682], "2003": [589, 682], "2004": [589, 682], "2006": [589, 682], "366": [590, 683], "180": [591, 600], "milli": [592, 685], "micro": [592, 685], "456789": 592, "654321": 592, "111110": 592, "765431": 592, "sec": 592, "11111": 592, "seconds_diff": 593, "timestamp_n": [595, 688], "timestamp_m": 595, "978307200000": 595, "978393600000": 595, "978480000000": 595, "bucket": [596, 689], "49": [596, 689], "series_equ": [596, 689], "53": [597, 690], "mondai": [598, 691], "sundai": [598, 691], "tu_u": [599, 692], "32971": [599, 692], "32974": [599, 692], "32976": [599, 692], "compil": [601, 602, 694, 695], "membership": [604, 697], "against": [606, 699, 799], "activ": [606, 699], "blindli": [606, 699], "worth": [606, 699], "n_field_strategi": 622, "tostructstrategi": 622, "first_non_nul": 622, "max_width": 622, "field_0": 622, "field_1": 622, "field_n": 622, "col_name_": 622, "col_name_0": 622, "col_name_1": 622, "col_name_2": 622, "produc": [624, 748, 783, 784], "computeerror": [624, 795], "undo": 627, "keep_nam": 627, "substr": [629, 633, 640, 641, 645, 646, 647, 648, 717, 721, 728, 729, 733, 734, 735, 736], "treat": [629, 640, 641, 717, 728, 729], "starts_with": [629, 633, 721], "ends_with": [629, 648, 736], "crab": [629, 717], "rab": [629, 717], "success": [630, 635, 718, 723], "overlap": [630, 635, 718, 723], "captur": [630, 634, 635, 718, 722, 723], "bla": [630, 635, 718, 723], "asd": [630, 635, 718, 723], "678": [630, 635, 718, 723], "910t": [630, 635, 718, 723], "count_digit": 630, "transferencod": [631, 632, 719, 720], "hex": [631, 632, 719, 720], "base64": [631, 632, 719, 720], "thrown": [631, 719], "unabl": [631, 719], "unhandl": [631, 719], "666f6f": [631, 632, 719, 720], "626172": [631, 632, 719, 720], "mango": [633, 648, 721, 736], "go": [633, 721], "has_suffix": 633, "group_index": [634, 722], "target": [634, 650, 722, 738], "http": [634, 722, 800], "vote": [634, 722], "ballon_dor": [634, 722], "candid": [634, 722], "messi": [634, 722], "ref": [634, 722], "candidat": [634, 722], "jorginho": [634, 722], "ronaldo": [634, 722], "w": [634, 722], "extracted_nr": 635, "910": [635, 723], "json_path": [636, 724], "jsonpath": [636, 724], "regardless": [636, 724], "document": [636, 650, 724, 738, 758, 765], "here": [636, 724, 765, 782, 783, 784], "json_val": [636, 724], "bear": 637, "110": 637, "fillchar": [638, 642, 726, 730], "justifi": [638, 642, 726, 730], "pad": [638, 642, 653, 726, 730, 741], "cow": [638, 642, 726, 730], "monkei": [638, 642, 726, 730], "hippopotamu": [638, 642, 726, 730], "whitespac": [639, 643, 649, 727, 731, 737], "trail": [639, 643, 649, 731, 737], "replace_al": [640, 728], "text": [640, 641], "123abc": [640, 728], "abc456": [640, 728], "abc": [640, 728], "abcabc": [641, 729], "123a123": [641, 729], "bc": [641, 729], "trim": [643, 649, 727, 731, 737], "subslic": [644, 732], "pear": [644, 732], "papaya": [644, 732], "dragonfruit": [644, 732], "s_slice": 644, "ear": [644, 732], "aya": [644, 732], "uit": [644, 732], "ya": [644, 732], "onf": [644, 732], "inclus": [645, 646, 733, 734], "d_4": [646, 734], "_": [646, 734], "rename_field": [646, 647, 734, 735], "first_part": [646, 647, 734, 735], "second_part": [646, 647, 734, 735], "unnest": [646, 647, 734, 735], "restrict": [647, 735], "remaind": [647, 735], "prefix": [648, 653, 736, 741], "app": [648, 736], "has_prefix": 648, "strftime": [650, 738], "anywher": [650, 738], "eg": 650, "3f": 650, "sun": [650, 738], "jul": [650, 738, 773], "34": [650, 738], "lowercas": [651, 739], "variant": [651, 652], "uppercas": [652, 740], "10000": 653, "100000": 653, "0010": 653, "0001": 653, "00000": 653, "00001": 653, "to_struct": [654, 655], "my_struct": [654, 655, 776], "anymor": 655, "panicexcept": [655, 795], "describ": [656, 783], "scan_csv": [656, 757], "n_uniqu": 656, "unique_nam": 656, "known": [657, 783], "epoch": 662, "1583020800": 662, "1585699200": 662, "1588291200": 662, "europ": 662, "london": 662, "gmt": 662, "bst": 662, "america": 662, "new_york": 662, "nyc": 662, "29": 662, "est": 662, "edt": 662, "1583002800": 662, "1585681200": 662, "1588273200": 662, "500m": [672, 674, 680, 685], "500000": 672, "2m": 677, "500000000": 680, "date_minus_1y_2mon": 682, "timestamp_u": 688, "978307200000000000": 688, "978393600000000000": 688, "978480000000000000": 688, "equival": [739, 740], "export": 746, "allow_object": 747, "unknown": 747, "valueexcept": 747, "correl": [754, 774], "new_column": [757, 758], "comment_char": [757, 767], "quote_char": [757, 767], "skip_row": [757, 767], "ignore_error": [757, 767], "parse_d": [757, 767], "n_thread": 757, "8192": 757, "csvencod": [757, 767], "low_memori": [757, 763, 767, 770, 771], "storage_opt": [757, 759, 763, 769, 771], "skip_rows_after_head": [757, 767], "row_count_nam": [757, 759, 763, 767, 769, 770, 771], "row_count_offset": [757, 759, 763, 767, 769, 770, 771], "sample_s": 757, "eol_char": [757, 767], "handler": [757, 758], "builtin": [757, 758], "open": [757, 758, 759, 763, 769, 771], "stringio": 757, "fsspec": [757, 759, 763, 769, 771, 773], "remot": [757, 759, 763], "autogener": [757, 767], "column_x": [757, 767], "enumer": [757, 767], "shorter": 757, "comment": [757, 767], "line": [757, 758, 767], "escap": [757, 767], "cpu": 757, "system": 757, "multi": 757, "lossi": [757, 767], "decod": 757, "im": 757, "parser": 757, "even": 757, "regard": [757, 774], "storag": [757, 759, 763, 769, 771], "connect": [757, 759, 763, 765, 768, 769, 771, 796], "host": [757, 759, 763, 769, 771], "port": [757, 759, 763, 765, 769, 771], "usernam": [757, 759, 763, 765, 769, 771], "password": [757, 759, 763, 765, 769, 771], "row_count": [757, 759, 763, 767, 769, 770, 771], "glob": [757, 767, 769, 771], "sheet_id": 758, "sheet_nam": 758, "xlsx2csv_option": 758, "read_csv_opt": 758, "excel": [758, 795], "xlsx": 758, "sheet": 758, "xlsx2csv": [758, 773], "read_csv": [758, 767], "skip_empty_lin": 758, "my": [758, 768], "datasheet": 758, "excel_fil": 758, "As": [758, 766], "look": 758, "twice": 758, "xl": 758, "xlsm": 758, "xlsb": 758, "odf": 758, "od": 758, "odt": 758, "from_panda": [758, 765], "memory_map": [759, 763, 769], "v2": [759, 769], "greatli": [759, 769], "read_ndjson": 761, "parallelstrategi": [763, 771], "directori": 763, "awar": 763, "stabl": 763, "row_group": [763, 771], "read_tabl": 763, "connection_uri": 765, "partition_on": 765, "partition_rang": 765, "partition_num": 765, "protocol": 765, "mysql": 765, "sqlite": 765, "redshift": 765, "clickhous": 765, "databas": 765, "altern": 765, "solut": 765, "raw": 765, "connectorx": [765, 773], "uri": 765, "postgresql": 765, "server": 765, "backend": 765, "transfer": 765, "lineitem": 765, "partition_col": 765, "explicitli": [765, 782, 783], "mode": 766, "polarsdatatyp": 767, "with_column_nam": 767, "push": [767, 769, 770, 771], "therebi": [767, 769, 770, 771], "potenti": [767, 769, 770, 771], "overhead": [767, 769, 770, 771], "updat": 767, "my_long_fil": 767, "breezah": 767, "terribl": 767, "mydf": 767, "write_csv": 767, "cloud": 768, "dset": 768, "folder": 768, "1970": 768, "batch": 770, "version": 773, "stdout": 773, "info": 773, "platform": 773, "linux": 773, "microsoft": 773, "wsl2": 773, "x86_64": 773, "glibc2": 773, "main": 773, "gcc": 773, "20210110": 773, "propagate_nan": 774, "spearman": 774, "sever": 776, "a_and_b": 776, "get_column": 777, "check_dtyp": [779, 780], "check_exact": [779, 780], "check_column_nam": 779, "rtol": [779, 780], "1e": [779, 780], "atol": [779, 780], "nans_compare_equ": [779, 780], "assertionerror": [779, 780], "inexact": [779, 780], "check_nam": 780, "searchstrategi": [781, 783, 784], "null_prob": [781, 783, 784], "recognis": 781, "chanc": [781, 783, 784], "addit": [781, 782], "hypothesi": [781, 782, 783, 784, 800], "sampled_from": 781, "unique_small_int": 781, "ccy": 781, "gbp": 781, "jpy": 781, "min_col": [782, 783], "max_col": [782, 783], "suitabl": 782, "standalon": [782, 783], "itself": 782, "explicit": 782, "omit": [782, 783, 784], "mincol": 782, "control": 782, "especi": 782, "punctuat": 782, "test_special_char_colname_init": 782, "test_unique_xyz": 782, "assert_someth": 782, "min_siz": [783, 784], "max_siz": [783, 784], "include_col": 783, "allow_infin": [783, 784], "allowed_dtyp": [783, 784], "excluded_dtyp": [783, 784], "desir": 783, "n_chunk": [783, 784], "randomis": 783, "onto": 783, "exist": 783, "independ": [783, 784], "basi": 783, "pct": 783, "preced": 783, "disallow": [783, 784], "deploi": [783, 784], "decor": [783, 784], "characterist": [783, 784], "develop": [783, 784], "concret": [783, 784], "test_repr": [783, 784], "repr": [783, 784], "df_strategi": 783, "15836": 783, "1755e": 783, "38": 783, "575050513": 783, "constructor": [784, 795], "max_data_s": 784, "54666": 784, "35": 784, "6414": 784, "63290": 784, "pool": 785, "isn": 788, "thens": 788, "chain": 788, "favor": 790, "These": 793, "sometim": 793, "polar": [793, 795, 797, 799, 800], "overview": 795, "public": 795, "expos": 795, "descript": 795, "manipul": 795, "timeseri": 795, "set_tbl_format": 795, "set_tbl_cell_align": 795, "set_ascii_t": 795, "set_fmt_str_length": 795, "set_global_string_cach": 795, "set_tbl_col": 795, "set_tbl_row": 795, "set_tbl_width_char": 795, "set_utf8_t": 795, "set_tbl_hide_column_separ": 795, "set_tbl_hide_dataframe_shap": 795, "set_tbl_change_column_data_type_position_format": 795, "set_tbl_hide_column_data_typ": 795, "set_tbl_hide_column_nam": 795, "unset_global_string_cach": 795, "toggle_string_cach": 795, "arrowerror": 795, "duplicateerror": 795, "invalidoperationerror": 795, "nodataerror": 795, "notfounderror": 795, "schemaerror": 795, "shapeerror": 795, "show_vers": 795, "sqlcontext": [795, 799], "readthedoc": 800}, "objects": {"polars.Config": [[1, 0, 1, "", "set_ascii_tables"], [2, 0, 1, "", "set_fmt_str_lengths"], [3, 0, 1, "", "set_global_string_cache"], [4, 0, 1, "", "set_tbl_cell_alignment"], [5, 0, 1, "", "set_tbl_change_column_data_type_position_format"], [6, 0, 1, "", "set_tbl_cols"], [7, 0, 1, "", "set_tbl_formatting"], [8, 0, 1, "", "set_tbl_hide_column_data_types"], [9, 0, 1, "", "set_tbl_hide_column_names"], [10, 0, 1, "", "set_tbl_hide_column_separator"], [11, 0, 1, "", "set_tbl_hide_dataframe_shape"], [12, 0, 1, "", "set_tbl_rows"], [13, 0, 1, "", "set_tbl_width_chars"], [14, 0, 1, "", "set_utf8_tables"], [15, 0, 1, "", "unset_global_string_cache"]], "polars": [[16, 1, 1, "", "DataFrame"], [110, 1, 1, "", "Expr"], [797, 1, 1, "", "LazyFrame"], [799, 1, 1, "", "SQLContext"], [317, 1, 1, "", "Series"], [473, 1, 1, "", "StringCache"], [474, 3, 1, "", "all"], [475, 3, 1, "", "any"], [476, 3, 1, "", "apply"], [477, 3, 1, "", "arange"], [478, 3, 1, "", "arg_where"], [479, 3, 1, "", "argsort_by"], [480, 3, 1, "", "avg"], [481, 3, 1, "", "coalesce"], [482, 3, 1, "", "col"], [483, 3, 1, "", "collect_all"], [484, 3, 1, "", "concat"], [485, 3, 1, "", "concat_list"], [486, 3, 1, "", "concat_str"], [487, 3, 1, "", "count"], [488, 3, 1, "", "cov"], [489, 3, 1, "", "cumfold"], [490, 3, 1, "", "cumsum"], [491, 3, 1, "", "cut"], [517, 3, 1, "", "date"], [518, 3, 1, "", "date_range"], [519, 3, 1, "", "datetime"], [520, 3, 1, "", "duration"], [521, 3, 1, "", "element"], [534, 3, 1, "", "exclude"], [535, 3, 1, "", "first"], [536, 3, 1, "", "fold"], [537, 3, 1, "", "format"], [538, 3, 1, "", "from_arrow"], [539, 3, 1, "", "from_dict"], [540, 3, 1, "", "from_dicts"], [541, 3, 1, "", "from_numpy"], [542, 3, 1, "", "from_pandas"], [543, 3, 1, "", "from_records"], [544, 3, 1, "", "get_dummies"], [545, 3, 1, "", "groups"], [546, 3, 1, "", "head"], [746, 3, 1, "", "list"], [747, 3, 1, "", "lit"], [748, 3, 1, "", "map"], [749, 3, 1, "", "max"], [750, 3, 1, "", "mean"], [751, 3, 1, "", "median"], [752, 3, 1, "", "min"], [753, 3, 1, "", "n_unique"], [754, 3, 1, "", "pearson_corr"], [755, 3, 1, "", "quantile"], [756, 3, 1, "", "read_avro"], [757, 3, 1, "", "read_csv"], [758, 3, 1, "", "read_excel"], [759, 3, 1, "", "read_ipc"], [760, 3, 1, "", "read_ipc_schema"], [761, 3, 1, "", "read_json"], [762, 3, 1, "", "read_ndjson"], [763, 3, 1, "", "read_parquet"], [764, 3, 1, "", "read_parquet_schema"], [765, 3, 1, "", "read_sql"], [766, 3, 1, "", "repeat"], [767, 3, 1, "", "scan_csv"], [768, 3, 1, "", "scan_ds"], [769, 3, 1, "", "scan_ipc"], [770, 3, 1, "", "scan_ndjson"], [771, 3, 1, "", "scan_parquet"], [772, 3, 1, "", "select"], [773, 3, 1, "", "show_versions"], [774, 3, 1, "", "spearman_rank_corr"], [775, 3, 1, "", "std"], [776, 3, 1, "", "struct"], [777, 3, 1, "", "sum"], [778, 3, 1, "", "tail"], [785, 3, 1, "", "threadpool_size"], [786, 3, 1, "", "toggle_string_cache"], [787, 3, 1, "", "var"], [788, 3, 1, "", "when"]], "polars.DataFrame": [[16, 0, 1, "", "__init__"], [17, 0, 1, "", "apply"], [18, 0, 1, "", "cleared"], [19, 0, 1, "", "clone"], [20, 2, 1, "", "columns"], [21, 0, 1, "", "describe"], [22, 0, 1, "", "drop"], [23, 0, 1, "", "drop_in_place"], [24, 0, 1, "", "drop_nulls"], [25, 2, 1, "", "dtypes"], [26, 0, 1, "", "estimated_size"], [27, 0, 1, "", "explode"], [28, 0, 1, "", "extend"], [29, 0, 1, "", "fill_nan"], [30, 0, 1, "", "fill_null"], [31, 0, 1, "", "filter"], [32, 0, 1, "", "find_idx_by_name"], [33, 0, 1, "", "fold"], [34, 0, 1, "", "frame_equal"], [35, 0, 1, "", "get_column"], [36, 0, 1, "", "get_columns"], [37, 0, 1, "", "groupby"], [38, 0, 1, "", "groupby_dynamic"], [39, 0, 1, "", "groupby_rolling"], [40, 0, 1, "", "hash_rows"], [41, 0, 1, "", "head"], [42, 2, 1, "", "height"], [43, 0, 1, "", "hstack"], [44, 0, 1, "", "insert_at_idx"], [45, 0, 1, "", "interpolate"], [46, 0, 1, "", "is_duplicated"], [47, 0, 1, "", "is_empty"], [48, 0, 1, "", "is_unique"], [49, 0, 1, "", "join"], [50, 0, 1, "", "join_asof"], [51, 0, 1, "", "lazy"], [52, 0, 1, "", "limit"], [53, 0, 1, "", "max"], [54, 0, 1, "", "mean"], [55, 0, 1, "", "median"], [56, 0, 1, "", "melt"], [57, 0, 1, "", "min"], [58, 0, 1, "", "n_chunks"], [59, 0, 1, "", "null_count"], [60, 0, 1, "", "partition_by"], [61, 0, 1, "", "pipe"], [62, 0, 1, "", "pivot"], [63, 0, 1, "", "product"], [64, 0, 1, "", "quantile"], [65, 0, 1, "", "rechunk"], [66, 0, 1, "", "rename"], [67, 0, 1, "", "replace"], [68, 0, 1, "", "replace_at_idx"], [69, 0, 1, "", "reverse"], [70, 0, 1, "", "row"], [71, 0, 1, "", "rows"], [72, 0, 1, "", "sample"], [73, 2, 1, "", "schema"], [74, 0, 1, "", "select"], [75, 2, 1, "", "shape"], [76, 0, 1, "", "shift"], [77, 0, 1, "", "shift_and_fill"], [78, 0, 1, "", "shrink_to_fit"], [79, 0, 1, "", "slice"], [80, 0, 1, "", "sort"], [81, 0, 1, "", "std"], [82, 0, 1, "", "sum"], [83, 0, 1, "", "tail"], [84, 0, 1, "", "take_every"], [85, 0, 1, "", "to_arrow"], [86, 0, 1, "", "to_dict"], [87, 0, 1, "", "to_dicts"], [88, 0, 1, "", "to_dummies"], [89, 0, 1, "", "to_numpy"], [90, 0, 1, "", "to_pandas"], [91, 0, 1, "", "to_series"], [92, 0, 1, "", "to_struct"], [93, 0, 1, "", "transpose"], [94, 0, 1, "", "unique"], [95, 0, 1, "", "unnest"], [96, 0, 1, "", "unstack"], [97, 0, 1, "", "upsample"], [98, 0, 1, "", "var"], [99, 0, 1, "", "vstack"], [100, 2, 1, "", "width"], [101, 0, 1, "", "with_column"], [102, 0, 1, "", "with_columns"], [103, 0, 1, "", "with_row_count"], [104, 0, 1, "", "write_avro"], [105, 0, 1, "", "write_csv"], [106, 0, 1, "", "write_ipc"], [107, 0, 1, "", "write_json"], [108, 0, 1, "", "write_ndjson"], [109, 0, 1, "", "write_parquet"]], "polars.Expr": [[110, 0, 1, "", "__init__"], [111, 0, 1, "", "abs"], [112, 0, 1, "", "agg_groups"], [113, 0, 1, "", "alias"], [114, 0, 1, "", "all"], [115, 0, 1, "", "any"], [116, 0, 1, "", "append"], [117, 0, 1, "", "apply"], [118, 0, 1, "", "arccos"], [119, 0, 1, "", "arccosh"], [120, 0, 1, "", "arcsin"], [121, 0, 1, "", "arcsinh"], [122, 0, 1, "", "arctan"], [123, 0, 1, "", "arctanh"], [124, 0, 1, "", "arg_max"], [125, 0, 1, "", "arg_min"], [126, 0, 1, "", "arg_sort"], [127, 0, 1, "", "arg_unique"], [128, 0, 1, "", "argsort"], [129, 2, 1, "", "arr"], [130, 0, 1, "", "backward_fill"], [131, 0, 1, "", "cast"], [132, 2, 1, "", "cat"], [133, 0, 1, "", "ceil"], [134, 0, 1, "", "clip"], [135, 0, 1, "", "clip_max"], [136, 0, 1, "", "clip_min"], [137, 0, 1, "", "cos"], [138, 0, 1, "", "cosh"], [139, 0, 1, "", "count"], [140, 0, 1, "", "cumcount"], [141, 0, 1, "", "cummax"], [142, 0, 1, "", "cummin"], [143, 0, 1, "", "cumprod"], [144, 0, 1, "", "cumsum"], [145, 0, 1, "", "cumulative_eval"], [146, 0, 1, "", "diff"], [147, 0, 1, "", "dot"], [148, 0, 1, "", "drop_nans"], [149, 0, 1, "", "drop_nulls"], [150, 2, 1, "", "dt"], [151, 0, 1, "", "entropy"], [152, 0, 1, "", "ewm_mean"], [153, 0, 1, "", "ewm_std"], [154, 0, 1, "", "ewm_var"], [155, 0, 1, "", "exclude"], [156, 0, 1, "", "exp"], [157, 0, 1, "", "explode"], [158, 0, 1, "", "extend_constant"], [159, 0, 1, "", "fill_nan"], [160, 0, 1, "", "fill_null"], [161, 0, 1, "", "filter"], [162, 0, 1, "", "first"], [163, 0, 1, "", "flatten"], [164, 0, 1, "", "floor"], [165, 0, 1, "", "forward_fill"], [166, 0, 1, "", "hash"], [167, 0, 1, "", "head"], [168, 0, 1, "", "inspect"], [169, 0, 1, "", "interpolate"], [170, 0, 1, "", "is_between"], [171, 0, 1, "", "is_duplicated"], [172, 0, 1, "", "is_finite"], [173, 0, 1, "", "is_first"], [174, 0, 1, "", "is_in"], [175, 0, 1, "", "is_infinite"], [176, 0, 1, "", "is_nan"], [177, 0, 1, "", "is_not"], [178, 0, 1, "", "is_not_nan"], [179, 0, 1, "", "is_not_null"], [180, 0, 1, "", "is_null"], [181, 0, 1, "", "is_unique"], [182, 0, 1, "", "keep_name"], [183, 0, 1, "", "kurtosis"], [184, 0, 1, "", "last"], [185, 0, 1, "", "len"], [186, 0, 1, "", "limit"], [187, 0, 1, "", "list"], [188, 0, 1, "", "log"], [189, 0, 1, "", "log10"], [190, 0, 1, "", "lower_bound"], [191, 0, 1, "", "map"], [192, 0, 1, "", "map_alias"], [193, 0, 1, "", "max"], [194, 0, 1, "", "mean"], [195, 0, 1, "", "median"], [196, 0, 1, "", "min"], [197, 0, 1, "", "mode"], [198, 0, 1, "", "n_unique"], [199, 0, 1, "", "nan_max"], [200, 0, 1, "", "nan_min"], [201, 0, 1, "", "null_count"], [202, 0, 1, "", "over"], [203, 0, 1, "", "pct_change"], [204, 0, 1, "", "pow"], [205, 0, 1, "", "prefix"], [206, 0, 1, "", "product"], [207, 0, 1, "", "quantile"], [208, 0, 1, "", "rank"], [209, 0, 1, "", "rechunk"], [210, 0, 1, "", "reinterpret"], [211, 0, 1, "", "repeat_by"], [212, 0, 1, "", "reshape"], [213, 0, 1, "", "reverse"], [214, 0, 1, "", "rolling_apply"], [215, 0, 1, "", "rolling_max"], [216, 0, 1, "", "rolling_mean"], [217, 0, 1, "", "rolling_median"], [218, 0, 1, "", "rolling_min"], [219, 0, 1, "", "rolling_quantile"], [220, 0, 1, "", "rolling_skew"], [221, 0, 1, "", "rolling_std"], [222, 0, 1, "", "rolling_sum"], [223, 0, 1, "", "rolling_var"], [224, 0, 1, "", "round"], [225, 0, 1, "", "sample"], [226, 0, 1, "", "search_sorted"], [227, 0, 1, "", "set_sorted"], [228, 0, 1, "", "shift"], [229, 0, 1, "", "shift_and_fill"], [230, 0, 1, "", "shuffle"], [231, 0, 1, "", "sign"], [232, 0, 1, "", "sin"], [233, 0, 1, "", "sinh"], [234, 0, 1, "", "skew"], [235, 0, 1, "", "slice"], [236, 0, 1, "", "sort"], [237, 0, 1, "", "sort_by"], [238, 0, 1, "", "sqrt"], [239, 0, 1, "", "std"], [240, 2, 1, "", "str"], [241, 0, 1, "", "suffix"], [242, 0, 1, "", "sum"], [243, 0, 1, "", "tail"], [244, 0, 1, "", "take"], [245, 0, 1, "", "take_every"], [246, 0, 1, "", "tan"], [247, 0, 1, "", "tanh"], [248, 0, 1, "", "to_physical"], [249, 0, 1, "", "top_k"], [250, 0, 1, "", "unique"], [251, 0, 1, "", "unique_counts"], [252, 0, 1, "", "upper_bound"], [253, 0, 1, "", "value_counts"], [254, 0, 1, "", "var"], [255, 0, 1, "", "where"]], "polars.LazyFrame": [[256, 0, 1, "", "cache"], [257, 0, 1, "", "cleared"], [258, 0, 1, "", "clone"], [259, 0, 1, "", "collect"], [260, 2, 1, "", "columns"], [261, 0, 1, "", "describe_optimized_plan"], [262, 0, 1, "", "describe_plan"], [263, 0, 1, "", "drop"], [264, 0, 1, "", "drop_nulls"], [265, 2, 1, "", "dtypes"], [266, 0, 1, "", "explode"], [267, 0, 1, "", "fetch"], [268, 0, 1, "", "fill_nan"], [269, 0, 1, "", "fill_null"], [270, 0, 1, "", "filter"], [271, 0, 1, "", "first"], [272, 0, 1, "", "from_json"], [273, 0, 1, "", "groupby"], [274, 0, 1, "", "groupby_dynamic"], [275, 0, 1, "", "groupby_rolling"], [276, 0, 1, "", "head"], [277, 0, 1, "", "inspect"], [278, 0, 1, "", "interpolate"], [279, 0, 1, "", "join"], [280, 0, 1, "", "join_asof"], [281, 0, 1, "", "last"], [282, 0, 1, "", "limit"], [283, 0, 1, "", "map"], [284, 0, 1, "", "max"], [285, 0, 1, "", "mean"], [286, 0, 1, "", "median"], [287, 0, 1, "", "melt"], [288, 0, 1, "", "min"], [289, 0, 1, "", "pipe"], [290, 0, 1, "", "profile"], [291, 0, 1, "", "quantile"], [292, 0, 1, "", "read_json"], [293, 0, 1, "", "rename"], [294, 0, 1, "", "reverse"], [295, 2, 1, "", "schema"], [296, 0, 1, "", "select"], [297, 0, 1, "", "shift"], [298, 0, 1, "", "shift_and_fill"], [299, 0, 1, "", "show_graph"], [300, 0, 1, "", "slice"], [301, 0, 1, "", "sort"], [302, 0, 1, "", "std"], [303, 0, 1, "", "sum"], [304, 0, 1, "", "tail"], [305, 0, 1, "", "take_every"], [306, 0, 1, "", "unique"], [307, 0, 1, "", "unnest"], [308, 0, 1, "", "var"], [309, 0, 1, "", "with_column"], [310, 0, 1, "", "with_columns"], [311, 0, 1, "", "with_context"], [312, 0, 1, "", "with_row_count"], [313, 0, 1, "", "write_json"]], "polars.SQLContext": [[314, 0, 1, "", "execute"], [315, 0, 1, "", "query"], [316, 0, 1, "", "register"]], "polars.Series": [[317, 0, 1, "", "__init__"], [318, 0, 1, "", "abs"], [319, 0, 1, "", "alias"], [320, 0, 1, "", "all"], [321, 0, 1, "", "any"], [322, 0, 1, "", "append"], [323, 0, 1, "", "apply"], [324, 0, 1, "", "arccos"], [325, 0, 1, "", "arccosh"], [326, 0, 1, "", "arcsin"], [327, 0, 1, "", "arcsinh"], [328, 0, 1, "", "arctan"], [329, 0, 1, "", "arctanh"], [330, 0, 1, "", "arg_max"], [331, 0, 1, "", "arg_min"], [332, 0, 1, "", "arg_sort"], [333, 0, 1, "", "arg_true"], [334, 0, 1, "", "arg_unique"], [335, 0, 1, "", "argsort"], [336, 2, 1, "", "arr"], [337, 0, 1, "", "cast"], [338, 2, 1, "", "cat"], [339, 0, 1, "", "ceil"], [340, 0, 1, "", "chunk_lengths"], [341, 0, 1, "", "cleared"], [342, 0, 1, "", "clip"], [343, 0, 1, "", "clip_max"], [344, 0, 1, "", "clip_min"], [345, 0, 1, "", "clone"], [346, 0, 1, "", "cos"], [347, 0, 1, "", "cosh"], [348, 0, 1, "", "cummax"], [349, 0, 1, "", "cummin"], [350, 0, 1, "", "cumprod"], [351, 0, 1, "", "cumsum"], [352, 0, 1, "", "cumulative_eval"], [353, 0, 1, "", "describe"], [354, 0, 1, "", "diff"], [355, 0, 1, "", "dot"], [356, 0, 1, "", "drop_nans"], [357, 0, 1, "", "drop_nulls"], [358, 2, 1, "", "dt"], [359, 2, 1, "", "dtype"], [360, 0, 1, "", "entropy"], [361, 0, 1, "", "estimated_size"], [362, 0, 1, "", "ewm_mean"], [363, 0, 1, "", "ewm_std"], [364, 0, 1, "", "ewm_var"], [365, 0, 1, "", "exp"], [366, 0, 1, "", "explode"], [367, 0, 1, "", "extend_constant"], [368, 0, 1, "", "fill_nan"], [369, 0, 1, "", "fill_null"], [370, 0, 1, "", "filter"], [371, 2, 1, "", "flags"], [372, 0, 1, "", "floor"], [373, 0, 1, "", "has_validity"], [374, 0, 1, "", "hash"], [375, 0, 1, "", "head"], [376, 2, 1, "", "inner_dtype"], [377, 0, 1, "", "interpolate"], [378, 0, 1, "", "is_boolean"], [379, 0, 1, "", "is_datelike"], [380, 0, 1, "", "is_duplicated"], [381, 0, 1, "", "is_empty"], [382, 0, 1, "", "is_finite"], [383, 0, 1, "", "is_first"], [384, 0, 1, "", "is_float"], [385, 0, 1, "", "is_in"], [386, 0, 1, "", "is_infinite"], [387, 0, 1, "", "is_nan"], [388, 0, 1, "", "is_not_nan"], [389, 0, 1, "", "is_not_null"], [390, 0, 1, "", "is_null"], [391, 0, 1, "", "is_numeric"], [392, 0, 1, "", "is_unique"], [393, 0, 1, "", "is_utf8"], [394, 0, 1, "", "kurtosis"], [395, 0, 1, "", "len"], [396, 0, 1, "", "limit"], [397, 0, 1, "", "log"], [398, 0, 1, "", "log10"], [399, 0, 1, "", "max"], [400, 0, 1, "", "mean"], [401, 0, 1, "", "median"], [402, 0, 1, "", "min"], [403, 0, 1, "", "mode"], [404, 0, 1, "", "n_chunks"], [405, 0, 1, "", "n_unique"], [406, 2, 1, "", "name"], [407, 0, 1, "", "nan_max"], [408, 0, 1, "", "nan_min"], [409, 0, 1, "", "null_count"], [410, 0, 1, "", "pct_change"], [411, 0, 1, "", "peak_max"], [412, 0, 1, "", "peak_min"], [413, 0, 1, "", "product"], [414, 0, 1, "", "quantile"], [415, 0, 1, "", "rank"], [416, 0, 1, "", "rechunk"], [417, 0, 1, "", "reinterpret"], [418, 0, 1, "", "rename"], [419, 0, 1, "", "reshape"], [420, 0, 1, "", "reverse"], [421, 0, 1, "", "rolling_apply"], [422, 0, 1, "", "rolling_max"], [423, 0, 1, "", "rolling_mean"], [424, 0, 1, "", "rolling_median"], [425, 0, 1, "", "rolling_min"], [426, 0, 1, "", "rolling_quantile"], [427, 0, 1, "", "rolling_skew"], [428, 0, 1, "", "rolling_std"], [429, 0, 1, "", "rolling_sum"], [430, 0, 1, "", "rolling_var"], [431, 0, 1, "", "round"], [432, 0, 1, "", "sample"], [433, 0, 1, "", "search_sorted"], [434, 0, 1, "", "series_equal"], [435, 0, 1, "", "set"], [436, 0, 1, "", "set_at_idx"], [437, 0, 1, "", "set_sorted"], [438, 2, 1, "", "shape"], [439, 0, 1, "", "shift"], [440, 0, 1, "", "shift_and_fill"], [441, 0, 1, "", "shrink_to_fit"], [442, 0, 1, "", "shuffle"], [443, 0, 1, "", "sign"], [444, 0, 1, "", "sin"], [445, 0, 1, "", "sinh"], [446, 0, 1, "", "skew"], [447, 0, 1, "", "slice"], [448, 0, 1, "", "sort"], [449, 0, 1, "", "sqrt"], [450, 0, 1, "", "std"], [451, 2, 1, "", "str"], [452, 0, 1, "", "sum"], [453, 0, 1, "", "tail"], [454, 0, 1, "", "take"], [455, 0, 1, "", "take_every"], [456, 0, 1, "", "tan"], [457, 0, 1, "", "tanh"], [458, 2, 1, "", "time_unit"], [459, 0, 1, "", "to_arrow"], [460, 0, 1, "", "to_dummies"], [461, 0, 1, "", "to_frame"], [462, 0, 1, "", "to_list"], [463, 0, 1, "", "to_numpy"], [464, 0, 1, "", "to_pandas"], [465, 0, 1, "", "to_physical"], [466, 0, 1, "", "top_k"], [467, 0, 1, "", "unique"], [468, 0, 1, "", "unique_counts"], [469, 0, 1, "", "value_counts"], [470, 0, 1, "", "var"], [471, 0, 1, "", "view"], [472, 0, 1, "", "zip_with"]], "polars.StringCache": [[473, 0, 1, "", "__init__"]], "polars.datatypes": [[492, 1, 1, "", "Binary"], [493, 1, 1, "", "Boolean"], [494, 1, 1, "", "Categorical"], [495, 1, 1, "", "DataType"], [496, 1, 1, "", "Date"], [497, 1, 1, "", "Datetime"], [498, 1, 1, "", "Duration"], [499, 1, 1, "", "Float32"], [500, 1, 1, "", "Float64"], [501, 1, 1, "", "Int16"], [502, 1, 1, "", "Int32"], [503, 1, 1, "", "Int64"], [504, 1, 1, "", "Int8"], [505, 1, 1, "", "List"], [506, 1, 1, "", "Null"], [507, 1, 1, "", "Object"], [508, 1, 1, "", "Struct"], [509, 1, 1, "", "Time"], [510, 1, 1, "", "UInt16"], [511, 1, 1, "", "UInt32"], [512, 1, 1, "", "UInt64"], [513, 1, 1, "", "UInt8"], [514, 1, 1, "", "Unknown"], [515, 1, 1, "", "Utf8"], [516, 3, 1, "", "get_idx_type"]], "polars.datatypes.Binary": [[492, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[493, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[494, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[495, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[496, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[497, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[498, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[499, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[500, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[501, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[502, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[503, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[504, 0, 1, "", "__init__"]], "polars.datatypes.List": [[505, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[506, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[507, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[508, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[509, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[510, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[511, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[512, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[513, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[514, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[515, 0, 1, "", "__init__"]], "polars.exceptions": [[522, 4, 1, "", "ArrowError"], [523, 4, 1, "", "ComputeError"], [524, 4, 1, "", "DuplicateError"], [525, 4, 1, "", "InvalidOperationError"], [526, 4, 1, "", "NoDataError"], [527, 4, 1, "", "NoRowsReturned"], [528, 4, 1, "", "NotFoundError"], [529, 4, 1, "", "PanicException"], [530, 4, 1, "", "RowsException"], [531, 4, 1, "", "SchemaError"], [532, 4, 1, "", "ShapeError"], [533, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.dataframe.groupby.GroupBy": [[547, 0, 1, "", "agg"], [548, 0, 1, "", "agg_list"], [549, 0, 1, "", "apply"], [550, 0, 1, "", "count"], [551, 0, 1, "", "first"], [552, 0, 1, "", "head"], [553, 0, 1, "", "last"], [554, 0, 1, "", "max"], [555, 0, 1, "", "mean"], [556, 0, 1, "", "median"], [557, 0, 1, "", "min"], [558, 0, 1, "", "n_unique"], [559, 0, 1, "", "pivot"], [560, 0, 1, "", "quantile"], [561, 0, 1, "", "sum"], [562, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[563, 0, 1, "", "count"], [564, 0, 1, "", "first"], [565, 0, 1, "", "last"], [566, 0, 1, "", "max"], [567, 0, 1, "", "mean"], [568, 0, 1, "", "median"], [569, 0, 1, "", "min"], [570, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[571, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[572, 0, 1, "", "cast_time_unit"], [573, 0, 1, "", "cast_time_zone"], [574, 0, 1, "", "day"], [575, 0, 1, "", "days"], [576, 0, 1, "", "epoch"], [577, 0, 1, "", "hour"], [578, 0, 1, "", "hours"], [579, 0, 1, "", "iso_year"], [580, 0, 1, "", "microsecond"], [581, 0, 1, "", "microseconds"], [582, 0, 1, "", "millisecond"], [583, 0, 1, "", "milliseconds"], [584, 0, 1, "", "minute"], [585, 0, 1, "", "minutes"], [586, 0, 1, "", "month"], [587, 0, 1, "", "nanosecond"], [588, 0, 1, "", "nanoseconds"], [589, 0, 1, "", "offset_by"], [590, 0, 1, "", "ordinal_day"], [591, 0, 1, "", "quarter"], [592, 0, 1, "", "second"], [593, 0, 1, "", "seconds"], [594, 0, 1, "", "strftime"], [595, 0, 1, "", "timestamp"], [596, 0, 1, "", "truncate"], [597, 0, 1, "", "week"], [598, 0, 1, "", "weekday"], [599, 0, 1, "", "with_time_unit"], [600, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[601, 0, 1, "", "arg_max"], [602, 0, 1, "", "arg_min"], [603, 0, 1, "", "concat"], [604, 0, 1, "", "contains"], [605, 0, 1, "", "diff"], [606, 0, 1, "", "eval"], [607, 0, 1, "", "first"], [608, 0, 1, "", "get"], [609, 0, 1, "", "head"], [610, 0, 1, "", "join"], [611, 0, 1, "", "last"], [612, 0, 1, "", "lengths"], [613, 0, 1, "", "max"], [614, 0, 1, "", "mean"], [615, 0, 1, "", "min"], [616, 0, 1, "", "reverse"], [617, 0, 1, "", "shift"], [618, 0, 1, "", "slice"], [619, 0, 1, "", "sort"], [620, 0, 1, "", "sum"], [621, 0, 1, "", "tail"], [622, 0, 1, "", "to_struct"], [623, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[624, 0, 1, "", "output_name"], [625, 0, 1, "", "pop"], [626, 0, 1, "", "root_names"], [627, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[628, 0, 1, "", "concat"], [629, 0, 1, "", "contains"], [630, 0, 1, "", "count_match"], [631, 0, 1, "", "decode"], [632, 0, 1, "", "encode"], [633, 0, 1, "", "ends_with"], [634, 0, 1, "", "extract"], [635, 0, 1, "", "extract_all"], [636, 0, 1, "", "json_path_match"], [637, 0, 1, "", "lengths"], [638, 0, 1, "", "ljust"], [639, 0, 1, "", "lstrip"], [640, 0, 1, "", "replace"], [641, 0, 1, "", "replace_all"], [642, 0, 1, "", "rjust"], [643, 0, 1, "", "rstrip"], [644, 0, 1, "", "slice"], [645, 0, 1, "", "split"], [646, 0, 1, "", "split_exact"], [647, 0, 1, "", "splitn"], [648, 0, 1, "", "starts_with"], [649, 0, 1, "", "strip"], [650, 0, 1, "", "strptime"], [651, 0, 1, "", "to_lowercase"], [652, 0, 1, "", "to_uppercase"], [653, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[654, 0, 1, "", "field"], [655, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[656, 0, 1, "", "agg"], [657, 0, 1, "", "apply"], [658, 0, 1, "", "head"], [659, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[660, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[661, 0, 1, "", "cast_time_unit"], [662, 0, 1, "", "cast_time_zone"], [663, 0, 1, "", "day"], [664, 0, 1, "", "days"], [665, 0, 1, "", "epoch"], [666, 0, 1, "", "hour"], [667, 0, 1, "", "hours"], [668, 0, 1, "", "iso_year"], [669, 0, 1, "", "max"], [670, 0, 1, "", "mean"], [671, 0, 1, "", "median"], [672, 0, 1, "", "microsecond"], [673, 0, 1, "", "microseconds"], [674, 0, 1, "", "millisecond"], [675, 0, 1, "", "milliseconds"], [676, 0, 1, "", "min"], [677, 0, 1, "", "minute"], [678, 0, 1, "", "minutes"], [679, 0, 1, "", "month"], [680, 0, 1, "", "nanosecond"], [681, 0, 1, "", "nanoseconds"], [682, 0, 1, "", "offset_by"], [683, 0, 1, "", "ordinal_day"], [684, 0, 1, "", "quarter"], [685, 0, 1, "", "second"], [686, 0, 1, "", "seconds"], [687, 0, 1, "", "strftime"], [688, 0, 1, "", "timestamp"], [689, 0, 1, "", "truncate"], [690, 0, 1, "", "week"], [691, 0, 1, "", "weekday"], [692, 0, 1, "", "with_time_unit"], [693, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[694, 0, 1, "", "arg_max"], [695, 0, 1, "", "arg_min"], [696, 0, 1, "", "concat"], [697, 0, 1, "", "contains"], [698, 0, 1, "", "diff"], [699, 0, 1, "", "eval"], [700, 0, 1, "", "first"], [701, 0, 1, "", "get"], [702, 0, 1, "", "head"], [703, 0, 1, "", "join"], [704, 0, 1, "", "last"], [705, 0, 1, "", "lengths"], [706, 0, 1, "", "max"], [707, 0, 1, "", "mean"], [708, 0, 1, "", "min"], [709, 0, 1, "", "reverse"], [710, 0, 1, "", "shift"], [711, 0, 1, "", "slice"], [712, 0, 1, "", "sort"], [713, 0, 1, "", "sum"], [714, 0, 1, "", "tail"], [715, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[716, 0, 1, "", "concat"], [717, 0, 1, "", "contains"], [718, 0, 1, "", "count_match"], [719, 0, 1, "", "decode"], [720, 0, 1, "", "encode"], [721, 0, 1, "", "ends_with"], [722, 0, 1, "", "extract"], [723, 0, 1, "", "extract_all"], [724, 0, 1, "", "json_path_match"], [725, 0, 1, "", "lengths"], [726, 0, 1, "", "ljust"], [727, 0, 1, "", "lstrip"], [728, 0, 1, "", "replace"], [729, 0, 1, "", "replace_all"], [730, 0, 1, "", "rjust"], [731, 0, 1, "", "rstrip"], [732, 0, 1, "", "slice"], [733, 0, 1, "", "split"], [734, 0, 1, "", "split_exact"], [735, 0, 1, "", "splitn"], [736, 0, 1, "", "starts_with"], [737, 0, 1, "", "strip"], [738, 0, 1, "", "strptime"], [739, 0, 1, "", "to_lowercase"], [740, 0, 1, "", "to_uppercase"], [741, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[742, 0, 1, "", "field"], [743, 2, 1, "", "fields"], [744, 0, 1, "", "rename_fields"], [745, 0, 1, "", "to_frame"]], "polars.testing": [[779, 3, 1, "", "assert_frame_equal"], [780, 3, 1, "", "assert_series_equal"], [781, 1, 1, "", "column"], [782, 3, 1, "", "columns"], [783, 3, 1, "", "dataframes"], [784, 3, 1, "", "series"]], "polars.testing.column": [[781, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 789, 794], "set_ascii_t": 1, "set_fmt_str_length": 2, "set_global_string_cach": 3, "set_tbl_cell_align": 4, "set_tbl_change_column_data_type_position_format": 5, "set_tbl_col": 6, "set_tbl_format": 7, "set_tbl_hide_column_data_typ": 8, "set_tbl_hide_column_nam": 9, "set_tbl_hide_column_separ": 10, "set_tbl_hide_dataframe_shap": 11, "set_tbl_row": 12, "set_tbl_width_char": 13, "set_utf8_t": 14, "unset_global_string_cach": 15, "datafram": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 783, 790], "appli": [17, 117, 323, 476, 549, 657, 790, 793, 797], "clear": [18, 257, 341], "clone": [19, 258, 345], "column": [20, 260, 781, 782, 793], "describ": [21, 353], "drop": [22, 263], "drop_in_plac": 23, "drop_nul": [24, 149, 264, 357], "dtype": [25, 265, 359], "estimated_s": [26, 361], "explod": [27, 157, 266, 366], "extend": 28, "fill_nan": [29, 159, 268, 368], "fill_nul": [30, 160, 269, 369], "filter": [31, 161, 270, 370], "find_idx_by_nam": 32, "fold": [33, 536], "frame_equ": 34, "get_column": [35, 36], "groupbi": [37, 273, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 656, 657, 658, 659, 790, 797], "groupby_dynam": [38, 274], "groupby_rol": [39, 275], "hash_row": 40, "head": [41, 167, 276, 375, 546, 552, 609, 658, 702], "height": 42, "hstack": 43, "insert_at_idx": 44, "interpol": [45, 169, 278, 377], "is_dupl": [46, 171, 380], "is_empti": [47, 381], "is_uniqu": [48, 181, 392], "join": [49, 279, 610, 703], "join_asof": [50, 280], "lazi": [51, 794], "limit": [52, 186, 282, 396], "max": [53, 193, 284, 399, 554, 566, 613, 669, 706, 749], "mean": [54, 194, 285, 400, 555, 567, 614, 670, 707, 750], "median": [55, 195, 286, 401, 556, 568, 671, 751], "melt": [56, 287], "min": [57, 196, 288, 402, 557, 569, 615, 676, 708, 752], "n_chunk": [58, 404], "null_count": [59, 201, 409], "partition_bi": 60, "pipe": [61, 289], "pivot": [62, 559, 563, 564, 565, 566, 567, 568, 569, 570, 790], "product": [63, 206, 413], "quantil": [64, 207, 291, 414, 560, 755], "rechunk": [65, 209, 416], "renam": [66, 293, 418], "replac": [67, 640, 728], "replace_at_idx": 68, "revers": [69, 213, 294, 420, 616, 709], "row": [70, 71], "sampl": [72, 225, 432], "schema": [73, 295], "select": [74, 296, 772, 790, 793, 797, 798], "shape": [75, 438], "shift": [76, 228, 297, 439, 617, 710], "shift_and_fil": [77, 229, 298, 440], "shrink_to_fit": [78, 441], "slice": [79, 235, 300, 447, 618, 644, 711, 732], "sort": [80, 236, 301, 448, 619, 712], "std": [81, 239, 302, 450, 775], "sum": [82, 242, 303, 452, 561, 570, 620, 713, 777], "tail": [83, 243, 304, 453, 562, 621, 659, 714, 778], "take_everi": [84, 245, 305, 455], "to_arrow": [85, 459], "to_dict": [86, 87], "to_dummi": [88, 460], "to_numpi": [89, 463], "to_panda": [90, 464], "to_seri": 91, "to_struct": [92, 622], "transpos": 93, "uniqu": [94, 250, 306, 467, 623, 715], "unnest": [95, 307], "unstack": 96, "upsampl": 97, "var": [98, 254, 308, 470, 787], "vstack": 99, "width": 100, "with_column": [101, 102, 309, 310], "with_row_count": [103, 312], "write_avro": 104, "write_csv": 105, "write_ipc": 106, "write_json": [107, 313], "write_ndjson": 108, "write_parquet": 109, "expr": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655], "ab": [111, 318], "agg_group": 112, "alia": [113, 319], "all": [114, 320, 474], "ani": [115, 321, 475], "append": [116, 322], "arcco": [118, 324], "arccosh": [119, 325], "arcsin": [120, 326], "arcsinh": [121, 327], "arctan": [122, 328], "arctanh": [123, 329], "arg_max": [124, 330, 601, 694], "arg_min": [125, 331, 602, 695], "arg_sort": [126, 332], "arg_uniqu": [127, 334], "argsort": [128, 335], "arr": [129, 336], "backward_fil": 130, "cast": [131, 337], "cat": [132, 338], "ceil": [133, 339], "clip": [134, 342], "clip_max": [135, 343], "clip_min": [136, 344], "co": [137, 346], "cosh": [138, 347], "count": [139, 487, 550, 563], "cumcount": 140, "cummax": [141, 348], "cummin": [142, 349], "cumprod": [143, 350], "cumsum": [144, 351, 490], "cumulative_ev": [145, 352], "diff": [146, 354, 605, 698], "dot": [147, 355], "drop_nan": [148, 356], "dt": [150, 358], "entropi": [151, 360], "ewm_mean": [152, 362], "ewm_std": [153, 363], "ewm_var": [154, 364], "exclud": [155, 534], "exp": [156, 365], "extend_const": [158, 367], "first": [162, 271, 535, 551, 564, 607, 700], "flatten": 163, "floor": [164, 372], "forward_fil": 165, "hash": [166, 374], "inspect": [168, 277], "is_between": 170, "is_finit": [172, 382], "is_first": [173, 383], "is_in": [174, 385], "is_infinit": [175, 386], "is_nan": [176, 387], "is_not": 177, "is_not_nan": [178, 388], "is_not_nul": [179, 389], "is_nul": [180, 390], "keep_nam": 182, "kurtosi": [183, 394], "last": [184, 281, 553, 565, 611, 704], "len": [185, 395], "list": [187, 505, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 746, 793, 798], "log": [188, 397], "log10": [189, 398], "lower_bound": 190, "map": [191, 283, 748], "map_alia": 192, "mode": [197, 403], "n_uniqu": [198, 405, 558, 753], "nan_max": [199, 407], "nan_min": [200, 408], "over": 202, "pct_chang": [203, 410], "pow": 204, "prefix": 205, "rank": [208, 415], "reinterpret": [210, 417], "repeat_bi": 211, "reshap": [212, 419], "rolling_appli": [214, 421], "rolling_max": [215, 422], "rolling_mean": [216, 423], "rolling_median": [217, 424], "rolling_min": [218, 425], "rolling_quantil": [219, 426], "rolling_skew": [220, 427], "rolling_std": [221, 428], "rolling_sum": [222, 429], "rolling_var": [223, 430], "round": [224, 431], "search_sort": [226, 433], "set_sort": [227, 437], "shuffl": [230, 442], "sign": [231, 443], "sin": [232, 444], "sinh": [233, 445], "skew": [234, 446], "sort_bi": 237, "sqrt": [238, 449], "str": [240, 451], "suffix": 241, "take": [244, 454], "tan": [246, 456], "tanh": [247, 457], "to_phys": [248, 465], "top_k": [249, 466], "unique_count": [251, 468], "upper_bound": 252, "value_count": [253, 469], "where": 255, "lazyfram": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 656, 657, 658, 659, 797], "cach": 256, "collect": 259, "describe_optimized_plan": 261, "describe_plan": 262, "fetch": 267, "from_json": 272, "profil": 290, "read_json": [292, 761], "show_graph": 299, "with_context": 311, "sqlcontext": [314, 315, 316], "execut": 314, "queri": 315, "regist": 316, "seri": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 784, 798], "arg_tru": 333, "chunk_length": 340, "flag": 371, "has_valid": 373, "inner_dtyp": 376, "is_boolean": 378, "is_datelik": 379, "is_float": 384, "is_numer": 391, "is_utf8": 393, "name": [406, 793], "peak_max": 411, "peak_min": 412, "series_equ": 434, "set": 435, "set_at_idx": 436, "time_unit": 458, "to_fram": [461, 745], "to_list": 462, "view": 471, "zip_with": 472, "stringcach": 473, "arang": 477, "arg_wher": 478, "argsort_bi": 479, "avg": 480, "coalesc": 481, "col": 482, "collect_al": 483, "concat": [484, 603, 628, 696, 716], "concat_list": 485, "concat_str": 486, "cov": 488, "cumfold": 489, "cut": 491, "datatyp": [492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "binari": 492, "boolean": [493, 793, 798], "categor": [494, 571, 660], "date": [496, 517, 791], "datetim": [497, 519, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693], "durat": [498, 520], "float32": 499, "float64": 500, "int16": 501, "int32": 502, "int64": 503, "int8": 504, "null": 506, "object": 507, "struct": [508, 654, 655, 742, 743, 744, 745, 776, 793, 798], "time": [509, 791], "uint16": 510, "uint32": 511, "uint64": 512, "uint8": 513, "unknown": 514, "utf8": 515, "get_idx_typ": 516, "date_rang": 518, "element": 521, "except": [522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 792], "arrowerror": 522, "computeerror": 523, "duplicateerror": 524, "invalidoperationerror": 525, "nodataerror": 526, "norowsreturn": 527, "notfounderror": 528, "panicexcept": 529, "rowsexcept": 530, "schemaerror": 531, "shapeerror": 532, "toomanyrowsreturn": 533, "format": 537, "from_arrow": 538, "from_dict": [539, 540], "from_numpi": 541, "from_panda": 542, "from_record": 543, "get_dummi": 544, "group": 545, "intern": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745], "agg": [547, 656], "agg_list": 548, "pivotop": [563, 564, 565, 566, 567, 568, 569, 570], "exprcatnamespac": 571, "set_ord": [571, 660], "exprdatetimenamespac": [572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "cast_time_unit": [572, 661], "cast_time_zon": [573, 662], "dai": [574, 575, 663, 664], "epoch": [576, 665], "hour": [577, 578, 666, 667], "iso_year": [579, 668], "microsecond": [580, 581, 672, 673], "millisecond": [582, 583, 674, 675], "minut": [584, 585, 677, 678], "month": [586, 679], "nanosecond": [587, 588, 680, 681], "offset_bi": [589, 682], "ordinal_dai": [590, 683], "quarter": [591, 684], "second": [592, 593, 685, 686], "strftime": [594, 687], "timestamp": [595, 688], "truncat": [596, 689], "week": [597, 690], "weekdai": [598, 691], "with_time_unit": [599, 692], "year": [600, 693], "exprlistnamespac": [601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623], "contain": [604, 629, 697, 717], "eval": [606, 699], "get": [608, 701], "length": [612, 637, 705, 725], "meta": [624, 625, 626, 627, 793], "exprmetanamespac": [624, 625, 626, 627], "output_nam": 624, "pop": 625, "root_nam": 626, "undo_alias": 627, "string": [628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 793, 798], "exprstringnamespac": [628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653], "count_match": [630, 718], "decod": [631, 719], "encod": [632, 720], "ends_with": [633, 721], "extract": [634, 722], "extract_al": [635, 723], "json_path_match": [636, 724], "ljust": [638, 726], "lstrip": [639, 727], "replace_al": [641, 729], "rjust": [642, 730], "rstrip": [643, 731], "split": [645, 733], "split_exact": [646, 734], "splitn": [647, 735], "starts_with": [648, 736], "strip": [649, 737], "strptime": [650, 738], "to_lowercas": [651, 739], "to_uppercas": [652, 740], "zfill": [653, 741], "exprstructnamespac": [654, 655], "field": [654, 742, 743], "rename_field": [655, 744], "lazygroupbi": [656, 657, 658, 659], "catnamespac": 660, "datetimenamespac": [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693], "listnamespac": [694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "stringnamespac": [716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741], "structnamespac": [742, 743, 744, 745], "lit": 747, "pearson_corr": 754, "read_avro": 756, "read_csv": 757, "read_excel": 758, "read_ipc": 759, "read_ipc_schema": 760, "read_ndjson": 762, "read_parquet": 763, "read_parquet_schema": 764, "read_sql": 765, "repeat": 766, "scan_csv": 767, "scan_d": 768, "scan_ipc": 769, "scan_ndjson": 770, "scan_parquet": 771, "show_vers": 773, "spearman_rank_corr": 774, "test": [779, 780, 781, 782, 783, 784, 800], "assert_frame_equ": 779, "assert_series_equ": 780, "threadpool_s": 785, "toggle_string_cach": 786, "when": 788, "constructor": [790, 793, 798], "attribut": [790, 793, 797, 798], "convers": [790, 794, 797, 798], "aggreg": [790, 793, 797, 798], "descript": [790, 797, 798], "stat": [790, 797, 798], "comput": [790, 793, 798], "manipul": [790, 793, 797, 798], "variou": [790, 793, 797, 798], "data": 791, "type": 791, "numer": 791, "nest": 791, "other": 791, "function": [791, 793, 794], "express": 793, "window": 793, "timeseri": [793, 798], "categori": [793, 798], "eager": 794, "parallel": 794, "api": 795, "refer": 795, "input": 796, "output": 796, "csv": 796, "feather": 796, "ipc": 796, "parquet": 796, "sql": [796, 799], "json": 796, "avro": 796, "excel": 796, "dataset": 796, "method": 799, "assert": 800, "properti": 800, "base": 800, "strategi": 800, "helper": 800, "util": 801}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.set_ascii_tables": [[1, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_str_lengths": [[2, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_global_string_cache": [[3, "polars-config-set-global-string-cache"]], "polars.Config.set_tbl_cell_alignment": [[4, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_change_column_data_type_position_format": [[5, "polars-config-set-tbl-change-column-data-type-position-format"]], "polars.Config.set_tbl_cols": [[6, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_formatting": [[7, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[8, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[9, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_column_separator": [[10, "polars-config-set-tbl-hide-column-separator"]], "polars.Config.set_tbl_hide_dataframe_shape": [[11, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_rows": [[12, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[13, "polars-config-set-tbl-width-chars"]], "polars.Config.set_utf8_tables": [[14, "polars-config-set-utf8-tables"]], "polars.Config.unset_global_string_cache": [[15, "polars-config-unset-global-string-cache"]], "polars.DataFrame": [[16, "polars-dataframe"]], "polars.DataFrame.apply": [[17, "polars-dataframe-apply"]], "polars.DataFrame.cleared": [[18, "polars-dataframe-cleared"]], "polars.DataFrame.clone": [[19, "polars-dataframe-clone"]], "polars.DataFrame.columns": [[20, "polars-dataframe-columns"]], "polars.DataFrame.describe": [[21, "polars-dataframe-describe"]], "polars.DataFrame.drop": [[22, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[23, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[24, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[25, "polars-dataframe-dtypes"]], "polars.DataFrame.estimated_size": [[26, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[27, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[28, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[29, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[30, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[31, "polars-dataframe-filter"]], "polars.DataFrame.find_idx_by_name": [[32, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.fold": [[33, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[34, "polars-dataframe-frame-equal"]], "polars.DataFrame.get_column": [[35, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[36, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby": [[37, "polars-dataframe-groupby"]], "polars.DataFrame.groupby_dynamic": [[38, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.groupby_rolling": [[39, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[40, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[41, "polars-dataframe-head"]], "polars.DataFrame.height": [[42, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[43, "polars-dataframe-hstack"]], "polars.DataFrame.insert_at_idx": [[44, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.interpolate": [[45, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[46, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[47, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[48, "polars-dataframe-is-unique"]], "polars.DataFrame.join": [[49, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[50, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[51, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[52, "polars-dataframe-limit"]], "polars.DataFrame.max": [[53, "polars-dataframe-max"]], "polars.DataFrame.mean": [[54, "polars-dataframe-mean"]], "polars.DataFrame.median": [[55, "polars-dataframe-median"]], "polars.DataFrame.melt": [[56, "polars-dataframe-melt"]], "polars.DataFrame.min": [[57, "polars-dataframe-min"]], "polars.DataFrame.n_chunks": [[58, "polars-dataframe-n-chunks"]], "polars.DataFrame.null_count": [[59, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[60, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[61, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[62, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[63, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[64, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[65, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[66, "polars-dataframe-rename"]], "polars.DataFrame.replace": [[67, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[68, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.reverse": [[69, "polars-dataframe-reverse"]], "polars.DataFrame.row": [[70, "polars-dataframe-row"]], "polars.DataFrame.rows": [[71, "polars-dataframe-rows"]], "polars.DataFrame.sample": [[72, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[73, "polars-dataframe-schema"]], "polars.DataFrame.select": [[74, "polars-dataframe-select"]], "polars.DataFrame.shape": [[75, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[76, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[77, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shrink_to_fit": [[78, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[79, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[80, "polars-dataframe-sort"]], "polars.DataFrame.std": [[81, "polars-dataframe-std"]], "polars.DataFrame.sum": [[82, "polars-dataframe-sum"]], "polars.DataFrame.tail": [[83, "polars-dataframe-tail"]], "polars.DataFrame.take_every": [[84, "polars-dataframe-take-every"]], "polars.DataFrame.to_arrow": [[85, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[86, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[87, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[88, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_numpy": [[89, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[90, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[91, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[92, "polars-dataframe-to-struct"]], "polars.DataFrame.transpose": [[93, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[94, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[95, "polars-dataframe-unnest"]], "polars.DataFrame.unstack": [[96, "polars-dataframe-unstack"]], "polars.DataFrame.upsample": [[97, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[98, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[99, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[100, "polars-dataframe-width"]], "polars.DataFrame.with_column": [[101, "polars-dataframe-with-column"]], "polars.DataFrame.with_columns": [[102, "polars-dataframe-with-columns"]], "polars.DataFrame.with_row_count": [[103, "polars-dataframe-with-row-count"]], "polars.DataFrame.write_avro": [[104, "polars-dataframe-write-avro"]], "polars.DataFrame.write_csv": [[105, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[106, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[107, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[108, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[109, "polars-dataframe-write-parquet"]], "polars.Expr": [[110, "polars-expr"]], "polars.Expr.abs": [[111, "polars-expr-abs"]], "polars.Expr.agg_groups": [[112, "polars-expr-agg-groups"]], "polars.Expr.alias": [[113, "polars-expr-alias"]], "polars.Expr.all": [[114, "polars-expr-all"]], "polars.Expr.any": [[115, "polars-expr-any"]], "polars.Expr.append": [[116, "polars-expr-append"]], "polars.Expr.apply": [[117, "polars-expr-apply"]], "polars.Expr.arccos": [[118, "polars-expr-arccos"]], "polars.Expr.arccosh": [[119, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[120, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[121, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[122, "polars-expr-arctan"]], "polars.Expr.arctanh": [[123, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[124, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[125, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[126, "polars-expr-arg-sort"]], "polars.Expr.arg_unique": [[127, "polars-expr-arg-unique"]], "polars.Expr.argsort": [[128, "polars-expr-argsort"]], "polars.Expr.arr": [[129, "polars-expr-arr"]], "polars.Expr.backward_fill": [[130, "polars-expr-backward-fill"]], "polars.Expr.cast": [[131, "polars-expr-cast"]], "polars.Expr.cat": [[132, "polars-expr-cat"]], "polars.Expr.ceil": [[133, "polars-expr-ceil"]], "polars.Expr.clip": [[134, "polars-expr-clip"]], "polars.Expr.clip_max": [[135, "polars-expr-clip-max"]], "polars.Expr.clip_min": [[136, "polars-expr-clip-min"]], "polars.Expr.cos": [[137, "polars-expr-cos"]], "polars.Expr.cosh": [[138, "polars-expr-cosh"]], "polars.Expr.count": [[139, "polars-expr-count"]], "polars.Expr.cumcount": [[140, "polars-expr-cumcount"]], "polars.Expr.cummax": [[141, "polars-expr-cummax"]], "polars.Expr.cummin": [[142, "polars-expr-cummin"]], "polars.Expr.cumprod": [[143, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[144, "polars-expr-cumsum"]], "polars.Expr.cumulative_eval": [[145, "polars-expr-cumulative-eval"]], "polars.Expr.diff": [[146, "polars-expr-diff"]], "polars.Expr.dot": [[147, "polars-expr-dot"]], "polars.Expr.drop_nans": [[148, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[149, "polars-expr-drop-nulls"]], "polars.Expr.dt": [[150, "polars-expr-dt"]], "polars.Expr.entropy": [[151, "polars-expr-entropy"]], "polars.Expr.ewm_mean": [[152, "polars-expr-ewm-mean"]], "polars.Expr.ewm_std": [[153, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[154, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[155, "polars-expr-exclude"]], "polars.Expr.exp": [[156, "polars-expr-exp"]], "polars.Expr.explode": [[157, "polars-expr-explode"]], "polars.Expr.extend_constant": [[158, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[159, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[160, "polars-expr-fill-null"]], "polars.Expr.filter": [[161, "polars-expr-filter"]], "polars.Expr.first": [[162, "polars-expr-first"]], "polars.Expr.flatten": [[163, "polars-expr-flatten"]], "polars.Expr.floor": [[164, "polars-expr-floor"]], "polars.Expr.forward_fill": [[165, "polars-expr-forward-fill"]], "polars.Expr.hash": [[166, "polars-expr-hash"]], "polars.Expr.head": [[167, "polars-expr-head"]], "polars.Expr.inspect": [[168, "polars-expr-inspect"]], "polars.Expr.interpolate": [[169, "polars-expr-interpolate"]], "polars.Expr.is_between": [[170, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[171, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[172, "polars-expr-is-finite"]], "polars.Expr.is_first": [[173, "polars-expr-is-first"]], "polars.Expr.is_in": [[174, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[175, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[176, "polars-expr-is-nan"]], "polars.Expr.is_not": [[177, "polars-expr-is-not"]], "polars.Expr.is_not_nan": [[178, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[179, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[180, "polars-expr-is-null"]], "polars.Expr.is_unique": [[181, "polars-expr-is-unique"]], "polars.Expr.keep_name": [[182, "polars-expr-keep-name"]], "polars.Expr.kurtosis": [[183, "polars-expr-kurtosis"]], "polars.Expr.last": [[184, "polars-expr-last"]], "polars.Expr.len": [[185, "polars-expr-len"]], "polars.Expr.limit": [[186, "polars-expr-limit"]], "polars.Expr.list": [[187, "polars-expr-list"]], "polars.Expr.log": [[188, "polars-expr-log"]], "polars.Expr.log10": [[189, "polars-expr-log10"]], "polars.Expr.lower_bound": [[190, "polars-expr-lower-bound"]], "polars.Expr.map": [[191, "polars-expr-map"]], "polars.Expr.map_alias": [[192, "polars-expr-map-alias"]], "polars.Expr.max": [[193, "polars-expr-max"]], "polars.Expr.mean": [[194, "polars-expr-mean"]], "polars.Expr.median": [[195, "polars-expr-median"]], "polars.Expr.min": [[196, "polars-expr-min"]], "polars.Expr.mode": [[197, "polars-expr-mode"]], "polars.Expr.n_unique": [[198, "polars-expr-n-unique"]], "polars.Expr.nan_max": [[199, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[200, "polars-expr-nan-min"]], "polars.Expr.null_count": [[201, "polars-expr-null-count"]], "polars.Expr.over": [[202, "polars-expr-over"]], "polars.Expr.pct_change": [[203, "polars-expr-pct-change"]], "polars.Expr.pow": [[204, "polars-expr-pow"]], "polars.Expr.prefix": [[205, "polars-expr-prefix"]], "polars.Expr.product": [[206, "polars-expr-product"]], "polars.Expr.quantile": [[207, "polars-expr-quantile"]], "polars.Expr.rank": [[208, "polars-expr-rank"]], "polars.Expr.rechunk": [[209, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[210, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[211, "polars-expr-repeat-by"]], "polars.Expr.reshape": [[212, "polars-expr-reshape"]], "polars.Expr.reverse": [[213, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[214, "polars-expr-rolling-apply"]], "polars.Expr.rolling_max": [[215, "polars-expr-rolling-max"]], "polars.Expr.rolling_mean": [[216, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[217, "polars-expr-rolling-median"]], "polars.Expr.rolling_min": [[218, "polars-expr-rolling-min"]], "polars.Expr.rolling_quantile": [[219, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[220, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[221, "polars-expr-rolling-std"]], "polars.Expr.rolling_sum": [[222, "polars-expr-rolling-sum"]], "polars.Expr.rolling_var": [[223, "polars-expr-rolling-var"]], "polars.Expr.round": [[224, "polars-expr-round"]], "polars.Expr.sample": [[225, "polars-expr-sample"]], "polars.Expr.search_sorted": [[226, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[227, "polars-expr-set-sorted"]], "polars.Expr.shift": [[228, "polars-expr-shift"]], "polars.Expr.shift_and_fill": [[229, "polars-expr-shift-and-fill"]], "polars.Expr.shuffle": [[230, "polars-expr-shuffle"]], "polars.Expr.sign": [[231, "polars-expr-sign"]], "polars.Expr.sin": [[232, "polars-expr-sin"]], "polars.Expr.sinh": [[233, "polars-expr-sinh"]], "polars.Expr.skew": [[234, "polars-expr-skew"]], "polars.Expr.slice": [[235, "polars-expr-slice"]], "polars.Expr.sort": [[236, "polars-expr-sort"]], "polars.Expr.sort_by": [[237, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[238, "polars-expr-sqrt"]], "polars.Expr.std": [[239, "polars-expr-std"]], "polars.Expr.str": [[240, "polars-expr-str"]], "polars.Expr.suffix": [[241, "polars-expr-suffix"]], "polars.Expr.sum": [[242, "polars-expr-sum"]], "polars.Expr.tail": [[243, "polars-expr-tail"]], "polars.Expr.take": [[244, "polars-expr-take"]], "polars.Expr.take_every": [[245, "polars-expr-take-every"]], "polars.Expr.tan": [[246, "polars-expr-tan"]], "polars.Expr.tanh": [[247, "polars-expr-tanh"]], "polars.Expr.to_physical": [[248, "polars-expr-to-physical"]], "polars.Expr.top_k": [[249, "polars-expr-top-k"]], "polars.Expr.unique": [[250, "polars-expr-unique"]], "polars.Expr.unique_counts": [[251, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[252, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[253, "polars-expr-value-counts"]], "polars.Expr.var": [[254, "polars-expr-var"]], "polars.Expr.where": [[255, "polars-expr-where"]], "polars.LazyFrame.cache": [[256, "polars-lazyframe-cache"]], "polars.LazyFrame.cleared": [[257, "polars-lazyframe-cleared"]], "polars.LazyFrame.clone": [[258, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[259, "polars-lazyframe-collect"]], "polars.LazyFrame.columns": [[260, "polars-lazyframe-columns"]], "polars.LazyFrame.describe_optimized_plan": [[261, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.describe_plan": [[262, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.drop": [[263, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[264, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[265, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[266, "polars-lazyframe-explode"]], "polars.LazyFrame.fetch": [[267, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[268, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[269, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[270, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[271, "polars-lazyframe-first"]], "polars.LazyFrame.from_json": [[272, "polars-lazyframe-from-json"]], "polars.LazyFrame.groupby": [[273, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_dynamic": [[274, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[275, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.head": [[276, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[277, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[278, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[279, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[280, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[281, "polars-lazyframe-last"]], "polars.LazyFrame.limit": [[282, "polars-lazyframe-limit"]], "polars.LazyFrame.map": [[283, "polars-lazyframe-map"]], "polars.LazyFrame.max": [[284, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[285, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[286, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[287, "polars-lazyframe-melt"]], "polars.LazyFrame.min": [[288, "polars-lazyframe-min"]], "polars.LazyFrame.pipe": [[289, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[290, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[291, "polars-lazyframe-quantile"]], "polars.LazyFrame.read_json": [[292, "polars-lazyframe-read-json"]], "polars.LazyFrame.rename": [[293, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[294, "polars-lazyframe-reverse"]], "polars.LazyFrame.schema": [[295, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[296, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[297, "polars-lazyframe-shift"]], "polars.LazyFrame.shift_and_fill": [[298, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.show_graph": [[299, "polars-lazyframe-show-graph"]], "polars.LazyFrame.slice": [[300, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[301, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[302, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[303, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[304, "polars-lazyframe-tail"]], "polars.LazyFrame.take_every": [[305, "polars-lazyframe-take-every"]], "polars.LazyFrame.unique": [[306, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[307, "polars-lazyframe-unnest"]], "polars.LazyFrame.var": [[308, "polars-lazyframe-var"]], "polars.LazyFrame.with_column": [[309, "polars-lazyframe-with-column"]], "polars.LazyFrame.with_columns": [[310, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_context": [[311, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[312, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.write_json": [[313, "polars-lazyframe-write-json"]], "polars.SQLContext.execute": [[314, "polars-sqlcontext-execute"]], "polars.SQLContext.query": [[315, "polars-sqlcontext-query"]], "polars.SQLContext.register": [[316, "polars-sqlcontext-register"]], "polars.Series": [[317, "polars-series"]], "polars.Series.abs": [[318, "polars-series-abs"]], "polars.Series.alias": [[319, "polars-series-alias"]], "polars.Series.all": [[320, "polars-series-all"]], "polars.Series.any": [[321, "polars-series-any"]], "polars.Series.append": [[322, "polars-series-append"]], "polars.Series.apply": [[323, "polars-series-apply"]], "polars.Series.arccos": [[324, "polars-series-arccos"]], "polars.Series.arccosh": [[325, "polars-series-arccosh"]], "polars.Series.arcsin": [[326, "polars-series-arcsin"]], "polars.Series.arcsinh": [[327, "polars-series-arcsinh"]], "polars.Series.arctan": [[328, "polars-series-arctan"]], "polars.Series.arctanh": [[329, "polars-series-arctanh"]], "polars.Series.arg_max": [[330, "polars-series-arg-max"]], "polars.Series.arg_min": [[331, "polars-series-arg-min"]], "polars.Series.arg_sort": [[332, "polars-series-arg-sort"]], "polars.Series.arg_true": [[333, "polars-series-arg-true"]], "polars.Series.arg_unique": [[334, "polars-series-arg-unique"]], "polars.Series.argsort": [[335, "polars-series-argsort"]], "polars.Series.arr": [[336, "polars-series-arr"]], "polars.Series.cast": [[337, "polars-series-cast"]], "polars.Series.cat": [[338, "polars-series-cat"]], "polars.Series.ceil": [[339, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[340, "polars-series-chunk-lengths"]], "polars.Series.cleared": [[341, "polars-series-cleared"]], "polars.Series.clip": [[342, "polars-series-clip"]], "polars.Series.clip_max": [[343, "polars-series-clip-max"]], "polars.Series.clip_min": [[344, "polars-series-clip-min"]], "polars.Series.clone": [[345, "polars-series-clone"]], "polars.Series.cos": [[346, "polars-series-cos"]], "polars.Series.cosh": [[347, "polars-series-cosh"]], "polars.Series.cummax": [[348, "polars-series-cummax"]], "polars.Series.cummin": [[349, "polars-series-cummin"]], "polars.Series.cumprod": [[350, "polars-series-cumprod"]], "polars.Series.cumsum": [[351, "polars-series-cumsum"]], "polars.Series.cumulative_eval": [[352, "polars-series-cumulative-eval"]], "polars.Series.describe": [[353, "polars-series-describe"]], "polars.Series.diff": [[354, "polars-series-diff"]], "polars.Series.dot": [[355, "polars-series-dot"]], "polars.Series.drop_nans": [[356, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[357, "polars-series-drop-nulls"]], "polars.Series.dt": [[358, "polars-series-dt"]], "polars.Series.dtype": [[359, "polars-series-dtype"]], "polars.Series.entropy": [[360, "polars-series-entropy"]], "polars.Series.estimated_size": [[361, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[362, "polars-series-ewm-mean"]], "polars.Series.ewm_std": [[363, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[364, "polars-series-ewm-var"]], "polars.Series.exp": [[365, "polars-series-exp"]], "polars.Series.explode": [[366, "polars-series-explode"]], "polars.Series.extend_constant": [[367, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[368, "polars-series-fill-nan"]], "polars.Series.fill_null": [[369, "polars-series-fill-null"]], "polars.Series.filter": [[370, "polars-series-filter"]], "polars.Series.flags": [[371, "polars-series-flags"]], "polars.Series.floor": [[372, "polars-series-floor"]], "polars.Series.has_validity": [[373, "polars-series-has-validity"]], "polars.Series.hash": [[374, "polars-series-hash"]], "polars.Series.head": [[375, "polars-series-head"]], "polars.Series.inner_dtype": [[376, "polars-series-inner-dtype"]], "polars.Series.interpolate": [[377, "polars-series-interpolate"]], "polars.Series.is_boolean": [[378, "polars-series-is-boolean"]], "polars.Series.is_datelike": [[379, "polars-series-is-datelike"]], "polars.Series.is_duplicated": [[380, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[381, "polars-series-is-empty"]], "polars.Series.is_finite": [[382, "polars-series-is-finite"]], "polars.Series.is_first": [[383, "polars-series-is-first"]], "polars.Series.is_float": [[384, "polars-series-is-float"]], "polars.Series.is_in": [[385, "polars-series-is-in"]], "polars.Series.is_infinite": [[386, "polars-series-is-infinite"]], "polars.Series.is_nan": [[387, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[388, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[389, "polars-series-is-not-null"]], "polars.Series.is_null": [[390, "polars-series-is-null"]], "polars.Series.is_numeric": [[391, "polars-series-is-numeric"]], "polars.Series.is_unique": [[392, "polars-series-is-unique"]], "polars.Series.is_utf8": [[393, "polars-series-is-utf8"]], "polars.Series.kurtosis": [[394, "polars-series-kurtosis"]], "polars.Series.len": [[395, "polars-series-len"]], "polars.Series.limit": [[396, "polars-series-limit"]], "polars.Series.log": [[397, "polars-series-log"]], "polars.Series.log10": [[398, "polars-series-log10"]], "polars.Series.max": [[399, "polars-series-max"]], "polars.Series.mean": [[400, "polars-series-mean"]], "polars.Series.median": [[401, "polars-series-median"]], "polars.Series.min": [[402, "polars-series-min"]], "polars.Series.mode": [[403, "polars-series-mode"]], "polars.Series.n_chunks": [[404, "polars-series-n-chunks"]], "polars.Series.n_unique": [[405, "polars-series-n-unique"]], "polars.Series.name": [[406, "polars-series-name"]], "polars.Series.nan_max": [[407, "polars-series-nan-max"]], "polars.Series.nan_min": [[408, "polars-series-nan-min"]], "polars.Series.null_count": [[409, "polars-series-null-count"]], "polars.Series.pct_change": [[410, "polars-series-pct-change"]], "polars.Series.peak_max": [[411, "polars-series-peak-max"]], "polars.Series.peak_min": [[412, "polars-series-peak-min"]], "polars.Series.product": [[413, "polars-series-product"]], "polars.Series.quantile": [[414, "polars-series-quantile"]], "polars.Series.rank": [[415, "polars-series-rank"]], "polars.Series.rechunk": [[416, "polars-series-rechunk"]], "polars.Series.reinterpret": [[417, "polars-series-reinterpret"]], "polars.Series.rename": [[418, "polars-series-rename"]], "polars.Series.reshape": [[419, "polars-series-reshape"]], "polars.Series.reverse": [[420, "polars-series-reverse"]], "polars.Series.rolling_apply": [[421, "polars-series-rolling-apply"]], "polars.Series.rolling_max": [[422, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[423, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[424, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[425, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[426, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[427, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[428, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[429, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[430, "polars-series-rolling-var"]], "polars.Series.round": [[431, "polars-series-round"]], "polars.Series.sample": [[432, "polars-series-sample"]], "polars.Series.search_sorted": [[433, "polars-series-search-sorted"]], "polars.Series.series_equal": [[434, "polars-series-series-equal"]], "polars.Series.set": [[435, "polars-series-set"]], "polars.Series.set_at_idx": [[436, "polars-series-set-at-idx"]], "polars.Series.set_sorted": [[437, "polars-series-set-sorted"]], "polars.Series.shape": [[438, "polars-series-shape"]], "polars.Series.shift": [[439, "polars-series-shift"]], "polars.Series.shift_and_fill": [[440, "polars-series-shift-and-fill"]], "polars.Series.shrink_to_fit": [[441, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[442, "polars-series-shuffle"]], "polars.Series.sign": [[443, "polars-series-sign"]], "polars.Series.sin": [[444, "polars-series-sin"]], "polars.Series.sinh": [[445, "polars-series-sinh"]], "polars.Series.skew": [[446, "polars-series-skew"]], "polars.Series.slice": [[447, "polars-series-slice"]], "polars.Series.sort": [[448, "polars-series-sort"]], "polars.Series.sqrt": [[449, "polars-series-sqrt"]], "polars.Series.std": [[450, "polars-series-std"]], "polars.Series.str": [[451, "polars-series-str"]], "polars.Series.sum": [[452, "polars-series-sum"]], "polars.Series.tail": [[453, "polars-series-tail"]], "polars.Series.take": [[454, "polars-series-take"]], "polars.Series.take_every": [[455, "polars-series-take-every"]], "polars.Series.tan": [[456, "polars-series-tan"]], "polars.Series.tanh": [[457, "polars-series-tanh"]], "polars.Series.time_unit": [[458, "polars-series-time-unit"]], "polars.Series.to_arrow": [[459, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[460, "polars-series-to-dummies"]], "polars.Series.to_frame": [[461, "polars-series-to-frame"]], "polars.Series.to_list": [[462, "polars-series-to-list"]], "polars.Series.to_numpy": [[463, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[464, "polars-series-to-pandas"]], "polars.Series.to_physical": [[465, "polars-series-to-physical"]], "polars.Series.top_k": [[466, "polars-series-top-k"]], "polars.Series.unique": [[467, "polars-series-unique"]], "polars.Series.unique_counts": [[468, "polars-series-unique-counts"]], "polars.Series.value_counts": [[469, "polars-series-value-counts"]], "polars.Series.var": [[470, "polars-series-var"]], "polars.Series.view": [[471, "polars-series-view"]], "polars.Series.zip_with": [[472, "polars-series-zip-with"]], "polars.StringCache": [[473, "polars-stringcache"]], "polars.all": [[474, "polars-all"]], "polars.any": [[475, "polars-any"]], "polars.apply": [[476, "polars-apply"]], "polars.arange": [[477, "polars-arange"]], "polars.arg_where": [[478, "polars-arg-where"]], "polars.argsort_by": [[479, "polars-argsort-by"]], "polars.avg": [[480, "polars-avg"]], "polars.coalesce": [[481, "polars-coalesce"]], "polars.col": [[482, "polars-col"]], "polars.collect_all": [[483, "polars-collect-all"]], "polars.concat": [[484, "polars-concat"]], "polars.concat_list": [[485, "polars-concat-list"]], "polars.concat_str": [[486, "polars-concat-str"]], "polars.count": [[487, "polars-count"]], "polars.cov": [[488, "polars-cov"]], "polars.cumfold": [[489, "polars-cumfold"]], "polars.cumsum": [[490, "polars-cumsum"]], "polars.cut": [[491, "polars-cut"]], "polars.datatypes.Binary": [[492, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[493, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[494, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[495, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[496, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[497, "polars-datatypes-datetime"]], "polars.datatypes.Duration": [[498, "polars-datatypes-duration"]], "polars.datatypes.Float32": [[499, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[500, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[501, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[502, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[503, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[504, "polars-datatypes-int8"]], "polars.datatypes.List": [[505, "polars-datatypes-list"]], "polars.datatypes.Null": [[506, "polars-datatypes-null"]], "polars.datatypes.Object": [[507, "polars-datatypes-object"]], "polars.datatypes.Struct": [[508, "polars-datatypes-struct"]], "polars.datatypes.Time": [[509, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[510, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[511, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[512, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[513, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[514, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[515, "polars-datatypes-utf8"]], "polars.datatypes.get_idx_type": [[516, "polars-datatypes-get-idx-type"]], "polars.date": [[517, "polars-date"]], "polars.date_range": [[518, "polars-date-range"]], "polars.datetime": [[519, "polars-datetime"]], "polars.duration": [[520, "polars-duration"]], "polars.element": [[521, "polars-element"]], "polars.exceptions.ArrowError": [[522, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[523, "polars-exceptions-computeerror"]], "polars.exceptions.DuplicateError": [[524, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[525, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.NoDataError": [[526, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturned": [[527, "polars-exceptions-norowsreturned"]], "polars.exceptions.NotFoundError": [[528, "polars-exceptions-notfounderror"]], "polars.exceptions.PanicException": [[529, "polars-exceptions-panicexception"]], "polars.exceptions.RowsException": [[530, "polars-exceptions-rowsexception"]], "polars.exceptions.SchemaError": [[531, "polars-exceptions-schemaerror"]], "polars.exceptions.ShapeError": [[532, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[533, "polars-exceptions-toomanyrowsreturned"]], "polars.exclude": [[534, "polars-exclude"]], "polars.first": [[535, "polars-first"]], "polars.fold": [[536, "polars-fold"]], "polars.format": [[537, "polars-format"]], "polars.from_arrow": [[538, "polars-from-arrow"]], "polars.from_dict": [[539, "polars-from-dict"]], "polars.from_dicts": [[540, "polars-from-dicts"]], "polars.from_numpy": [[541, "polars-from-numpy"]], "polars.from_pandas": [[542, "polars-from-pandas"]], "polars.from_records": [[543, "polars-from-records"]], "polars.get_dummies": [[544, "polars-get-dummies"]], "polars.groups": [[545, "polars-groups"]], "polars.head": [[546, "polars-head"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[547, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[548, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[549, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.count": [[550, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.groupby.GroupBy.first": [[551, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.head": [[552, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.last": [[553, "polars-internals-dataframe-groupby-groupby-last"]], "polars.internals.dataframe.groupby.GroupBy.max": [[554, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[555, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.median": [[556, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.min": [[557, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[558, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[559, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[560, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[561, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[562, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.pivot.PivotOps.count": [[563, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.pivot.PivotOps.first": [[564, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.pivot.PivotOps.last": [[565, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.pivot.PivotOps.max": [[566, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[567, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.internals.dataframe.pivot.PivotOps.median": [[568, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.internals.dataframe.pivot.PivotOps.min": [[569, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[570, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering": [[571, "polars-internals-expr-categorical-exprcatnamespace-set-ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit": [[572, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone": [[573, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-zone"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.day": [[574, "polars-internals-expr-datetime-exprdatetimenamespace-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.days": [[575, "polars-internals-expr-datetime-exprdatetimenamespace-days"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch": [[576, "polars-internals-expr-datetime-exprdatetimenamespace-epoch"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour": [[577, "polars-internals-expr-datetime-exprdatetimenamespace-hour"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours": [[578, "polars-internals-expr-datetime-exprdatetimenamespace-hours"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year": [[579, "polars-internals-expr-datetime-exprdatetimenamespace-iso-year"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond": [[580, "polars-internals-expr-datetime-exprdatetimenamespace-microsecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds": [[581, "polars-internals-expr-datetime-exprdatetimenamespace-microseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond": [[582, "polars-internals-expr-datetime-exprdatetimenamespace-millisecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds": [[583, "polars-internals-expr-datetime-exprdatetimenamespace-milliseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute": [[584, "polars-internals-expr-datetime-exprdatetimenamespace-minute"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes": [[585, "polars-internals-expr-datetime-exprdatetimenamespace-minutes"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.month": [[586, "polars-internals-expr-datetime-exprdatetimenamespace-month"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond": [[587, "polars-internals-expr-datetime-exprdatetimenamespace-nanosecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds": [[588, "polars-internals-expr-datetime-exprdatetimenamespace-nanoseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by": [[589, "polars-internals-expr-datetime-exprdatetimenamespace-offset-by"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day": [[590, "polars-internals-expr-datetime-exprdatetimenamespace-ordinal-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter": [[591, "polars-internals-expr-datetime-exprdatetimenamespace-quarter"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.second": [[592, "polars-internals-expr-datetime-exprdatetimenamespace-second"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds": [[593, "polars-internals-expr-datetime-exprdatetimenamespace-seconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime": [[594, "polars-internals-expr-datetime-exprdatetimenamespace-strftime"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp": [[595, "polars-internals-expr-datetime-exprdatetimenamespace-timestamp"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate": [[596, "polars-internals-expr-datetime-exprdatetimenamespace-truncate"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.week": [[597, "polars-internals-expr-datetime-exprdatetimenamespace-week"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday": [[598, "polars-internals-expr-datetime-exprdatetimenamespace-weekday"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit": [[599, "polars-internals-expr-datetime-exprdatetimenamespace-with-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.year": [[600, "polars-internals-expr-datetime-exprdatetimenamespace-year"]], "polars.internals.expr.list.ExprListNameSpace.arg_max": [[601, "polars-internals-expr-list-exprlistnamespace-arg-max"]], "polars.internals.expr.list.ExprListNameSpace.arg_min": [[602, "polars-internals-expr-list-exprlistnamespace-arg-min"]], "polars.internals.expr.list.ExprListNameSpace.concat": [[603, "polars-internals-expr-list-exprlistnamespace-concat"]], "polars.internals.expr.list.ExprListNameSpace.contains": [[604, "polars-internals-expr-list-exprlistnamespace-contains"]], "polars.internals.expr.list.ExprListNameSpace.diff": [[605, "polars-internals-expr-list-exprlistnamespace-diff"]], "polars.internals.expr.list.ExprListNameSpace.eval": [[606, "polars-internals-expr-list-exprlistnamespace-eval"]], "polars.internals.expr.list.ExprListNameSpace.first": [[607, "polars-internals-expr-list-exprlistnamespace-first"]], "polars.internals.expr.list.ExprListNameSpace.get": [[608, "polars-internals-expr-list-exprlistnamespace-get"]], "polars.internals.expr.list.ExprListNameSpace.head": [[609, "polars-internals-expr-list-exprlistnamespace-head"]], "polars.internals.expr.list.ExprListNameSpace.join": [[610, "polars-internals-expr-list-exprlistnamespace-join"]], "polars.internals.expr.list.ExprListNameSpace.last": [[611, "polars-internals-expr-list-exprlistnamespace-last"]], "polars.internals.expr.list.ExprListNameSpace.lengths": [[612, "polars-internals-expr-list-exprlistnamespace-lengths"]], "polars.internals.expr.list.ExprListNameSpace.max": [[613, "polars-internals-expr-list-exprlistnamespace-max"]], "polars.internals.expr.list.ExprListNameSpace.mean": [[614, "polars-internals-expr-list-exprlistnamespace-mean"]], "polars.internals.expr.list.ExprListNameSpace.min": [[615, "polars-internals-expr-list-exprlistnamespace-min"]], "polars.internals.expr.list.ExprListNameSpace.reverse": [[616, "polars-internals-expr-list-exprlistnamespace-reverse"]], "polars.internals.expr.list.ExprListNameSpace.shift": [[617, "polars-internals-expr-list-exprlistnamespace-shift"]], "polars.internals.expr.list.ExprListNameSpace.slice": [[618, "polars-internals-expr-list-exprlistnamespace-slice"]], "polars.internals.expr.list.ExprListNameSpace.sort": [[619, "polars-internals-expr-list-exprlistnamespace-sort"]], "polars.internals.expr.list.ExprListNameSpace.sum": [[620, "polars-internals-expr-list-exprlistnamespace-sum"]], "polars.internals.expr.list.ExprListNameSpace.tail": [[621, "polars-internals-expr-list-exprlistnamespace-tail"]], "polars.internals.expr.list.ExprListNameSpace.to_struct": [[622, "polars-internals-expr-list-exprlistnamespace-to-struct"]], "polars.internals.expr.list.ExprListNameSpace.unique": [[623, "polars-internals-expr-list-exprlistnamespace-unique"]], "polars.internals.expr.meta.ExprMetaNameSpace.output_name": [[624, "polars-internals-expr-meta-exprmetanamespace-output-name"]], "polars.internals.expr.meta.ExprMetaNameSpace.pop": [[625, "polars-internals-expr-meta-exprmetanamespace-pop"]], "polars.internals.expr.meta.ExprMetaNameSpace.root_names": [[626, "polars-internals-expr-meta-exprmetanamespace-root-names"]], "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases": [[627, "polars-internals-expr-meta-exprmetanamespace-undo-aliases"]], "polars.internals.expr.string.ExprStringNameSpace.concat": [[628, "polars-internals-expr-string-exprstringnamespace-concat"]], "polars.internals.expr.string.ExprStringNameSpace.contains": [[629, "polars-internals-expr-string-exprstringnamespace-contains"]], "polars.internals.expr.string.ExprStringNameSpace.count_match": [[630, "polars-internals-expr-string-exprstringnamespace-count-match"]], "polars.internals.expr.string.ExprStringNameSpace.decode": [[631, "polars-internals-expr-string-exprstringnamespace-decode"]], "polars.internals.expr.string.ExprStringNameSpace.encode": [[632, "polars-internals-expr-string-exprstringnamespace-encode"]], "polars.internals.expr.string.ExprStringNameSpace.ends_with": [[633, "polars-internals-expr-string-exprstringnamespace-ends-with"]], "polars.internals.expr.string.ExprStringNameSpace.extract": [[634, "polars-internals-expr-string-exprstringnamespace-extract"]], "polars.internals.expr.string.ExprStringNameSpace.extract_all": [[635, "polars-internals-expr-string-exprstringnamespace-extract-all"]], "polars.internals.expr.string.ExprStringNameSpace.json_path_match": [[636, "polars-internals-expr-string-exprstringnamespace-json-path-match"]], "polars.internals.expr.string.ExprStringNameSpace.lengths": [[637, "polars-internals-expr-string-exprstringnamespace-lengths"]], "polars.internals.expr.string.ExprStringNameSpace.ljust": [[638, "polars-internals-expr-string-exprstringnamespace-ljust"]], "polars.internals.expr.string.ExprStringNameSpace.lstrip": [[639, "polars-internals-expr-string-exprstringnamespace-lstrip"]], "polars.internals.expr.string.ExprStringNameSpace.replace": [[640, "polars-internals-expr-string-exprstringnamespace-replace"]], "polars.internals.expr.string.ExprStringNameSpace.replace_all": [[641, "polars-internals-expr-string-exprstringnamespace-replace-all"]], "polars.internals.expr.string.ExprStringNameSpace.rjust": [[642, "polars-internals-expr-string-exprstringnamespace-rjust"]], "polars.internals.expr.string.ExprStringNameSpace.rstrip": [[643, "polars-internals-expr-string-exprstringnamespace-rstrip"]], "polars.internals.expr.string.ExprStringNameSpace.slice": [[644, "polars-internals-expr-string-exprstringnamespace-slice"]], "polars.internals.expr.string.ExprStringNameSpace.split": [[645, "polars-internals-expr-string-exprstringnamespace-split"]], "polars.internals.expr.string.ExprStringNameSpace.split_exact": [[646, "polars-internals-expr-string-exprstringnamespace-split-exact"]], "polars.internals.expr.string.ExprStringNameSpace.splitn": [[647, "polars-internals-expr-string-exprstringnamespace-splitn"]], "polars.internals.expr.string.ExprStringNameSpace.starts_with": [[648, "polars-internals-expr-string-exprstringnamespace-starts-with"]], "polars.internals.expr.string.ExprStringNameSpace.strip": [[649, "polars-internals-expr-string-exprstringnamespace-strip"]], "polars.internals.expr.string.ExprStringNameSpace.strptime": [[650, "polars-internals-expr-string-exprstringnamespace-strptime"]], "polars.internals.expr.string.ExprStringNameSpace.to_lowercase": [[651, "polars-internals-expr-string-exprstringnamespace-to-lowercase"]], "polars.internals.expr.string.ExprStringNameSpace.to_uppercase": [[652, "polars-internals-expr-string-exprstringnamespace-to-uppercase"]], "polars.internals.expr.string.ExprStringNameSpace.zfill": [[653, "polars-internals-expr-string-exprstringnamespace-zfill"]], "polars.internals.expr.struct.ExprStructNameSpace.field": [[654, "polars-internals-expr-struct-exprstructnamespace-field"]], "polars.internals.expr.struct.ExprStructNameSpace.rename_fields": [[655, "polars-internals-expr-struct-exprstructnamespace-rename-fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[656, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[657, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[658, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[659, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.internals.series.categorical.CatNameSpace.set_ordering": [[660, "polars-internals-series-categorical-catnamespace-set-ordering"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit": [[661, "polars-internals-series-datetime-datetimenamespace-cast-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone": [[662, "polars-internals-series-datetime-datetimenamespace-cast-time-zone"]], "polars.internals.series.datetime.DateTimeNameSpace.day": [[663, "polars-internals-series-datetime-datetimenamespace-day"]], "polars.internals.series.datetime.DateTimeNameSpace.days": [[664, "polars-internals-series-datetime-datetimenamespace-days"]], "polars.internals.series.datetime.DateTimeNameSpace.epoch": [[665, "polars-internals-series-datetime-datetimenamespace-epoch"]], "polars.internals.series.datetime.DateTimeNameSpace.hour": [[666, "polars-internals-series-datetime-datetimenamespace-hour"]], "polars.internals.series.datetime.DateTimeNameSpace.hours": [[667, "polars-internals-series-datetime-datetimenamespace-hours"]], "polars.internals.series.datetime.DateTimeNameSpace.iso_year": [[668, "polars-internals-series-datetime-datetimenamespace-iso-year"]], "polars.internals.series.datetime.DateTimeNameSpace.max": [[669, "polars-internals-series-datetime-datetimenamespace-max"]], "polars.internals.series.datetime.DateTimeNameSpace.mean": [[670, "polars-internals-series-datetime-datetimenamespace-mean"]], "polars.internals.series.datetime.DateTimeNameSpace.median": [[671, "polars-internals-series-datetime-datetimenamespace-median"]], "polars.internals.series.datetime.DateTimeNameSpace.microsecond": [[672, "polars-internals-series-datetime-datetimenamespace-microsecond"]], "polars.internals.series.datetime.DateTimeNameSpace.microseconds": [[673, "polars-internals-series-datetime-datetimenamespace-microseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.millisecond": [[674, "polars-internals-series-datetime-datetimenamespace-millisecond"]], "polars.internals.series.datetime.DateTimeNameSpace.milliseconds": [[675, "polars-internals-series-datetime-datetimenamespace-milliseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.min": [[676, "polars-internals-series-datetime-datetimenamespace-min"]], "polars.internals.series.datetime.DateTimeNameSpace.minute": [[677, "polars-internals-series-datetime-datetimenamespace-minute"]], "polars.internals.series.datetime.DateTimeNameSpace.minutes": [[678, "polars-internals-series-datetime-datetimenamespace-minutes"]], "polars.internals.series.datetime.DateTimeNameSpace.month": [[679, "polars-internals-series-datetime-datetimenamespace-month"]], "polars.internals.series.datetime.DateTimeNameSpace.nanosecond": [[680, "polars-internals-series-datetime-datetimenamespace-nanosecond"]], "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds": [[681, "polars-internals-series-datetime-datetimenamespace-nanoseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.offset_by": [[682, "polars-internals-series-datetime-datetimenamespace-offset-by"]], "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day": [[683, "polars-internals-series-datetime-datetimenamespace-ordinal-day"]], "polars.internals.series.datetime.DateTimeNameSpace.quarter": [[684, "polars-internals-series-datetime-datetimenamespace-quarter"]], "polars.internals.series.datetime.DateTimeNameSpace.second": [[685, "polars-internals-series-datetime-datetimenamespace-second"]], "polars.internals.series.datetime.DateTimeNameSpace.seconds": [[686, "polars-internals-series-datetime-datetimenamespace-seconds"]], "polars.internals.series.datetime.DateTimeNameSpace.strftime": [[687, "polars-internals-series-datetime-datetimenamespace-strftime"]], "polars.internals.series.datetime.DateTimeNameSpace.timestamp": [[688, "polars-internals-series-datetime-datetimenamespace-timestamp"]], "polars.internals.series.datetime.DateTimeNameSpace.truncate": [[689, "polars-internals-series-datetime-datetimenamespace-truncate"]], "polars.internals.series.datetime.DateTimeNameSpace.week": [[690, "polars-internals-series-datetime-datetimenamespace-week"]], "polars.internals.series.datetime.DateTimeNameSpace.weekday": [[691, "polars-internals-series-datetime-datetimenamespace-weekday"]], "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit": [[692, "polars-internals-series-datetime-datetimenamespace-with-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.year": [[693, "polars-internals-series-datetime-datetimenamespace-year"]], "polars.internals.series.list.ListNameSpace.arg_max": [[694, "polars-internals-series-list-listnamespace-arg-max"]], "polars.internals.series.list.ListNameSpace.arg_min": [[695, "polars-internals-series-list-listnamespace-arg-min"]], "polars.internals.series.list.ListNameSpace.concat": [[696, "polars-internals-series-list-listnamespace-concat"]], "polars.internals.series.list.ListNameSpace.contains": [[697, "polars-internals-series-list-listnamespace-contains"]], "polars.internals.series.list.ListNameSpace.diff": [[698, "polars-internals-series-list-listnamespace-diff"]], "polars.internals.series.list.ListNameSpace.eval": [[699, "polars-internals-series-list-listnamespace-eval"]], "polars.internals.series.list.ListNameSpace.first": [[700, "polars-internals-series-list-listnamespace-first"]], "polars.internals.series.list.ListNameSpace.get": [[701, "polars-internals-series-list-listnamespace-get"]], "polars.internals.series.list.ListNameSpace.head": [[702, "polars-internals-series-list-listnamespace-head"]], "polars.internals.series.list.ListNameSpace.join": [[703, "polars-internals-series-list-listnamespace-join"]], "polars.internals.series.list.ListNameSpace.last": [[704, "polars-internals-series-list-listnamespace-last"]], "polars.internals.series.list.ListNameSpace.lengths": [[705, "polars-internals-series-list-listnamespace-lengths"]], "polars.internals.series.list.ListNameSpace.max": [[706, "polars-internals-series-list-listnamespace-max"]], "polars.internals.series.list.ListNameSpace.mean": [[707, "polars-internals-series-list-listnamespace-mean"]], "polars.internals.series.list.ListNameSpace.min": [[708, "polars-internals-series-list-listnamespace-min"]], "polars.internals.series.list.ListNameSpace.reverse": [[709, "polars-internals-series-list-listnamespace-reverse"]], "polars.internals.series.list.ListNameSpace.shift": [[710, "polars-internals-series-list-listnamespace-shift"]], "polars.internals.series.list.ListNameSpace.slice": [[711, "polars-internals-series-list-listnamespace-slice"]], "polars.internals.series.list.ListNameSpace.sort": [[712, "polars-internals-series-list-listnamespace-sort"]], "polars.internals.series.list.ListNameSpace.sum": [[713, "polars-internals-series-list-listnamespace-sum"]], "polars.internals.series.list.ListNameSpace.tail": [[714, "polars-internals-series-list-listnamespace-tail"]], "polars.internals.series.list.ListNameSpace.unique": [[715, "polars-internals-series-list-listnamespace-unique"]], "polars.internals.series.string.StringNameSpace.concat": [[716, "polars-internals-series-string-stringnamespace-concat"]], "polars.internals.series.string.StringNameSpace.contains": [[717, "polars-internals-series-string-stringnamespace-contains"]], "polars.internals.series.string.StringNameSpace.count_match": [[718, "polars-internals-series-string-stringnamespace-count-match"]], "polars.internals.series.string.StringNameSpace.decode": [[719, "polars-internals-series-string-stringnamespace-decode"]], "polars.internals.series.string.StringNameSpace.encode": [[720, "polars-internals-series-string-stringnamespace-encode"]], "polars.internals.series.string.StringNameSpace.ends_with": [[721, "polars-internals-series-string-stringnamespace-ends-with"]], "polars.internals.series.string.StringNameSpace.extract": [[722, "polars-internals-series-string-stringnamespace-extract"]], "polars.internals.series.string.StringNameSpace.extract_all": [[723, "polars-internals-series-string-stringnamespace-extract-all"]], "polars.internals.series.string.StringNameSpace.json_path_match": [[724, "polars-internals-series-string-stringnamespace-json-path-match"]], "polars.internals.series.string.StringNameSpace.lengths": [[725, "polars-internals-series-string-stringnamespace-lengths"]], "polars.internals.series.string.StringNameSpace.ljust": [[726, "polars-internals-series-string-stringnamespace-ljust"]], "polars.internals.series.string.StringNameSpace.lstrip": [[727, "polars-internals-series-string-stringnamespace-lstrip"]], "polars.internals.series.string.StringNameSpace.replace": [[728, "polars-internals-series-string-stringnamespace-replace"]], "polars.internals.series.string.StringNameSpace.replace_all": [[729, "polars-internals-series-string-stringnamespace-replace-all"]], "polars.internals.series.string.StringNameSpace.rjust": [[730, "polars-internals-series-string-stringnamespace-rjust"]], "polars.internals.series.string.StringNameSpace.rstrip": [[731, "polars-internals-series-string-stringnamespace-rstrip"]], "polars.internals.series.string.StringNameSpace.slice": [[732, "polars-internals-series-string-stringnamespace-slice"]], "polars.internals.series.string.StringNameSpace.split": [[733, "polars-internals-series-string-stringnamespace-split"]], "polars.internals.series.string.StringNameSpace.split_exact": [[734, "polars-internals-series-string-stringnamespace-split-exact"]], "polars.internals.series.string.StringNameSpace.splitn": [[735, "polars-internals-series-string-stringnamespace-splitn"]], "polars.internals.series.string.StringNameSpace.starts_with": [[736, "polars-internals-series-string-stringnamespace-starts-with"]], "polars.internals.series.string.StringNameSpace.strip": [[737, "polars-internals-series-string-stringnamespace-strip"]], "polars.internals.series.string.StringNameSpace.strptime": [[738, "polars-internals-series-string-stringnamespace-strptime"]], "polars.internals.series.string.StringNameSpace.to_lowercase": [[739, "polars-internals-series-string-stringnamespace-to-lowercase"]], "polars.internals.series.string.StringNameSpace.to_uppercase": [[740, "polars-internals-series-string-stringnamespace-to-uppercase"]], "polars.internals.series.string.StringNameSpace.zfill": [[741, "polars-internals-series-string-stringnamespace-zfill"]], "polars.internals.series.struct.StructNameSpace.field": [[742, "polars-internals-series-struct-structnamespace-field"]], "polars.internals.series.struct.StructNameSpace.fields": [[743, "polars-internals-series-struct-structnamespace-fields"]], "polars.internals.series.struct.StructNameSpace.rename_fields": [[744, "polars-internals-series-struct-structnamespace-rename-fields"]], "polars.internals.series.struct.StructNameSpace.to_frame": [[745, "polars-internals-series-struct-structnamespace-to-frame"]], "polars.list": [[746, "polars-list"]], "polars.lit": [[747, "polars-lit"]], "polars.map": [[748, "polars-map"]], "polars.max": [[749, "polars-max"]], "polars.mean": [[750, "polars-mean"]], "polars.median": [[751, "polars-median"]], "polars.min": [[752, "polars-min"]], "polars.n_unique": [[753, "polars-n-unique"]], "polars.pearson_corr": [[754, "polars-pearson-corr"]], "polars.quantile": [[755, "polars-quantile"]], "polars.read_avro": [[756, "polars-read-avro"]], "polars.read_csv": [[757, "polars-read-csv"]], "polars.read_excel": [[758, "polars-read-excel"]], "polars.read_ipc": [[759, "polars-read-ipc"]], "polars.read_ipc_schema": [[760, "polars-read-ipc-schema"]], "polars.read_json": [[761, "polars-read-json"]], "polars.read_ndjson": [[762, "polars-read-ndjson"]], "polars.read_parquet": [[763, "polars-read-parquet"]], "polars.read_parquet_schema": [[764, "polars-read-parquet-schema"]], "polars.read_sql": [[765, "polars-read-sql"]], "polars.repeat": [[766, "polars-repeat"]], "polars.scan_csv": [[767, "polars-scan-csv"]], "polars.scan_ds": [[768, "polars-scan-ds"]], "polars.scan_ipc": [[769, "polars-scan-ipc"]], "polars.scan_ndjson": [[770, "polars-scan-ndjson"]], "polars.scan_parquet": [[771, "polars-scan-parquet"]], "polars.select": [[772, "polars-select"]], "polars.show_versions": [[773, "polars-show-versions"]], "polars.spearman_rank_corr": [[774, "polars-spearman-rank-corr"]], "polars.std": [[775, "polars-std"]], "polars.struct": [[776, "polars-struct"]], "polars.sum": [[777, "polars-sum"]], "polars.tail": [[778, "polars-tail"]], "polars.testing.assert_frame_equal": [[779, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[780, "polars-testing-assert-series-equal"]], "polars.testing.column": [[781, "polars-testing-column"]], "polars.testing.columns": [[782, "polars-testing-columns"]], "polars.testing.dataframes": [[783, "polars-testing-dataframes"]], "polars.testing.series": [[784, "polars-testing-series"]], "polars.threadpool_size": [[785, "polars-threadpool-size"]], "polars.toggle_string_cache": [[786, "polars-toggle-string-cache"]], "polars.var": [[787, "polars-var"]], "polars.when": [[788, "polars-when"]], "Config": [[789, "config"], [794, "config"]], "DataFrame": [[790, "dataframe"]], "Constructor": [[790, "constructor"], [793, "constructor"], [798, "constructor"]], "Attributes": [[790, "attributes"], [793, "attributes"], [797, "attributes"], [798, "attributes"]], "Conversion": [[790, "conversion"], [794, "conversion"], [797, "conversion"], [798, "conversion"]], "Aggregation": [[790, "aggregation"], [793, "aggregation"], [797, "aggregation"], [798, "aggregation"]], "Descriptive stats": [[790, "descriptive-stats"], [797, "descriptive-stats"], [798, "descriptive-stats"]], "Computations": [[790, "computations"], [793, "computations"], [798, "computations"]], "Manipulation/ selection": [[790, "manipulation-selection"], [793, "manipulation-selection"], [797, "manipulation-selection"], [798, "manipulation-selection"]], "Apply": [[790, "apply"], [793, "apply"], [797, "apply"]], "Various": [[790, "various"], [793, "various"], [797, "various"], [798, "various"]], "GroupBy": [[790, "groupby"], [797, "groupby"]], "Pivot": [[790, "pivot"]], "Data Types": [[791, "data-types"]], "Numeric": [[791, "numeric"]], "Date / Time": [[791, "date-time"]], "Nested": [[791, "nested"]], "Other": [[791, "other"]], "Functions": [[791, "functions"], [793, "functions"], [794, "functions"]], "Exceptions": [[792, "exceptions"]], "Expressions": [[793, "expressions"]], "Boolean": [[793, "boolean"], [798, "boolean"]], "Column names": [[793, "column-names"]], "Window": [[793, "window"]], "TimeSeries": [[793, "timeseries"], [798, "timeseries"]], "Strings": [[793, "strings"], [798, "strings"]], "Lists": [[793, "lists"], [798, "lists"]], "Categories": [[793, "categories"], [798, "categories"]], "Struct": [[793, "struct"], [798, "struct"]], "Meta": [[793, "meta"]], "Eager/Lazy functions": [[794, "eager-lazy-functions"]], "Parallelization": [[794, "parallelization"]], "API reference": [[795, "api-reference"]], "Input/output": [[796, "input-output"]], "CSV": [[796, "csv"]], "Feather/ IPC": [[796, "feather-ipc"]], "Parquet": [[796, "parquet"]], "SQL": [[796, "sql"], [799, "sql"]], "JSON": [[796, "json"]], "AVRO": [[796, "avro"]], "Excel": [[796, "excel"]], "Datasets": [[796, "datasets"]], "LazyFrame": [[797, "lazyframe"]], "Series": [[798, "series"]], "Methods": [[799, "methods"]], "Testing": [[800, "testing"]], "Asserts": [[800, "asserts"]], "Property-based testing": [[800, "property-based-testing"]], "Strategies": [[800, "strategies"]], "Strategy helpers": [[800, "strategy-helpers"]], "Utils": [[801, "utils"]]}, "indexentries": {"set_ascii_tables() (polars.config class method)": [[1, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[2, "polars.Config.set_fmt_str_lengths"]], "set_global_string_cache() (polars.config class method)": [[3, "polars.Config.set_global_string_cache"]], "set_tbl_cell_alignment() (polars.config class method)": [[4, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_change_column_data_type_position_format() (polars.config class method)": [[5, "polars.Config.set_tbl_change_column_data_type_position_format"]], "set_tbl_cols() (polars.config class method)": [[6, "polars.Config.set_tbl_cols"]], "set_tbl_formatting() (polars.config class method)": [[7, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[8, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[9, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_column_separator() (polars.config class method)": [[10, "polars.Config.set_tbl_hide_column_separator"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[11, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_rows() (polars.config class method)": [[12, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[13, "polars.Config.set_tbl_width_chars"]], "set_utf8_tables() (polars.config class method)": [[14, "polars.Config.set_utf8_tables"]], "unset_global_string_cache() (polars.config class method)": [[15, "polars.Config.unset_global_string_cache"]], "dataframe (class in polars)": [[16, "polars.DataFrame"]], "__init__() (polars.dataframe method)": [[16, "polars.DataFrame.__init__"]], "apply() (polars.dataframe method)": [[17, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[18, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[19, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[20, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[21, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[22, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[23, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[24, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[25, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[26, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[27, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[28, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[29, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[30, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[31, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[32, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[33, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[34, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[35, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[36, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[37, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[38, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[39, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[40, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[41, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[42, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[43, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[44, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[45, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[46, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[47, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[48, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[49, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[50, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[51, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[52, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[53, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[54, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[55, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[56, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[57, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[58, "polars.DataFrame.n_chunks"]], "null_count() (polars.dataframe method)": [[59, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[60, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[61, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[62, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[63, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[64, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[65, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[66, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[67, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[68, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[69, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[70, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[71, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[72, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[73, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[74, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[75, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[76, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[77, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[78, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[79, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[80, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[81, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[82, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[83, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[84, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[85, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[86, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[87, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[88, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[89, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[90, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[91, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[92, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[93, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[94, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[95, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[96, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[97, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[98, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[99, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[100, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[101, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[102, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[103, "polars.DataFrame.with_row_count"]], "write_avro() (polars.dataframe method)": [[104, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[105, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[106, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[107, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[108, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[109, "polars.DataFrame.write_parquet"]], "expr (class in polars)": [[110, "polars.Expr"]], "__init__() (polars.expr method)": [[110, "polars.Expr.__init__"]], "abs() (polars.expr method)": [[111, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[112, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[113, "polars.Expr.alias"]], "all() (polars.expr method)": [[114, "polars.Expr.all"]], "any() (polars.expr method)": [[115, "polars.Expr.any"]], "append() (polars.expr method)": [[116, "polars.Expr.append"]], "apply() (polars.expr method)": [[117, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[118, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[119, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[120, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[121, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[122, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[123, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[124, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[125, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[126, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[127, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[128, "polars.Expr.argsort"]], "arr (polars.expr property)": [[129, "polars.Expr.arr"]], "backward_fill() (polars.expr method)": [[130, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[131, "polars.Expr.cast"]], "cat (polars.expr property)": [[132, "polars.Expr.cat"]], "ceil() (polars.expr method)": [[133, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[134, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[135, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[136, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[137, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[138, "polars.Expr.cosh"]], "count() (polars.expr method)": [[139, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[140, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[141, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[142, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[143, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[144, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[145, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[146, "polars.Expr.diff"]], "dot() (polars.expr method)": [[147, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[148, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[149, "polars.Expr.drop_nulls"]], "dt (polars.expr property)": [[150, "polars.Expr.dt"]], "entropy() (polars.expr method)": [[151, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[152, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[153, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[154, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[155, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[156, "polars.Expr.exp"]], "explode() (polars.expr method)": [[157, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[158, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[159, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[160, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[161, "polars.Expr.filter"]], "first() (polars.expr method)": [[162, "polars.Expr.first"]], "flatten() (polars.expr method)": [[163, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[164, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[165, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[166, "polars.Expr.hash"]], "head() (polars.expr method)": [[167, "polars.Expr.head"]], "inspect() (polars.expr method)": [[168, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[169, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[170, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[171, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[172, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[173, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[174, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[175, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[176, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[177, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[178, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[179, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[180, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[181, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[182, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[183, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[184, "polars.Expr.last"]], "len() (polars.expr method)": [[185, "polars.Expr.len"]], "limit() (polars.expr method)": [[186, "polars.Expr.limit"]], "list() (polars.expr method)": [[187, "polars.Expr.list"]], "log() (polars.expr method)": [[188, "polars.Expr.log"]], "log10() (polars.expr method)": [[189, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[190, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[191, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[192, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[193, "polars.Expr.max"]], "mean() (polars.expr method)": [[194, "polars.Expr.mean"]], "median() (polars.expr method)": [[195, "polars.Expr.median"]], "min() (polars.expr method)": [[196, "polars.Expr.min"]], "mode() (polars.expr method)": [[197, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[198, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[199, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[200, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[201, "polars.Expr.null_count"]], "over() (polars.expr method)": [[202, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[203, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[204, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[205, "polars.Expr.prefix"]], "product() (polars.expr method)": [[206, "polars.Expr.product"]], "quantile() (polars.expr method)": [[207, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[208, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[209, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[210, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[211, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[212, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[213, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[214, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[215, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[216, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[217, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[218, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[219, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[220, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[221, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[222, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[223, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[224, "polars.Expr.round"]], "sample() (polars.expr method)": [[225, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[226, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[227, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[228, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[229, "polars.Expr.shift_and_fill"]], "shuffle() (polars.expr method)": [[230, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[231, "polars.Expr.sign"]], "sin() (polars.expr method)": [[232, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[233, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[234, "polars.Expr.skew"]], "slice() (polars.expr method)": [[235, "polars.Expr.slice"]], "sort() (polars.expr method)": [[236, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[237, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[238, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[239, "polars.Expr.std"]], "str (polars.expr property)": [[240, "polars.Expr.str"]], "suffix() (polars.expr method)": [[241, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[242, "polars.Expr.sum"]], "tail() (polars.expr method)": [[243, "polars.Expr.tail"]], "take() (polars.expr method)": [[244, "polars.Expr.take"]], "take_every() (polars.expr method)": [[245, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[246, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[247, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[248, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[249, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[250, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[251, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[252, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[253, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[254, "polars.Expr.var"]], "where() (polars.expr method)": [[255, "polars.Expr.where"]], "cache() (polars.lazyframe method)": [[256, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[257, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[258, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[259, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[260, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[261, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[262, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[263, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[264, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[265, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[266, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[267, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[268, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[269, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[270, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[271, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[272, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[273, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[274, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[275, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[276, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[277, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[278, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[279, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[280, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[281, "polars.LazyFrame.last"]], "limit() (polars.lazyframe method)": [[282, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[283, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[284, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[285, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[286, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[287, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[288, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[289, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[290, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[291, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[292, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[293, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[294, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[295, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[296, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[297, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[298, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[299, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[300, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[301, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[302, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[303, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[304, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[305, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[306, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[307, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[308, "polars.LazyFrame.var"]], "with_column() (polars.lazyframe method)": [[309, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[310, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[311, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[312, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[313, "polars.LazyFrame.write_json"]], "execute() (polars.sqlcontext method)": [[314, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[315, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[316, "polars.SQLContext.register"]], "series (class in polars)": [[317, "polars.Series"]], "__init__() (polars.series method)": [[317, "polars.Series.__init__"]], "abs() (polars.series method)": [[318, "polars.Series.abs"]], "alias() (polars.series method)": [[319, "polars.Series.alias"]], "all() (polars.series method)": [[320, "polars.Series.all"]], "any() (polars.series method)": [[321, "polars.Series.any"]], "append() (polars.series method)": [[322, "polars.Series.append"]], "apply() (polars.series method)": [[323, "polars.Series.apply"]], "arccos() (polars.series method)": [[324, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[325, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[326, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[327, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[328, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[329, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[330, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[331, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[332, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[333, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[334, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[335, "polars.Series.argsort"]], "arr (polars.series property)": [[336, "polars.Series.arr"]], "cast() (polars.series method)": [[337, "polars.Series.cast"]], "cat (polars.series property)": [[338, "polars.Series.cat"]], "ceil() (polars.series method)": [[339, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[340, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[341, "polars.Series.cleared"]], "clip() (polars.series method)": [[342, "polars.Series.clip"]], "clip_max() (polars.series method)": [[343, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[344, "polars.Series.clip_min"]], "clone() (polars.series method)": [[345, "polars.Series.clone"]], "cos() (polars.series method)": [[346, "polars.Series.cos"]], "cosh() (polars.series method)": [[347, "polars.Series.cosh"]], "cummax() (polars.series method)": [[348, "polars.Series.cummax"]], "cummin() (polars.series method)": [[349, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[350, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[351, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[352, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[353, "polars.Series.describe"]], "diff() (polars.series method)": [[354, "polars.Series.diff"]], "dot() (polars.series method)": [[355, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[356, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[357, "polars.Series.drop_nulls"]], "dt (polars.series property)": [[358, "polars.Series.dt"]], "dtype (polars.series property)": [[359, "polars.Series.dtype"]], "entropy() (polars.series method)": [[360, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[361, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[362, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[363, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[364, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[365, "polars.Series.exp"]], "explode() (polars.series method)": [[366, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[367, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[368, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[369, "polars.Series.fill_null"]], "filter() (polars.series method)": [[370, "polars.Series.filter"]], "flags (polars.series property)": [[371, "polars.Series.flags"]], "floor() (polars.series method)": [[372, "polars.Series.floor"]], "has_validity() (polars.series method)": [[373, "polars.Series.has_validity"]], "hash() (polars.series method)": [[374, "polars.Series.hash"]], "head() (polars.series method)": [[375, "polars.Series.head"]], "inner_dtype (polars.series property)": [[376, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[377, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[378, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[379, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[380, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[381, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[382, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[383, "polars.Series.is_first"]], "is_float() (polars.series method)": [[384, "polars.Series.is_float"]], "is_in() (polars.series method)": [[385, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[386, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[387, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[388, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[389, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[390, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[391, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[392, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[393, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[394, "polars.Series.kurtosis"]], "len() (polars.series method)": [[395, "polars.Series.len"]], "limit() (polars.series method)": [[396, "polars.Series.limit"]], "log() (polars.series method)": [[397, "polars.Series.log"]], "log10() (polars.series method)": [[398, "polars.Series.log10"]], "max() (polars.series method)": [[399, "polars.Series.max"]], "mean() (polars.series method)": [[400, "polars.Series.mean"]], "median() (polars.series method)": [[401, "polars.Series.median"]], "min() (polars.series method)": [[402, "polars.Series.min"]], "mode() (polars.series method)": [[403, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[404, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[405, "polars.Series.n_unique"]], "name (polars.series property)": [[406, "polars.Series.name"]], "nan_max() (polars.series method)": [[407, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[408, "polars.Series.nan_min"]], "null_count() (polars.series method)": [[409, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[410, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[411, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[412, "polars.Series.peak_min"]], "product() (polars.series method)": [[413, "polars.Series.product"]], "quantile() (polars.series method)": [[414, "polars.Series.quantile"]], "rank() (polars.series method)": [[415, "polars.Series.rank"]], "rechunk() (polars.series method)": [[416, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[417, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[418, "polars.Series.rename"]], "reshape() (polars.series method)": [[419, "polars.Series.reshape"]], "reverse() (polars.series method)": [[420, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[421, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[422, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[423, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[424, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[425, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[426, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[427, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[428, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[429, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[430, "polars.Series.rolling_var"]], "round() (polars.series method)": [[431, "polars.Series.round"]], "sample() (polars.series method)": [[432, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[433, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[434, "polars.Series.series_equal"]], "set() (polars.series method)": [[435, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[436, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[437, "polars.Series.set_sorted"]], "shape (polars.series property)": [[438, "polars.Series.shape"]], "shift() (polars.series method)": [[439, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[440, "polars.Series.shift_and_fill"]], "shrink_to_fit() (polars.series method)": [[441, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[442, "polars.Series.shuffle"]], "sign() (polars.series method)": [[443, "polars.Series.sign"]], "sin() (polars.series method)": [[444, "polars.Series.sin"]], "sinh() (polars.series method)": [[445, "polars.Series.sinh"]], "skew() (polars.series method)": [[446, "polars.Series.skew"]], "slice() (polars.series method)": [[447, "polars.Series.slice"]], "sort() (polars.series method)": [[448, "polars.Series.sort"]], "sqrt() (polars.series method)": [[449, "polars.Series.sqrt"]], "std() (polars.series method)": [[450, "polars.Series.std"]], "str (polars.series property)": [[451, "polars.Series.str"]], "sum() (polars.series method)": [[452, "polars.Series.sum"]], "tail() (polars.series method)": [[453, "polars.Series.tail"]], "take() (polars.series method)": [[454, "polars.Series.take"]], "take_every() (polars.series method)": [[455, "polars.Series.take_every"]], "tan() (polars.series method)": [[456, "polars.Series.tan"]], "tanh() (polars.series method)": [[457, "polars.Series.tanh"]], "time_unit (polars.series property)": [[458, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[459, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[460, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[461, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[462, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[463, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[464, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[465, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[466, "polars.Series.top_k"]], "unique() (polars.series method)": [[467, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[468, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[469, "polars.Series.value_counts"]], "var() (polars.series method)": [[470, "polars.Series.var"]], "view() (polars.series method)": [[471, "polars.Series.view"]], "zip_with() (polars.series method)": [[472, "polars.Series.zip_with"]], "stringcache (class in polars)": [[473, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[473, "polars.StringCache.__init__"]], "all() (in module polars)": [[474, "polars.all"]], "any() (in module polars)": [[475, "polars.any"]], "apply() (in module polars)": [[476, "polars.apply"]], "arange() (in module polars)": [[477, "polars.arange"]], "arg_where() (in module polars)": [[478, "polars.arg_where"]], "argsort_by() (in module polars)": [[479, "polars.argsort_by"]], "avg() (in module polars)": [[480, "polars.avg"]], "coalesce() (in module polars)": [[481, "polars.coalesce"]], "col() (in module polars)": [[482, "polars.col"]], "collect_all() (in module polars)": [[483, "polars.collect_all"]], "concat() (in module polars)": [[484, "polars.concat"]], "concat_list() (in module polars)": [[485, "polars.concat_list"]], "concat_str() (in module polars)": [[486, "polars.concat_str"]], "count() (in module polars)": [[487, "polars.count"]], "cov() (in module polars)": [[488, "polars.cov"]], "cumfold() (in module polars)": [[489, "polars.cumfold"]], "cumsum() (in module polars)": [[490, "polars.cumsum"]], "cut() (in module polars)": [[491, "polars.cut"]], "binary (class in polars.datatypes)": [[492, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[492, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[493, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[493, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[494, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[494, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[495, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[495, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[496, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[496, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[497, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[497, "polars.datatypes.Datetime.__init__"]], "duration (class in polars.datatypes)": [[498, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[498, "polars.datatypes.Duration.__init__"]], "float32 (class in polars.datatypes)": [[499, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[499, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[500, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[500, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[501, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[501, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[502, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[502, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[503, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[503, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[504, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[504, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[505, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[505, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[506, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[506, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[507, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[507, "polars.datatypes.Object.__init__"]], "struct (class in polars.datatypes)": [[508, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[508, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[509, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[509, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[510, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[510, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[511, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[511, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[512, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[512, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[513, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[513, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[514, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[514, "polars.datatypes.Unknown.__init__"]], "utf8 (class in polars.datatypes)": [[515, "polars.datatypes.Utf8"]], "__init__() (polars.datatypes.utf8 method)": [[515, "polars.datatypes.Utf8.__init__"]], "get_idx_type() (in module polars.datatypes)": [[516, "polars.datatypes.get_idx_type"]], "date() (in module polars)": [[517, "polars.date"]], "date_range() (in module polars)": [[518, "polars.date_range"]], "datetime() (in module polars)": [[519, "polars.datetime"]], "duration() (in module polars)": [[520, "polars.duration"]], "element() (in module polars)": [[521, "polars.element"]], "arrowerror": [[522, "polars.exceptions.ArrowError"]], "computeerror": [[523, "polars.exceptions.ComputeError"]], "duplicateerror": [[524, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[525, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[526, "polars.exceptions.NoDataError"]], "norowsreturned": [[527, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[528, "polars.exceptions.NotFoundError"]], "panicexception": [[529, "polars.exceptions.PanicException"]], "rowsexception": [[530, "polars.exceptions.RowsException"]], "schemaerror": [[531, "polars.exceptions.SchemaError"]], "shapeerror": [[532, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[533, "polars.exceptions.TooManyRowsReturned"]], "exclude() (in module polars)": [[534, "polars.exclude"]], "first() (in module polars)": [[535, "polars.first"]], "fold() (in module polars)": [[536, "polars.fold"]], "format() (in module polars)": [[537, "polars.format"]], "from_arrow() (in module polars)": [[538, "polars.from_arrow"]], "from_dict() (in module polars)": [[539, "polars.from_dict"]], "from_dicts() (in module polars)": [[540, "polars.from_dicts"]], "from_numpy() (in module polars)": [[541, "polars.from_numpy"]], "from_pandas() (in module polars)": [[542, "polars.from_pandas"]], "from_records() (in module polars)": [[543, "polars.from_records"]], "get_dummies() (in module polars)": [[544, "polars.get_dummies"]], "groups() (in module polars)": [[545, "polars.groups"]], "head() (in module polars)": [[546, "polars.head"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[547, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[548, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[549, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[550, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[551, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[552, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[553, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[554, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[555, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[556, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[557, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[558, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[559, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[560, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[561, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[562, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[563, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[564, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[565, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[566, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[567, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[568, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[569, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[570, "polars.internals.dataframe.pivot.PivotOps.sum"]], "set_ordering() (polars.internals.expr.categorical.exprcatnamespace method)": [[571, "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[572, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[573, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[574, "polars.internals.expr.datetime.ExprDateTimeNameSpace.day"]], "days() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[575, "polars.internals.expr.datetime.ExprDateTimeNameSpace.days"]], "epoch() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[576, "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch"]], "hour() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[577, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour"]], "hours() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[578, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours"]], "iso_year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[579, "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year"]], "microsecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[580, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[581, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[582, "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[583, "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds"]], "minute() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[584, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute"]], "minutes() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[585, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes"]], "month() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[586, "polars.internals.expr.datetime.ExprDateTimeNameSpace.month"]], "nanosecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[587, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[588, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[589, "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[590, "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[591, "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter"]], "second() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[592, "polars.internals.expr.datetime.ExprDateTimeNameSpace.second"]], "seconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[593, "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds"]], "strftime() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[594, "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime"]], "timestamp() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[595, "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp"]], "truncate() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[596, "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate"]], "week() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[597, "polars.internals.expr.datetime.ExprDateTimeNameSpace.week"]], "weekday() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[598, "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[599, "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit"]], "year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[600, "polars.internals.expr.datetime.ExprDateTimeNameSpace.year"]], "arg_max() (polars.internals.expr.list.exprlistnamespace method)": [[601, "polars.internals.expr.list.ExprListNameSpace.arg_max"]], "arg_min() (polars.internals.expr.list.exprlistnamespace method)": [[602, "polars.internals.expr.list.ExprListNameSpace.arg_min"]], "concat() (polars.internals.expr.list.exprlistnamespace method)": [[603, "polars.internals.expr.list.ExprListNameSpace.concat"]], "contains() (polars.internals.expr.list.exprlistnamespace method)": [[604, "polars.internals.expr.list.ExprListNameSpace.contains"]], "diff() (polars.internals.expr.list.exprlistnamespace method)": [[605, "polars.internals.expr.list.ExprListNameSpace.diff"]], "eval() (polars.internals.expr.list.exprlistnamespace method)": [[606, "polars.internals.expr.list.ExprListNameSpace.eval"]], "first() (polars.internals.expr.list.exprlistnamespace method)": [[607, "polars.internals.expr.list.ExprListNameSpace.first"]], "get() (polars.internals.expr.list.exprlistnamespace method)": [[608, "polars.internals.expr.list.ExprListNameSpace.get"]], "head() (polars.internals.expr.list.exprlistnamespace method)": [[609, "polars.internals.expr.list.ExprListNameSpace.head"]], "join() (polars.internals.expr.list.exprlistnamespace method)": [[610, "polars.internals.expr.list.ExprListNameSpace.join"]], "last() (polars.internals.expr.list.exprlistnamespace method)": [[611, "polars.internals.expr.list.ExprListNameSpace.last"]], "lengths() (polars.internals.expr.list.exprlistnamespace method)": [[612, "polars.internals.expr.list.ExprListNameSpace.lengths"]], "max() (polars.internals.expr.list.exprlistnamespace method)": [[613, "polars.internals.expr.list.ExprListNameSpace.max"]], "mean() (polars.internals.expr.list.exprlistnamespace method)": [[614, "polars.internals.expr.list.ExprListNameSpace.mean"]], "min() (polars.internals.expr.list.exprlistnamespace method)": [[615, "polars.internals.expr.list.ExprListNameSpace.min"]], "reverse() (polars.internals.expr.list.exprlistnamespace method)": [[616, "polars.internals.expr.list.ExprListNameSpace.reverse"]], "shift() (polars.internals.expr.list.exprlistnamespace method)": [[617, "polars.internals.expr.list.ExprListNameSpace.shift"]], "slice() (polars.internals.expr.list.exprlistnamespace method)": [[618, "polars.internals.expr.list.ExprListNameSpace.slice"]], "sort() (polars.internals.expr.list.exprlistnamespace method)": [[619, "polars.internals.expr.list.ExprListNameSpace.sort"]], "sum() (polars.internals.expr.list.exprlistnamespace method)": [[620, "polars.internals.expr.list.ExprListNameSpace.sum"]], "tail() (polars.internals.expr.list.exprlistnamespace method)": [[621, "polars.internals.expr.list.ExprListNameSpace.tail"]], "to_struct() (polars.internals.expr.list.exprlistnamespace method)": [[622, "polars.internals.expr.list.ExprListNameSpace.to_struct"]], "unique() (polars.internals.expr.list.exprlistnamespace method)": [[623, "polars.internals.expr.list.ExprListNameSpace.unique"]], "output_name() (polars.internals.expr.meta.exprmetanamespace method)": [[624, "polars.internals.expr.meta.ExprMetaNameSpace.output_name"]], "pop() (polars.internals.expr.meta.exprmetanamespace method)": [[625, "polars.internals.expr.meta.ExprMetaNameSpace.pop"]], "root_names() (polars.internals.expr.meta.exprmetanamespace method)": [[626, "polars.internals.expr.meta.ExprMetaNameSpace.root_names"]], "undo_aliases() (polars.internals.expr.meta.exprmetanamespace method)": [[627, "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases"]], "concat() (polars.internals.expr.string.exprstringnamespace method)": [[628, "polars.internals.expr.string.ExprStringNameSpace.concat"]], "contains() (polars.internals.expr.string.exprstringnamespace method)": [[629, "polars.internals.expr.string.ExprStringNameSpace.contains"]], "count_match() (polars.internals.expr.string.exprstringnamespace method)": [[630, "polars.internals.expr.string.ExprStringNameSpace.count_match"]], "decode() (polars.internals.expr.string.exprstringnamespace method)": [[631, "polars.internals.expr.string.ExprStringNameSpace.decode"]], "encode() (polars.internals.expr.string.exprstringnamespace method)": [[632, "polars.internals.expr.string.ExprStringNameSpace.encode"]], "ends_with() (polars.internals.expr.string.exprstringnamespace method)": [[633, "polars.internals.expr.string.ExprStringNameSpace.ends_with"]], "extract() (polars.internals.expr.string.exprstringnamespace method)": [[634, "polars.internals.expr.string.ExprStringNameSpace.extract"]], "extract_all() (polars.internals.expr.string.exprstringnamespace method)": [[635, "polars.internals.expr.string.ExprStringNameSpace.extract_all"]], "json_path_match() (polars.internals.expr.string.exprstringnamespace method)": [[636, "polars.internals.expr.string.ExprStringNameSpace.json_path_match"]], "lengths() (polars.internals.expr.string.exprstringnamespace method)": [[637, "polars.internals.expr.string.ExprStringNameSpace.lengths"]], "ljust() (polars.internals.expr.string.exprstringnamespace method)": [[638, "polars.internals.expr.string.ExprStringNameSpace.ljust"]], "lstrip() (polars.internals.expr.string.exprstringnamespace method)": [[639, "polars.internals.expr.string.ExprStringNameSpace.lstrip"]], "replace() (polars.internals.expr.string.exprstringnamespace method)": [[640, "polars.internals.expr.string.ExprStringNameSpace.replace"]], "replace_all() (polars.internals.expr.string.exprstringnamespace method)": [[641, "polars.internals.expr.string.ExprStringNameSpace.replace_all"]], "rjust() (polars.internals.expr.string.exprstringnamespace method)": [[642, "polars.internals.expr.string.ExprStringNameSpace.rjust"]], "rstrip() (polars.internals.expr.string.exprstringnamespace method)": [[643, "polars.internals.expr.string.ExprStringNameSpace.rstrip"]], "slice() (polars.internals.expr.string.exprstringnamespace method)": [[644, "polars.internals.expr.string.ExprStringNameSpace.slice"]], "split() (polars.internals.expr.string.exprstringnamespace method)": [[645, "polars.internals.expr.string.ExprStringNameSpace.split"]], "split_exact() (polars.internals.expr.string.exprstringnamespace method)": [[646, "polars.internals.expr.string.ExprStringNameSpace.split_exact"]], "splitn() (polars.internals.expr.string.exprstringnamespace method)": [[647, "polars.internals.expr.string.ExprStringNameSpace.splitn"]], "starts_with() (polars.internals.expr.string.exprstringnamespace method)": [[648, "polars.internals.expr.string.ExprStringNameSpace.starts_with"]], "strip() (polars.internals.expr.string.exprstringnamespace method)": [[649, "polars.internals.expr.string.ExprStringNameSpace.strip"]], "strptime() (polars.internals.expr.string.exprstringnamespace method)": [[650, "polars.internals.expr.string.ExprStringNameSpace.strptime"]], "to_lowercase() (polars.internals.expr.string.exprstringnamespace method)": [[651, "polars.internals.expr.string.ExprStringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.expr.string.exprstringnamespace method)": [[652, "polars.internals.expr.string.ExprStringNameSpace.to_uppercase"]], "zfill() (polars.internals.expr.string.exprstringnamespace method)": [[653, "polars.internals.expr.string.ExprStringNameSpace.zfill"]], "field() (polars.internals.expr.struct.exprstructnamespace method)": [[654, "polars.internals.expr.struct.ExprStructNameSpace.field"]], "rename_fields() (polars.internals.expr.struct.exprstructnamespace method)": [[655, "polars.internals.expr.struct.ExprStructNameSpace.rename_fields"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[656, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[657, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[658, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[659, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "set_ordering() (polars.internals.series.categorical.catnamespace method)": [[660, "polars.internals.series.categorical.CatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[661, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.series.datetime.datetimenamespace method)": [[662, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.series.datetime.datetimenamespace method)": [[663, "polars.internals.series.datetime.DateTimeNameSpace.day"]], "days() (polars.internals.series.datetime.datetimenamespace method)": [[664, "polars.internals.series.datetime.DateTimeNameSpace.days"]], "epoch() (polars.internals.series.datetime.datetimenamespace method)": [[665, "polars.internals.series.datetime.DateTimeNameSpace.epoch"]], "hour() (polars.internals.series.datetime.datetimenamespace method)": [[666, "polars.internals.series.datetime.DateTimeNameSpace.hour"]], "hours() (polars.internals.series.datetime.datetimenamespace method)": [[667, "polars.internals.series.datetime.DateTimeNameSpace.hours"]], "iso_year() (polars.internals.series.datetime.datetimenamespace method)": [[668, "polars.internals.series.datetime.DateTimeNameSpace.iso_year"]], "max() (polars.internals.series.datetime.datetimenamespace method)": [[669, "polars.internals.series.datetime.DateTimeNameSpace.max"]], "mean() (polars.internals.series.datetime.datetimenamespace method)": [[670, "polars.internals.series.datetime.DateTimeNameSpace.mean"]], "median() (polars.internals.series.datetime.datetimenamespace method)": [[671, "polars.internals.series.datetime.DateTimeNameSpace.median"]], "microsecond() (polars.internals.series.datetime.datetimenamespace method)": [[672, "polars.internals.series.datetime.DateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.series.datetime.datetimenamespace method)": [[673, "polars.internals.series.datetime.DateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.series.datetime.datetimenamespace method)": [[674, "polars.internals.series.datetime.DateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.series.datetime.datetimenamespace method)": [[675, "polars.internals.series.datetime.DateTimeNameSpace.milliseconds"]], "min() (polars.internals.series.datetime.datetimenamespace method)": [[676, "polars.internals.series.datetime.DateTimeNameSpace.min"]], "minute() (polars.internals.series.datetime.datetimenamespace method)": [[677, "polars.internals.series.datetime.DateTimeNameSpace.minute"]], "minutes() (polars.internals.series.datetime.datetimenamespace method)": [[678, "polars.internals.series.datetime.DateTimeNameSpace.minutes"]], "month() (polars.internals.series.datetime.datetimenamespace method)": [[679, "polars.internals.series.datetime.DateTimeNameSpace.month"]], "nanosecond() (polars.internals.series.datetime.datetimenamespace method)": [[680, "polars.internals.series.datetime.DateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.series.datetime.datetimenamespace method)": [[681, "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.series.datetime.datetimenamespace method)": [[682, "polars.internals.series.datetime.DateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.series.datetime.datetimenamespace method)": [[683, "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.series.datetime.datetimenamespace method)": [[684, "polars.internals.series.datetime.DateTimeNameSpace.quarter"]], "second() (polars.internals.series.datetime.datetimenamespace method)": [[685, "polars.internals.series.datetime.DateTimeNameSpace.second"]], "seconds() (polars.internals.series.datetime.datetimenamespace method)": [[686, "polars.internals.series.datetime.DateTimeNameSpace.seconds"]], "strftime() (polars.internals.series.datetime.datetimenamespace method)": [[687, "polars.internals.series.datetime.DateTimeNameSpace.strftime"]], "timestamp() (polars.internals.series.datetime.datetimenamespace method)": [[688, "polars.internals.series.datetime.DateTimeNameSpace.timestamp"]], "truncate() (polars.internals.series.datetime.datetimenamespace method)": [[689, "polars.internals.series.datetime.DateTimeNameSpace.truncate"]], "week() (polars.internals.series.datetime.datetimenamespace method)": [[690, "polars.internals.series.datetime.DateTimeNameSpace.week"]], "weekday() (polars.internals.series.datetime.datetimenamespace method)": [[691, "polars.internals.series.datetime.DateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[692, "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit"]], "year() (polars.internals.series.datetime.datetimenamespace method)": [[693, "polars.internals.series.datetime.DateTimeNameSpace.year"]], "arg_max() (polars.internals.series.list.listnamespace method)": [[694, "polars.internals.series.list.ListNameSpace.arg_max"]], "arg_min() (polars.internals.series.list.listnamespace method)": [[695, "polars.internals.series.list.ListNameSpace.arg_min"]], "concat() (polars.internals.series.list.listnamespace method)": [[696, "polars.internals.series.list.ListNameSpace.concat"]], "contains() (polars.internals.series.list.listnamespace method)": [[697, "polars.internals.series.list.ListNameSpace.contains"]], "diff() (polars.internals.series.list.listnamespace method)": [[698, "polars.internals.series.list.ListNameSpace.diff"]], "eval() (polars.internals.series.list.listnamespace method)": [[699, "polars.internals.series.list.ListNameSpace.eval"]], "first() (polars.internals.series.list.listnamespace method)": [[700, "polars.internals.series.list.ListNameSpace.first"]], "get() (polars.internals.series.list.listnamespace method)": [[701, "polars.internals.series.list.ListNameSpace.get"]], "head() (polars.internals.series.list.listnamespace method)": [[702, "polars.internals.series.list.ListNameSpace.head"]], "join() (polars.internals.series.list.listnamespace method)": [[703, "polars.internals.series.list.ListNameSpace.join"]], "last() (polars.internals.series.list.listnamespace method)": [[704, "polars.internals.series.list.ListNameSpace.last"]], "lengths() (polars.internals.series.list.listnamespace method)": [[705, "polars.internals.series.list.ListNameSpace.lengths"]], "max() (polars.internals.series.list.listnamespace method)": [[706, "polars.internals.series.list.ListNameSpace.max"]], "mean() (polars.internals.series.list.listnamespace method)": [[707, "polars.internals.series.list.ListNameSpace.mean"]], "min() (polars.internals.series.list.listnamespace method)": [[708, "polars.internals.series.list.ListNameSpace.min"]], "reverse() (polars.internals.series.list.listnamespace method)": [[709, "polars.internals.series.list.ListNameSpace.reverse"]], "shift() (polars.internals.series.list.listnamespace method)": [[710, "polars.internals.series.list.ListNameSpace.shift"]], "slice() (polars.internals.series.list.listnamespace method)": [[711, "polars.internals.series.list.ListNameSpace.slice"]], "sort() (polars.internals.series.list.listnamespace method)": [[712, "polars.internals.series.list.ListNameSpace.sort"]], "sum() (polars.internals.series.list.listnamespace method)": [[713, "polars.internals.series.list.ListNameSpace.sum"]], "tail() (polars.internals.series.list.listnamespace method)": [[714, "polars.internals.series.list.ListNameSpace.tail"]], "unique() (polars.internals.series.list.listnamespace method)": [[715, "polars.internals.series.list.ListNameSpace.unique"]], "concat() (polars.internals.series.string.stringnamespace method)": [[716, "polars.internals.series.string.StringNameSpace.concat"]], "contains() (polars.internals.series.string.stringnamespace method)": [[717, "polars.internals.series.string.StringNameSpace.contains"]], "count_match() (polars.internals.series.string.stringnamespace method)": [[718, "polars.internals.series.string.StringNameSpace.count_match"]], "decode() (polars.internals.series.string.stringnamespace method)": [[719, "polars.internals.series.string.StringNameSpace.decode"]], "encode() (polars.internals.series.string.stringnamespace method)": [[720, "polars.internals.series.string.StringNameSpace.encode"]], "ends_with() (polars.internals.series.string.stringnamespace method)": [[721, "polars.internals.series.string.StringNameSpace.ends_with"]], "extract() (polars.internals.series.string.stringnamespace method)": [[722, "polars.internals.series.string.StringNameSpace.extract"]], "extract_all() (polars.internals.series.string.stringnamespace method)": [[723, "polars.internals.series.string.StringNameSpace.extract_all"]], "json_path_match() (polars.internals.series.string.stringnamespace method)": [[724, "polars.internals.series.string.StringNameSpace.json_path_match"]], "lengths() (polars.internals.series.string.stringnamespace method)": [[725, "polars.internals.series.string.StringNameSpace.lengths"]], "ljust() (polars.internals.series.string.stringnamespace method)": [[726, "polars.internals.series.string.StringNameSpace.ljust"]], "lstrip() (polars.internals.series.string.stringnamespace method)": [[727, "polars.internals.series.string.StringNameSpace.lstrip"]], "replace() (polars.internals.series.string.stringnamespace method)": [[728, "polars.internals.series.string.StringNameSpace.replace"]], "replace_all() (polars.internals.series.string.stringnamespace method)": [[729, "polars.internals.series.string.StringNameSpace.replace_all"]], "rjust() (polars.internals.series.string.stringnamespace method)": [[730, "polars.internals.series.string.StringNameSpace.rjust"]], "rstrip() (polars.internals.series.string.stringnamespace method)": [[731, "polars.internals.series.string.StringNameSpace.rstrip"]], "slice() (polars.internals.series.string.stringnamespace method)": [[732, "polars.internals.series.string.StringNameSpace.slice"]], "split() (polars.internals.series.string.stringnamespace method)": [[733, "polars.internals.series.string.StringNameSpace.split"]], "split_exact() (polars.internals.series.string.stringnamespace method)": [[734, "polars.internals.series.string.StringNameSpace.split_exact"]], "splitn() (polars.internals.series.string.stringnamespace method)": [[735, "polars.internals.series.string.StringNameSpace.splitn"]], "starts_with() (polars.internals.series.string.stringnamespace method)": [[736, "polars.internals.series.string.StringNameSpace.starts_with"]], "strip() (polars.internals.series.string.stringnamespace method)": [[737, "polars.internals.series.string.StringNameSpace.strip"]], "strptime() (polars.internals.series.string.stringnamespace method)": [[738, "polars.internals.series.string.StringNameSpace.strptime"]], "to_lowercase() (polars.internals.series.string.stringnamespace method)": [[739, "polars.internals.series.string.StringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.series.string.stringnamespace method)": [[740, "polars.internals.series.string.StringNameSpace.to_uppercase"]], "zfill() (polars.internals.series.string.stringnamespace method)": [[741, "polars.internals.series.string.StringNameSpace.zfill"]], "field() (polars.internals.series.struct.structnamespace method)": [[742, "polars.internals.series.struct.StructNameSpace.field"]], "fields (polars.internals.series.struct.structnamespace property)": [[743, "polars.internals.series.struct.StructNameSpace.fields"]], "rename_fields() (polars.internals.series.struct.structnamespace method)": [[744, "polars.internals.series.struct.StructNameSpace.rename_fields"]], "to_frame() (polars.internals.series.struct.structnamespace method)": [[745, "polars.internals.series.struct.StructNameSpace.to_frame"]], "list() (in module polars)": [[746, "polars.list"]], "lit() (in module polars)": [[747, "polars.lit"]], "map() (in module polars)": [[748, "polars.map"]], "max() (in module polars)": [[749, "polars.max"]], "mean() (in module polars)": [[750, "polars.mean"]], "median() (in module polars)": [[751, "polars.median"]], "min() (in module polars)": [[752, "polars.min"]], "n_unique() (in module polars)": [[753, "polars.n_unique"]], "pearson_corr() (in module polars)": [[754, "polars.pearson_corr"]], "quantile() (in module polars)": [[755, "polars.quantile"]], "read_avro() (in module polars)": [[756, "polars.read_avro"]], "read_csv() (in module polars)": [[757, "polars.read_csv"]], "read_excel() (in module polars)": [[758, "polars.read_excel"]], "read_ipc() (in module polars)": [[759, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[760, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[761, "polars.read_json"]], "read_ndjson() (in module polars)": [[762, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[763, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[764, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[765, "polars.read_sql"]], "repeat() (in module polars)": [[766, "polars.repeat"]], "scan_csv() (in module polars)": [[767, "polars.scan_csv"]], "scan_ds() (in module polars)": [[768, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[769, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[770, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[771, "polars.scan_parquet"]], "select() (in module polars)": [[772, "polars.select"]], "show_versions() (in module polars)": [[773, "polars.show_versions"]], "spearman_rank_corr() (in module polars)": [[774, "polars.spearman_rank_corr"]], "std() (in module polars)": [[775, "polars.std"]], "struct() (in module polars)": [[776, "polars.struct"]], "sum() (in module polars)": [[777, "polars.sum"]], "tail() (in module polars)": [[778, "polars.tail"]], "assert_frame_equal() (in module polars.testing)": [[779, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[780, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.column method)": [[781, "polars.testing.column.__init__"]], "column (class in polars.testing)": [[781, "polars.testing.column"]], "columns() (in module polars.testing)": [[782, "polars.testing.columns"]], "dataframes() (in module polars.testing)": [[783, "polars.testing.dataframes"]], "series() (in module polars.testing)": [[784, "polars.testing.series"]], "threadpool_size() (in module polars)": [[785, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[786, "polars.toggle_string_cache"]], "var() (in module polars)": [[787, "polars.var"]], "when() (in module polars)": [[788, "polars.when"]], "lazyframe (class in polars)": [[797, "polars.LazyFrame"]], "sqlcontext (class in polars)": [[799, "polars.SQLContext"]]}})